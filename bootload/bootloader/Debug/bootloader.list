
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005248  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  00007268  2**0
                  CONTENTS
  4 .ARM          00000000  0800549c  0800549c  00007268  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800549c  0800549c  00007268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800549c  0800549c  0000649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054a0  080054a0  000064a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  080054a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001354  20000268  0800570c  00007268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800570c  000075bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6b6  00000000  00000000  00007291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1a  00000000  00000000  00013947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00016368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000919  00000000  00000000  00016f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bbbe  00000000  00000000  00017891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001145f  00000000  00000000  0003344f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096013  00000000  00000000  000448ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da8c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003670  00000000  00000000  000da904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ddf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000268 	.word	0x20000268
 8000200:	00000000 	.word	0x00000000
 8000204:	08005414 	.word	0x08005414

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000026c 	.word	0x2000026c
 8000220:	08005414 	.word	0x08005414

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f001 f81b 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f83f 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f935 	bl	80004a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000236:	f000 f90d 	bl	8000454 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800023a:	f000 f8d1 	bl	80003e0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800023e:	f000 f899 	bl	8000374 <MX_SPI2_Init>
  MX_IWDG_Init();
 8000242:	f000 f87d 	bl	8000340 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  uint16_t ID = w25q128_read_id();
 8000246:	f000 ff75 	bl	8001134 <w25q128_read_id>
 800024a:	4603      	mov	r3, r0
 800024c:	80fb      	strh	r3, [r7, #6]
  uint32_t I2D = flash_read_ID();
 800024e:	f000 ffdb 	bl	8001208 <flash_read_ID>
 8000252:	6038      	str	r0, [r7, #0]
  printf("%d\r\n",ID);
 8000254:	88fb      	ldrh	r3, [r7, #6]
 8000256:	4619      	mov	r1, r3
 8000258:	480f      	ldr	r0, [pc, #60]	@ (8000298 <main+0x74>)
 800025a:	f004 fa55 	bl	8004708 <iprintf>
  printf("%ld\r\n",I2D);
 800025e:	6839      	ldr	r1, [r7, #0]
 8000260:	480e      	ldr	r0, [pc, #56]	@ (800029c <main+0x78>)
 8000262:	f004 fa51 	bl	8004708 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(Rx1Sign)
 8000266:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <main+0x7c>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d008      	beq.n	8000280 <main+0x5c>
	{

	  Rx1Sign = 0;
 800026e:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <main+0x7c>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
	  if(Rx1_Count > 6)
 8000274:	4b0b      	ldr	r3, [pc, #44]	@ (80002a4 <main+0x80>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	2b06      	cmp	r3, #6
 800027a:	d901      	bls.n	8000280 <main+0x5c>
		  BootLoad();
 800027c:	f000 fcdc 	bl	8000c38 <BootLoad>
	}
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000280:	2101      	movs	r1, #1
 8000282:	4809      	ldr	r0, [pc, #36]	@ (80002a8 <main+0x84>)
 8000284:	f002 f9b2 	bl	80025ec <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000288:	2064      	movs	r0, #100	@ 0x64
 800028a:	f001 f84d 	bl	8001328 <HAL_Delay>
	HAL_IWDG_Refresh(&hiwdg);
 800028e:	4807      	ldr	r0, [pc, #28]	@ (80002ac <main+0x88>)
 8000290:	f002 fa09 	bl	80026a6 <HAL_IWDG_Refresh>
	if(Rx1Sign)
 8000294:	e7e7      	b.n	8000266 <main+0x42>
 8000296:	bf00      	nop
 8000298:	0800542c 	.word	0x0800542c
 800029c:	08005434 	.word	0x08005434
 80002a0:	20001444 	.word	0x20001444
 80002a4:	20001446 	.word	0x20001446
 80002a8:	40011000 	.word	0x40011000
 80002ac:	20000284 	.word	0x20000284

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	@ 0x40
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	@ 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f004 fa77 	bl	80047b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002d2:	2309      	movs	r3, #9
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 f9e1 	bl	80026c4 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000308:	f000 f974 	bl	80005f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2302      	movs	r3, #2
 8000312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800031c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2102      	movs	r1, #2
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fc4e 	bl	8002bc8 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000332:	f000 f95f 	bl	80005f4 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	@ 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000344:	4b09      	ldr	r3, [pc, #36]	@ (800036c <MX_IWDG_Init+0x2c>)
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <MX_IWDG_Init+0x30>)
 8000348:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800034a:	4b08      	ldr	r3, [pc, #32]	@ (800036c <MX_IWDG_Init+0x2c>)
 800034c:	2206      	movs	r2, #6
 800034e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <MX_IWDG_Init+0x2c>)
 8000352:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000356:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000358:	4804      	ldr	r0, [pc, #16]	@ (800036c <MX_IWDG_Init+0x2c>)
 800035a:	f002 f960 	bl	800261e <HAL_IWDG_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000364:	f000 f946 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000284 	.word	0x20000284
 8000370:	40003000 	.word	0x40003000

08000374 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000378:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <MX_SPI2_Init+0x64>)
 800037a:	4a18      	ldr	r2, [pc, #96]	@ (80003dc <MX_SPI2_Init+0x68>)
 800037c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800037e:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <MX_SPI2_Init+0x64>)
 8000380:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000384:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000386:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <MX_SPI2_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800038c:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <MX_SPI2_Init+0x64>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000392:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <MX_SPI2_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <MX_SPI2_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_SPI2_Init+0x64>)
 80003a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <MX_SPI2_Init+0x64>)
 80003a8:	2208      	movs	r2, #8
 80003aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ac:	4b0a      	ldr	r3, [pc, #40]	@ (80003d8 <MX_SPI2_Init+0x64>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b2:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <MX_SPI2_Init+0x64>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b8:	4b07      	ldr	r3, [pc, #28]	@ (80003d8 <MX_SPI2_Init+0x64>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <MX_SPI2_Init+0x64>)
 80003c0:	220a      	movs	r2, #10
 80003c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003c4:	4804      	ldr	r0, [pc, #16]	@ (80003d8 <MX_SPI2_Init+0x64>)
 80003c6:	f002 fd8d 	bl	8002ee4 <HAL_SPI_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003d0:	f000 f910 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000290 	.word	0x20000290
 80003dc:	40003800 	.word	0x40003800

080003e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e4:	4b18      	ldr	r3, [pc, #96]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 80003e6:	4a19      	ldr	r2, [pc, #100]	@ (800044c <MX_USART1_UART_Init+0x6c>)
 80003e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ea:	4b17      	ldr	r3, [pc, #92]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 80003ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003f2:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f8:	4b13      	ldr	r3, [pc, #76]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003fe:	4b12      	ldr	r3, [pc, #72]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000404:	4b10      	ldr	r3, [pc, #64]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 8000406:	220c      	movs	r2, #12
 8000408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040a:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000410:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 8000412:	2200      	movs	r2, #0
 8000414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000416:	480c      	ldr	r0, [pc, #48]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 8000418:	f003 f84b 	bl	80034b2 <HAL_UART_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000422:	f000 f8e7 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
 8000426:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	68da      	ldr	r2, [r3, #12]
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f042 0210 	orr.w	r2, r2, #16
 8000434:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1,buffer_RX1,RX1_Size);
 8000436:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 800043a:	4905      	ldr	r1, [pc, #20]	@ (8000450 <MX_USART1_UART_Init+0x70>)
 800043c:	4802      	ldr	r0, [pc, #8]	@ (8000448 <MX_USART1_UART_Init+0x68>)
 800043e:	f003 f8f9 	bl	8003634 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	200002e8 	.word	0x200002e8
 800044c:	40013800 	.word	0x40013800
 8000450:	20001004 	.word	0x20001004

08000454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800045a:	4b10      	ldr	r3, [pc, #64]	@ (800049c <MX_DMA_Init+0x48>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a0f      	ldr	r2, [pc, #60]	@ (800049c <MX_DMA_Init+0x48>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <MX_DMA_Init+0x48>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	2100      	movs	r1, #0
 8000476:	200e      	movs	r0, #14
 8000478:	f001 f851 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800047c:	200e      	movs	r0, #14
 800047e:	f001 f86a 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	200f      	movs	r0, #15
 8000488:	f001 f849 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800048c:	200f      	movs	r0, #15
 800048e:	f001 f862 	bl	8001556 <HAL_NVIC_EnableIRQ>

}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	@ 0x28
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 0318 	add.w	r3, r7, #24
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b4:	4b49      	ldr	r3, [pc, #292]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a48      	ldr	r2, [pc, #288]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004ba:	f043 0310 	orr.w	r3, r3, #16
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b46      	ldr	r3, [pc, #280]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0310 	and.w	r3, r3, #16
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b43      	ldr	r3, [pc, #268]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a42      	ldr	r2, [pc, #264]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b40      	ldr	r3, [pc, #256]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e4:	4b3d      	ldr	r3, [pc, #244]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a3c      	ldr	r2, [pc, #240]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b3a      	ldr	r3, [pc, #232]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b37      	ldr	r3, [pc, #220]	@ (80005dc <MX_GPIO_Init+0x13c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a36      	ldr	r2, [pc, #216]	@ (80005dc <MX_GPIO_Init+0x13c>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b34      	ldr	r3, [pc, #208]	@ (80005dc <MX_GPIO_Init+0x13c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b31      	ldr	r3, [pc, #196]	@ (80005dc <MX_GPIO_Init+0x13c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a30      	ldr	r2, [pc, #192]	@ (80005dc <MX_GPIO_Init+0x13c>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b2e      	ldr	r3, [pc, #184]	@ (80005dc <MX_GPIO_Init+0x13c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	482b      	ldr	r0, [pc, #172]	@ (80005e0 <MX_GPIO_Init+0x140>)
 8000532:	f002 f843 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800053c:	4829      	ldr	r0, [pc, #164]	@ (80005e4 <MX_GPIO_Init+0x144>)
 800053e:	f002 f83d 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2108      	movs	r1, #8
 8000546:	4828      	ldr	r0, [pc, #160]	@ (80005e8 <MX_GPIO_Init+0x148>)
 8000548:	f002 f838 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800054c:	2301      	movs	r3, #1
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2302      	movs	r3, #2
 800055a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	4619      	mov	r1, r3
 8000562:	481f      	ldr	r0, [pc, #124]	@ (80005e0 <MX_GPIO_Init+0x140>)
 8000564:	f001 fe96 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000570:	2302      	movs	r3, #2
 8000572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0318 	add.w	r3, r7, #24
 8000578:	4619      	mov	r1, r3
 800057a:	481c      	ldr	r0, [pc, #112]	@ (80005ec <MX_GPIO_Init+0x14c>)
 800057c:	f001 fe8a 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8000580:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800058a:	2302      	movs	r3, #2
 800058c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	4619      	mov	r1, r3
 8000594:	4816      	ldr	r0, [pc, #88]	@ (80005f0 <MX_GPIO_Init+0x150>)
 8000596:	f001 fe7d 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800059a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	4619      	mov	r1, r3
 80005b2:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <MX_GPIO_Init+0x144>)
 80005b4:	f001 fe6e 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80005b8:	2308      	movs	r3, #8
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2302      	movs	r3, #2
 80005c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 0318 	add.w	r3, r7, #24
 80005cc:	4619      	mov	r1, r3
 80005ce:	4806      	ldr	r0, [pc, #24]	@ (80005e8 <MX_GPIO_Init+0x148>)
 80005d0:	f001 fe60 	bl	8002294 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005d4:	bf00      	nop
 80005d6:	3728      	adds	r7, #40	@ 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40011000 	.word	0x40011000
 80005e4:	40010c00 	.word	0x40010c00
 80005e8:	40011400 	.word	0x40011400
 80005ec:	40010800 	.word	0x40010800
 80005f0:	40011c00 	.word	0x40011c00

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <Error_Handler+0x8>

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a14      	ldr	r2, [pc, #80]	@ (800065c <HAL_MspInit+0x5c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b12      	ldr	r3, [pc, #72]	@ (800065c <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <HAL_MspInit+0x5c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <HAL_MspInit+0x60>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <HAL_MspInit+0x60>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	40010000 	.word	0x40010000

08000664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a1c      	ldr	r2, [pc, #112]	@ (80006f0 <HAL_SPI_MspInit+0x8c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d131      	bne.n	80006e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <HAL_SPI_MspInit+0x90>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a1a      	ldr	r2, [pc, #104]	@ (80006f4 <HAL_SPI_MspInit+0x90>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068e:	61d3      	str	r3, [r2, #28]
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <HAL_SPI_MspInit+0x90>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069c:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <HAL_SPI_MspInit+0x90>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <HAL_SPI_MspInit+0x90>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_SPI_MspInit+0x90>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80006b4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80006b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <HAL_SPI_MspInit+0x94>)
 80006ca:	f001 fde3 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <HAL_SPI_MspInit+0x94>)
 80006e4:	f001 fdd6 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40003800 	.word	0x40003800
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010c00 	.word	0x40010c00

080006fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a47      	ldr	r2, [pc, #284]	@ (8000834 <HAL_UART_MspInit+0x138>)
 8000718:	4293      	cmp	r3, r2
 800071a:	f040 8086 	bne.w	800082a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800071e:	4b46      	ldr	r3, [pc, #280]	@ (8000838 <HAL_UART_MspInit+0x13c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a45      	ldr	r2, [pc, #276]	@ (8000838 <HAL_UART_MspInit+0x13c>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b43      	ldr	r3, [pc, #268]	@ (8000838 <HAL_UART_MspInit+0x13c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b40      	ldr	r3, [pc, #256]	@ (8000838 <HAL_UART_MspInit+0x13c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a3f      	ldr	r2, [pc, #252]	@ (8000838 <HAL_UART_MspInit+0x13c>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b3d      	ldr	r3, [pc, #244]	@ (8000838 <HAL_UART_MspInit+0x13c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800074e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4836      	ldr	r0, [pc, #216]	@ (800083c <HAL_UART_MspInit+0x140>)
 8000764:	f001 fd96 	bl	8002294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000768:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800076c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	482f      	ldr	r0, [pc, #188]	@ (800083c <HAL_UART_MspInit+0x140>)
 800077e:	f001 fd89 	bl	8002294 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000782:	4b2f      	ldr	r3, [pc, #188]	@ (8000840 <HAL_UART_MspInit+0x144>)
 8000784:	4a2f      	ldr	r2, [pc, #188]	@ (8000844 <HAL_UART_MspInit+0x148>)
 8000786:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000788:	4b2d      	ldr	r3, [pc, #180]	@ (8000840 <HAL_UART_MspInit+0x144>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800078e:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <HAL_UART_MspInit+0x144>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000794:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <HAL_UART_MspInit+0x144>)
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800079a:	4b29      	ldr	r3, [pc, #164]	@ (8000840 <HAL_UART_MspInit+0x144>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007a0:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <HAL_UART_MspInit+0x144>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80007a6:	4b26      	ldr	r3, [pc, #152]	@ (8000840 <HAL_UART_MspInit+0x144>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ac:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <HAL_UART_MspInit+0x144>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007b2:	4823      	ldr	r0, [pc, #140]	@ (8000840 <HAL_UART_MspInit+0x144>)
 80007b4:	f000 feea 	bl	800158c <HAL_DMA_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80007be:	f7ff ff19 	bl	80005f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000840 <HAL_UART_MspInit+0x144>)
 80007c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000840 <HAL_UART_MspInit+0x144>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 80007d0:	4a1e      	ldr	r2, [pc, #120]	@ (800084c <HAL_UART_MspInit+0x150>)
 80007d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 80007d6:	2210      	movs	r2, #16
 80007d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 80007e2:	2280      	movs	r2, #128	@ 0x80
 80007e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80007fe:	4812      	ldr	r0, [pc, #72]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 8000800:	f000 fec4 	bl	800158c <HAL_DMA_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800080a:	f7ff fef3 	bl	80005f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 8000812:	639a      	str	r2, [r3, #56]	@ 0x38
 8000814:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <HAL_UART_MspInit+0x14c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2025      	movs	r0, #37	@ 0x25
 8000820:	f000 fe7d 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000824:	2025      	movs	r0, #37	@ 0x25
 8000826:	f000 fe96 	bl	8001556 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800082a:	bf00      	nop
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40013800 	.word	0x40013800
 8000838:	40021000 	.word	0x40021000
 800083c:	40010800 	.word	0x40010800
 8000840:	20000330 	.word	0x20000330
 8000844:	40020058 	.word	0x40020058
 8000848:	20000374 	.word	0x20000374
 800084c:	40020044 	.word	0x40020044

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <NMI_Handler+0x4>

08000858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <MemManage_Handler+0x4>

08000868 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <UsageFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 fd26 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80008ac:	4802      	ldr	r0, [pc, #8]	@ (80008b8 <DMA1_Channel4_IRQHandler+0x10>)
 80008ae:	f001 f887 	bl	80019c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000374 	.word	0x20000374

080008bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <DMA1_Channel5_IRQHandler+0x10>)
 80008c2:	f001 f87d 	bl	80019c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000330 	.word	0x20000330

080008d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  USART_IRQHandler_myself(&huart1);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <USART1_IRQHandler+0x14>)
 80008d6:	f000 fb65 	bl	8000fa4 <USART_IRQHandler_myself>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008da:	4802      	ldr	r0, [pc, #8]	@ (80008e4 <USART1_IRQHandler+0x14>)
 80008dc:	f002 ff4e 	bl	800377c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200002e8 	.word	0x200002e8

080008e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e00a      	b.n	8000910 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008fa:	f3af 8000 	nop.w
 80008fe:	4601      	mov	r1, r0
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	60ba      	str	r2, [r7, #8]
 8000906:	b2ca      	uxtb	r2, r1
 8000908:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf0      	blt.n	80008fa <_read+0x12>
  }

  return len;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e009      	b.n	8000948 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 faf5 	bl	8000f2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf1      	blt.n	8000934 <_write+0x12>
  }
  return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <_close>:

int _close(int file)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000980:	605a      	str	r2, [r3, #4]
  return 0;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <_isatty>:

int _isatty(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr

080009a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b085      	sub	sp, #20
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
	...

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	@ (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d207      	bcs.n	80009fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ec:	f003 ff30 	bl	8004850 <__errno>
 80009f0:	4603      	mov	r3, r0
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	e009      	b.n	8000a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a02:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <_sbrk+0x64>)
 8000a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20010000 	.word	0x20010000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	200003b8 	.word	0x200003b8
 8000a24:	200015c0 	.word	0x200015c0

08000a28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a34:	f7ff fff8 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a3a:	490c      	ldr	r1, [pc, #48]	@ (8000a6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a09      	ldr	r2, [pc, #36]	@ (8000a74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a50:	4c09      	ldr	r4, [pc, #36]	@ (8000a78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f003 fefd 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff fbdf 	bl	8000224 <main>
  bx lr
 8000a66:	4770      	bx	lr
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8000a70:	080054a4 	.word	0x080054a4
  ldr r2, =_sbss
 8000a74:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8000a78:	200015bc 	.word	0x200015bc

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <GetCrc_16>:
*   返 回 值: 校验值
*******************************************************************************/


uint16_t GetCrc_16(uint8_t * pData, uint16_t nLength)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
	uint16_t cRc_16 = 0x0000;    // 初始化
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	81fb      	strh	r3, [r7, #14]
    while(nLength>0)
 8000a90:	e017      	b.n	8000ac2 <GetCrc_16+0x42>
    {
        cRc_16 = (cRc_16 << 8) ^ crc_table [((cRc_16>>8) ^ *pData) & 0xff];
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	021b      	lsls	r3, r3, #8
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	89fb      	ldrh	r3, [r7, #14]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	404b      	eors	r3, r1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	490a      	ldr	r1, [pc, #40]	@ (8000ad4 <GetCrc_16+0x54>)
 8000aaa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	4053      	eors	r3, r2
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	81fb      	strh	r3, [r7, #14]
        nLength--;
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	807b      	strh	r3, [r7, #2]
        pData++;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
    while(nLength>0)
 8000ac2:	887b      	ldrh	r3, [r7, #2]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1e4      	bne.n	8000a92 <GetCrc_16+0x12>
    }
    return cRc_16;
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <SendBootLoad>:


void SendBootLoad(uint8_t cmd)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	uint16_t size = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	81fb      	strh	r3, [r7, #14]
	uint16_t Crc16 = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	81bb      	strh	r3, [r7, #12]
	buffer_TX1[0] = buffer_RX1[0];
 8000aea:	4b41      	ldr	r3, [pc, #260]	@ (8000bf0 <SendBootLoad+0x118>)
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	4b41      	ldr	r3, [pc, #260]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000af0:	701a      	strb	r2, [r3, #0]
	buffer_TX1[1] = buffer_RX1[1];
 8000af2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf0 <SendBootLoad+0x118>)
 8000af4:	785a      	ldrb	r2, [r3, #1]
 8000af6:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000af8:	705a      	strb	r2, [r3, #1]
	buffer_TX1[2] = cmd;
 8000afa:	4a3e      	ldr	r2, [pc, #248]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	7093      	strb	r3, [r2, #2]
	if(cmd == 0x01) //回复握手
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d120      	bne.n	8000b48 <SendBootLoad+0x70>
	{
		buffer_TX1[3] = 0x00;
 8000b06:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	70da      	strb	r2, [r3, #3]
		buffer_TX1[4] = 0x02;
 8000b0c:	4b39      	ldr	r3, [pc, #228]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b0e:	2202      	movs	r2, #2
 8000b10:	711a      	strb	r2, [r3, #4]
		buffer_TX1[5] = buffer_RX1[5];
 8000b12:	4b37      	ldr	r3, [pc, #220]	@ (8000bf0 <SendBootLoad+0x118>)
 8000b14:	795a      	ldrb	r2, [r3, #5]
 8000b16:	4b37      	ldr	r3, [pc, #220]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b18:	715a      	strb	r2, [r3, #5]
		buffer_TX1[6] = buffer_RX1[6];
 8000b1a:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <SendBootLoad+0x118>)
 8000b1c:	799a      	ldrb	r2, [r3, #6]
 8000b1e:	4b35      	ldr	r3, [pc, #212]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b20:	719a      	strb	r2, [r3, #6]
		Crc16 = GetCrc_16(buffer_TX1,7);
 8000b22:	2107      	movs	r1, #7
 8000b24:	4833      	ldr	r0, [pc, #204]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b26:	f7ff ffab 	bl	8000a80 <GetCrc_16>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	81bb      	strh	r3, [r7, #12]
		buffer_TX1[8] = Crc16 >> 8;              //高位
 8000b2e:	89bb      	ldrh	r3, [r7, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b38:	721a      	strb	r2, [r3, #8]
		buffer_TX1[7] = Crc16 & 0xFF;            //低位
 8000b3a:	89bb      	ldrh	r3, [r7, #12]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b40:	71da      	strb	r2, [r3, #7]
		size = 9;
 8000b42:	2309      	movs	r3, #9
 8000b44:	81fb      	strh	r3, [r7, #14]
 8000b46:	e04a      	b.n	8000bde <SendBootLoad+0x106>
	}
	else if(cmd == 0x02)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d120      	bne.n	8000b90 <SendBootLoad+0xb8>
	{
		buffer_TX1[3] = 0x00;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	70da      	strb	r2, [r3, #3]
		buffer_TX1[4] = 0x02;
 8000b54:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	711a      	strb	r2, [r3, #4]
		buffer_TX1[5] = buffer_RX1[5];
 8000b5a:	4b25      	ldr	r3, [pc, #148]	@ (8000bf0 <SendBootLoad+0x118>)
 8000b5c:	795a      	ldrb	r2, [r3, #5]
 8000b5e:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b60:	715a      	strb	r2, [r3, #5]
		buffer_TX1[6] = buffer_RX1[6];
 8000b62:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <SendBootLoad+0x118>)
 8000b64:	799a      	ldrb	r2, [r3, #6]
 8000b66:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b68:	719a      	strb	r2, [r3, #6]
		Crc16 = GetCrc_16(buffer_TX1,7);
 8000b6a:	2107      	movs	r1, #7
 8000b6c:	4821      	ldr	r0, [pc, #132]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b6e:	f7ff ff87 	bl	8000a80 <GetCrc_16>
 8000b72:	4603      	mov	r3, r0
 8000b74:	81bb      	strh	r3, [r7, #12]
		buffer_TX1[8] = Crc16 >> 8;              //高位
 8000b76:	89bb      	ldrh	r3, [r7, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b80:	721a      	strb	r2, [r3, #8]
		buffer_TX1[7] = Crc16 & 0xFF;            //低位
 8000b82:	89bb      	ldrh	r3, [r7, #12]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b88:	71da      	strb	r2, [r3, #7]
		size = 9;
 8000b8a:	2309      	movs	r3, #9
 8000b8c:	81fb      	strh	r3, [r7, #14]
 8000b8e:	e026      	b.n	8000bde <SendBootLoad+0x106>
	}
	else if(cmd == 0x03)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d123      	bne.n	8000bde <SendBootLoad+0x106>
	{
		buffer_TX1[3] = 0x04;
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b98:	2204      	movs	r2, #4
 8000b9a:	70da      	strb	r2, [r3, #3]
		buffer_TX1[4] = 0x02;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	711a      	strb	r2, [r3, #4]
		buffer_TX1[5] = buffer_RX1[5];
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <SendBootLoad+0x118>)
 8000ba4:	795a      	ldrb	r2, [r3, #5]
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000ba8:	715a      	strb	r2, [r3, #5]
		buffer_TX1[6] = buffer_RX1[6];
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <SendBootLoad+0x118>)
 8000bac:	799a      	ldrb	r2, [r3, #6]
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000bb0:	719a      	strb	r2, [r3, #6]
		Crc16 = GetCrc_16(buffer_TX1,1031);
 8000bb2:	f240 4107 	movw	r1, #1031	@ 0x407
 8000bb6:	480f      	ldr	r0, [pc, #60]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000bb8:	f7ff ff62 	bl	8000a80 <GetCrc_16>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	81bb      	strh	r3, [r7, #12]
		buffer_TX1[1031] = Crc16 >> 8;              //高位
 8000bc0:	89bb      	ldrh	r3, [r7, #12]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000bca:	f883 2407 	strb.w	r2, [r3, #1031]	@ 0x407
		buffer_TX1[1032] = Crc16 & 0xFF;            //低位
 8000bce:	89bb      	ldrh	r3, [r7, #12]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000bd4:	f883 2408 	strb.w	r2, [r3, #1032]	@ 0x408
		size = 1033;
 8000bd8:	f240 4309 	movw	r3, #1033	@ 0x409
 8000bdc:	81fb      	strh	r3, [r7, #14]
	}
	usartSend(buffer_TX1,size);
 8000bde:	89fb      	ldrh	r3, [r7, #14]
 8000be0:	4619      	mov	r1, r3
 8000be2:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <SendBootLoad+0x11c>)
 8000be4:	f000 f9bc 	bl	8000f60 <usartSend>
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20001004 	.word	0x20001004
 8000bf4:	20000bc4 	.word	0x20000bc4

08000bf8 <JumpProgram>:



void JumpProgram(uint32_t FlashAddr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	JumpAddress = *(__IO uint32_t*) (FlashAddr + 4);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3304      	adds	r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <JumpProgram+0x38>)
 8000c08:	6013      	str	r3, [r2, #0]
	JumpToApplication = (pFunction) JumpAddress;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <JumpProgram+0x38>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <JumpProgram+0x3c>)
 8000c12:	601a      	str	r2, [r3, #0]
	__set_MSP(*(__IO uint32_t*) FlashAddr);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f383 8808 	msr	MSP, r3
}
 8000c20:	bf00      	nop
	JumpToApplication();
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <JumpProgram+0x3c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4798      	blx	r3
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200003c0 	.word	0x200003c0
 8000c34:	200003bc 	.word	0x200003bc

08000c38 <BootLoad>:

void BootLoad(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8000c3e:	af00      	add	r7, sp, #0
	uint8_t   cmd;
	uint16_t  blocks;
	uint32_t  maxAdder;
	uint8_t   bin[1024];
	cmd = buffer_RX1[2];
 8000c40:	4b33      	ldr	r3, [pc, #204]	@ (8000d10 <BootLoad+0xd8>)
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	f887 340d 	strb.w	r3, [r7, #1037]	@ 0x40d
	if(cmd == 0x01) //握手
 8000c48:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d113      	bne.n	8000c78 <BootLoad+0x40>
	{
		blocks = (buffer_RX1[6] << 8) + buffer_RX1[5];
 8000c50:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <BootLoad+0xd8>)
 8000c52:	799b      	ldrb	r3, [r3, #6]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4a2d      	ldr	r2, [pc, #180]	@ (8000d10 <BootLoad+0xd8>)
 8000c5a:	7952      	ldrb	r2, [r2, #5]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a
		maxAdder = blocks * 1024;
 8000c62:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	@ 0x40a
 8000c66:	029b      	lsls	r3, r3, #10
 8000c68:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
		SendBootLoad(cmd);
 8000c6c:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff31 	bl	8000ad8 <SendBootLoad>
	*/
	else if(cmd == 0x04)
	{
		JumpProgram(FLASH_USER_START_ADDR);
	}
}
 8000c76:	e045      	b.n	8000d04 <BootLoad+0xcc>
	else if(cmd == 0x02) //写
 8000c78:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d13a      	bne.n	8000cf6 <BootLoad+0xbe>
		blocks = ((buffer_RX1[6] << 8) + buffer_RX1[5]) - 1;  //块数
 8000c80:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <BootLoad+0xd8>)
 8000c82:	799b      	ldrb	r3, [r3, #6]
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4a21      	ldr	r2, [pc, #132]	@ (8000d10 <BootLoad+0xd8>)
 8000c8a:	7952      	ldrb	r2, [r2, #5]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3b01      	subs	r3, #1
 8000c92:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a
		maxAdder = FLASH_USER_START_ADDR + (blocks * 1024);
 8000c96:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	@ 0x40a
 8000c9a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000c9e:	3320      	adds	r3, #32
 8000ca0:	029b      	lsls	r3, r3, #10
 8000ca2:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
		for(uint16_t i=0; i<1024; i++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8a7 340e 	strh.w	r3, [r7, #1038]	@ 0x40e
 8000cac:	e010      	b.n	8000cd0 <BootLoad+0x98>
			bin[i] = buffer_RX1[7 + i];
 8000cae:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 8000cb2:	1dda      	adds	r2, r3, #7
 8000cb4:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 8000cb8:	4915      	ldr	r1, [pc, #84]	@ (8000d10 <BootLoad+0xd8>)
 8000cba:	5c89      	ldrb	r1, [r1, r2]
 8000cbc:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8000cc0:	f2a2 420c 	subw	r2, r2, #1036	@ 0x40c
 8000cc4:	54d1      	strb	r1, [r2, r3]
		for(uint16_t i=0; i<1024; i++)
 8000cc6:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 8000cca:	3301      	adds	r3, #1
 8000ccc:	f8a7 340e 	strh.w	r3, [r7, #1038]	@ 0x40e
 8000cd0:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 8000cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cd8:	d3e9      	bcc.n	8000cae <BootLoad+0x76>
		write_flash(maxAdder, (uint16_t*)&bin, 1024/2);
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8000ce6:	f000 f86d 	bl	8000dc4 <write_flash>
		SendBootLoad(cmd);
 8000cea:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fef2 	bl	8000ad8 <SendBootLoad>
}
 8000cf4:	e006      	b.n	8000d04 <BootLoad+0xcc>
	else if(cmd == 0x04)
 8000cf6:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d102      	bne.n	8000d04 <BootLoad+0xcc>
		JumpProgram(FLASH_USER_START_ADDR);
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <BootLoad+0xdc>)
 8000d00:	f7ff ff7a 	bl	8000bf8 <JumpProgram>
}
 8000d04:	bf00      	nop
 8000d06:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20001004 	.word	0x20001004
 8000d14:	08008000 	.word	0x08008000

08000d18 <Read_Flash_halfword>:



//从指定地址读取一个半字(16位数据)
uint16_t Read_Flash_halfword(uint32_t faddr)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    return *(volatile uint16_t *)faddr;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <Read_Flash>:


//从指定地址开始读出指定长度的数据
void Read_Flash(uint32_t raddr, uint16_t *pbuf, uint16_t length)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	80fb      	strh	r3, [r7, #6]
    uint16_t i;

    for (i = 0; i < length; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	82fb      	strh	r3, [r7, #22]
 8000d42:	e00e      	b.n	8000d62 <Read_Flash+0x32>
    {
        pbuf[i] = Read_Flash_halfword(raddr);    /* 读取2个字节 */
 8000d44:	8afb      	ldrh	r3, [r7, #22]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	18d4      	adds	r4, r2, r3
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f7ff ffe3 	bl	8000d18 <Read_Flash_halfword>
 8000d52:	4603      	mov	r3, r0
 8000d54:	8023      	strh	r3, [r4, #0]
        raddr += 2; /* 偏移2个字节 */
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3302      	adds	r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < length; i++)
 8000d5c:	8afb      	ldrh	r3, [r7, #22]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	82fb      	strh	r3, [r7, #22]
 8000d62:	8afa      	ldrh	r2, [r7, #22]
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3ec      	bcc.n	8000d44 <Read_Flash+0x14>
    }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}

08000d74 <flash_write_nocheck>:

void flash_write_nocheck(uint32_t waddr, uint16_t *pbuf, uint16_t length)
{
 8000d74:	b5b0      	push	{r4, r5, r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for (i = 0; i < length; i++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	82fb      	strh	r3, [r7, #22]
 8000d86:	e014      	b.n	8000db2 <flash_write_nocheck+0x3e>
    {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, waddr, pbuf[i]);
 8000d88:	8afb      	ldrh	r3, [r7, #22]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	4413      	add	r3, r2
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2200      	movs	r2, #0
 8000d96:	461c      	mov	r4, r3
 8000d98:	4615      	mov	r5, r2
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	462b      	mov	r3, r5
 8000d9e:	68f9      	ldr	r1, [r7, #12]
 8000da0:	2001      	movs	r0, #1
 8000da2:	f001 f877 	bl	8001e94 <HAL_FLASH_Program>
        waddr += 2;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3302      	adds	r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < length; i++)
 8000dac:	8afb      	ldrh	r3, [r7, #22]
 8000dae:	3301      	adds	r3, #1
 8000db0:	82fb      	strh	r3, [r7, #22]
 8000db2:	8afa      	ldrh	r2, [r7, #22]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d3e6      	bcc.n	8000d88 <flash_write_nocheck+0x14>
    }
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bdb0      	pop	{r4, r5, r7, pc}

08000dc4 <write_flash>:

uint16_t g_flashbuf[STM32_SECTOR_SIZE / 2];
void write_flash(uint32_t waddr, uint16_t *pbuf, uint16_t length)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08e      	sub	sp, #56	@ 0x38
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint32_t offaddr;
    FLASH_EraseInitTypeDef flash_eraseop;
    uint32_t erase_addr;

    if (waddr < STM32_FLASH_BASE || (waddr >= (STM32_FLASH_BASE + 1024 * STM32_FLASH_SIZE)))
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000dd8:	f0c0 80a1 	bcc.w	8000f1e <write_flash+0x15a>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8000de2:	f080 809c 	bcs.w	8000f1e <write_flash+0x15a>
    {
        return;
    }

    HAL_FLASH_Unlock();
 8000de6:	f001 f8c5 	bl	8001f74 <HAL_FLASH_Unlock>

    offaddr = waddr - STM32_FLASH_BASE;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
    secpos = offaddr / STM32_SECTOR_SIZE;
 8000df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df4:	0adb      	lsrs	r3, r3, #11
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
    secoff = (offaddr % STM32_SECTOR_SIZE) / 2;
 8000df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000dfe:	085b      	lsrs	r3, r3, #1
 8000e00:	867b      	strh	r3, [r7, #50]	@ 0x32
    secremain = STM32_SECTOR_SIZE / 2 - secoff;
 8000e02:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000e04:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000e08:	863b      	strh	r3, [r7, #48]	@ 0x30
    if (length <= secremain)
 8000e0a:	88fa      	ldrh	r2, [r7, #6]
 8000e0c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d801      	bhi.n	8000e16 <write_flash+0x52>
    {
        secremain = length;
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	863b      	strh	r3, [r7, #48]	@ 0x30
    }

    while (1)
    {
    	Read_Flash(secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE, g_flashbuf, STM32_SECTOR_SIZE / 2);
 8000e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e18:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000e1c:	02db      	lsls	r3, r3, #11
 8000e1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e22:	4941      	ldr	r1, [pc, #260]	@ (8000f28 <write_flash+0x164>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff83 	bl	8000d30 <Read_Flash>
        for (i = 0; i < secremain; i++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000e2e:	e00c      	b.n	8000e4a <write_flash+0x86>
        {
            if (g_flashbuf[secoff + i] != 0XFFFF)
 8000e30:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000e32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e34:	4413      	add	r3, r2
 8000e36:	4a3c      	ldr	r2, [pc, #240]	@ (8000f28 <write_flash+0x164>)
 8000e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d107      	bne.n	8000e54 <write_flash+0x90>
        for (i = 0; i < secremain; i++)
 8000e44:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e46:	3301      	adds	r3, #1
 8000e48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000e4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000e4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d3ee      	bcc.n	8000e30 <write_flash+0x6c>
 8000e52:	e000      	b.n	8000e56 <write_flash+0x92>
            {
                break;
 8000e54:	bf00      	nop
            }
        }
        if (i < secremain)
 8000e56:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000e58:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d232      	bcs.n	8000ec4 <write_flash+0x100>
        {
            flash_eraseop.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
            flash_eraseop.Banks = FLASH_BANK_1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61fb      	str	r3, [r7, #28]
            flash_eraseop.NbPages = 1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
            flash_eraseop.PageAddress = secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE;
 8000e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e6c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000e70:	02db      	lsls	r3, r3, #11
 8000e72:	623b      	str	r3, [r7, #32]
            HAL_FLASHEx_Erase( &flash_eraseop, &erase_addr);
 8000e74:	f107 0214 	add.w	r2, r7, #20
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 f960 	bl	8002144 <HAL_FLASHEx_Erase>

            for (i = 0; i < secremain; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000e88:	e00d      	b.n	8000ea6 <write_flash+0xe2>
            {
                g_flashbuf[i + secoff] = pbuf[i];
 8000e8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	441a      	add	r2, r3
 8000e92:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8000e94:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000e96:	440b      	add	r3, r1
 8000e98:	8811      	ldrh	r1, [r2, #0]
 8000e9a:	4a23      	ldr	r2, [pc, #140]	@ (8000f28 <write_flash+0x164>)
 8000e9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < secremain; i++)
 8000ea0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000ea6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000ea8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3ed      	bcc.n	8000e8a <write_flash+0xc6>
            }
            flash_write_nocheck(secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE, g_flashbuf, STM32_SECTOR_SIZE / 2);
 8000eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eb0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000eb4:	02db      	lsls	r3, r3, #11
 8000eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eba:	491b      	ldr	r1, [pc, #108]	@ (8000f28 <write_flash+0x164>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff59 	bl	8000d74 <flash_write_nocheck>
 8000ec2:	e005      	b.n	8000ed0 <write_flash+0x10c>
        }
        else
        {
            flash_write_nocheck(waddr, pbuf, secremain);
 8000ec4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff ff52 	bl	8000d74 <flash_write_nocheck>
        }
        if (length == secremain)
 8000ed0:	88fa      	ldrh	r2, [r7, #6]
 8000ed2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d01e      	beq.n	8000f16 <write_flash+0x152>
        {
            break;
        }
        else
        {
            secpos++;
 8000ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eda:	3301      	adds	r3, #1
 8000edc:	637b      	str	r3, [r7, #52]	@ 0x34
            secoff = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	867b      	strh	r3, [r7, #50]	@ 0x32
            pbuf += secremain;
 8000ee2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	4413      	add	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
            waddr += secremain * 2;
 8000eec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
            length -= secremain;
 8000ef8:	88fa      	ldrh	r2, [r7, #6]
 8000efa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	80fb      	strh	r3, [r7, #6]
            if (length > (STM32_SECTOR_SIZE / 2))
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f06:	d903      	bls.n	8000f10 <write_flash+0x14c>
            {
                secremain = STM32_SECTOR_SIZE / 2;
 8000f08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f0c:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000f0e:	e782      	b.n	8000e16 <write_flash+0x52>
            }
            else
            {
                secremain = length;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	863b      	strh	r3, [r7, #48]	@ 0x30
    	Read_Flash(secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE, g_flashbuf, STM32_SECTOR_SIZE / 2);
 8000f14:	e77f      	b.n	8000e16 <write_flash+0x52>
            break;
 8000f16:	bf00      	nop
            }
        }
    }

    HAL_FLASH_Lock();
 8000f18:	f001 f852 	bl	8001fc0 <HAL_FLASH_Lock>
 8000f1c:	e000      	b.n	8000f20 <write_flash+0x15c>
        return;
 8000f1e:	bf00      	nop
}
 8000f20:	3738      	adds	r7, #56	@ 0x38
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200003c4 	.word	0x200003c4

08000f2c <__io_putchar>:
#endif


#define HAL_USART_DMA				// DMA 串口发送数据
PUTCHAR_PROTOTYPE
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	#ifdef HAL_USART_DMA
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&ch, 1);		//DMA串口发送数据
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2201      	movs	r2, #1
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4808      	ldr	r0, [pc, #32]	@ (8000f5c <__io_putchar+0x30>)
 8000f3c:	f002 fb0a 	bl	8003554 <HAL_UART_Transmit_DMA>
		while(!__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC));
 8000f40:	bf00      	nop
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <__io_putchar+0x30>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f4c:	2b40      	cmp	r3, #64	@ 0x40
 8000f4e:	d1f8      	bne.n	8000f42 <__io_putchar+0x16>
	#else
		HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xffff);	//普通串口发送数据
	#endif
	    return ch;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200002e8 	.word	0x200002e8

08000f60 <usartSend>:


void usartSend(void* date, uint16_t size)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
	size = size > TX1_Size ? TX1_Size : size;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8000f72:	bf28      	it	cs
 8000f74:	f44f 6388 	movcs.w	r3, #1088	@ 0x440
 8000f78:	807b      	strh	r3, [r7, #2]
	memcpy(buffer_TX1, date, size);
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4806      	ldr	r0, [pc, #24]	@ (8000f9c <usartSend+0x3c>)
 8000f82:	f003 fc92 	bl	80048aa <memcpy>
	HAL_UART_Transmit_DMA(&huart1, buffer_TX1, size);
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4904      	ldr	r1, [pc, #16]	@ (8000f9c <usartSend+0x3c>)
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <usartSend+0x40>)
 8000f8e:	f002 fae1 	bl	8003554 <HAL_UART_Transmit_DMA>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000bc4 	.word	0x20000bc4
 8000fa0:	200002e8 	.word	0x200002e8

08000fa4 <USART_IRQHandler_myself>:

//接收完成中断函数
void USART_IRQHandler_myself(UART_HandleTypeDef *huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a16      	ldr	r2, [pc, #88]	@ (800100c <USART_IRQHandler_myself+0x68>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d126      	bne.n	8001004 <USART_IRQHandler_myself+0x60>
	{
		if(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE) != RESET)
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <USART_IRQHandler_myself+0x6c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	2b10      	cmp	r3, #16
 8000fc2:	d11f      	bne.n	8001004 <USART_IRQHandler_myself+0x60>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <USART_IRQHandler_myself+0x6c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <USART_IRQHandler_myself+0x6c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
			HAL_UART_DMAStop(&huart1);
 8000fda:	480d      	ldr	r0, [pc, #52]	@ (8001010 <USART_IRQHandler_myself+0x6c>)
 8000fdc:	f002 fb4f 	bl	800367e <HAL_UART_DMAStop>
			Rx1_Count = RX1_Size - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <USART_IRQHandler_myself+0x70>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	f5c3 6388 	rsb	r3, r3, #1088	@ 0x440
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <USART_IRQHandler_myself+0x74>)
 8000ff0:	801a      	strh	r2, [r3, #0]
			Rx1Sign = 1;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <USART_IRQHandler_myself+0x78>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1,buffer_RX1,RX1_Size);
 8000ff8:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8000ffc:	4908      	ldr	r1, [pc, #32]	@ (8001020 <USART_IRQHandler_myself+0x7c>)
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <USART_IRQHandler_myself+0x6c>)
 8001000:	f002 fb18 	bl	8003634 <HAL_UART_Receive_DMA>
		}
	}
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40013800 	.word	0x40013800
 8001010:	200002e8 	.word	0x200002e8
 8001014:	20000330 	.word	0x20000330
 8001018:	20001446 	.word	0x20001446
 800101c:	20001444 	.word	0x20001444
 8001020:	20001004 	.word	0x20001004

08001024 <HAL_UART_ErrorCallback>:
//DMA接收溢出错误，回调清除错误标志
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	// 检查是否发生帧错误
	if (huart->ErrorCode & HAL_UART_ERROR_FE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	d016      	beq.n	8001066 <HAL_UART_ErrorCallback+0x42>
	{
		__HAL_UART_CLEAR_FEFLAG(huart);
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
		huart->RxState = HAL_UART_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2220      	movs	r2, #32
 8001052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 0210 	orr.w	r2, r2, #16
 8001064:	60da      	str	r2, [r3, #12]
	}

	// 检查是否发生噪声错误
	if (huart->ErrorCode & HAL_UART_ERROR_NE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d016      	beq.n	80010a0 <HAL_UART_ErrorCallback+0x7c>
	{
		__HAL_UART_CLEAR_NEFLAG(huart);
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
		huart->RxState = HAL_UART_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2220      	movs	r2, #32
 800108c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0210 	orr.w	r2, r2, #16
 800109e:	60da      	str	r2, [r3, #12]
	}

	// 检查是否发生溢出错误
	if (huart->ErrorCode & HAL_UART_ERROR_ORE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d016      	beq.n	80010da <HAL_UART_ErrorCallback+0xb6>
	{
		__HAL_UART_CLEAR_OREFLAG(huart);
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
		huart->RxState = HAL_UART_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2220      	movs	r2, #32
 80010c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0210 	orr.w	r2, r2, #16
 80010d8:	60da      	str	r2, [r3, #12]
	}

	if(huart->Instance == USART1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_UART_ErrorCallback+0xd4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d105      	bne.n	80010f0 <HAL_UART_ErrorCallback+0xcc>
		HAL_UART_Receive_DMA(&huart1,buffer_RX1,RX1_Size);
 80010e4:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80010e8:	4904      	ldr	r1, [pc, #16]	@ (80010fc <HAL_UART_ErrorCallback+0xd8>)
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <HAL_UART_ErrorCallback+0xdc>)
 80010ec:	f002 faa2 	bl	8003634 <HAL_UART_Receive_DMA>

}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013800 	.word	0x40013800
 80010fc:	20001004 	.word	0x20001004
 8001100:	200002e8 	.word	0x200002e8

08001104 <w25q128_spi_swap_byte>:

#include "w25q128.h"

// 交换一个字节
uint8_t w25q128_spi_swap_byte(uint8_t data)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
    uint8_t recv_data = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&hspi2, &data, &recv_data, 1, HAL_MAX_DELAY);
 8001112:	f107 020f 	add.w	r2, r7, #15
 8001116:	1df9      	adds	r1, r7, #7
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	4803      	ldr	r0, [pc, #12]	@ (8001130 <w25q128_spi_swap_byte+0x2c>)
 8001122:	f001 ff63 	bl	8002fec <HAL_SPI_TransmitReceive>
    return recv_data;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000290 	.word	0x20000290

08001134 <w25q128_read_id>:



// 读取iD值
uint16_t w25q128_read_id(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

    uint16_t device_id = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	80fb      	strh	r3, [r7, #6]

    W25Q128_CS(0);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001144:	4813      	ldr	r0, [pc, #76]	@ (8001194 <w25q128_read_id+0x60>)
 8001146:	f001 fa39 	bl	80025bc <HAL_GPIO_WritePin>

    w25q128_spi_swap_byte(FLASH_ManufactDeviceID);
 800114a:	2090      	movs	r0, #144	@ 0x90
 800114c:	f7ff ffda 	bl	8001104 <w25q128_spi_swap_byte>
    w25q128_spi_swap_byte(0x00);
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff ffd7 	bl	8001104 <w25q128_spi_swap_byte>
    w25q128_spi_swap_byte(0x00);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ffd4 	bl	8001104 <w25q128_spi_swap_byte>
    w25q128_spi_swap_byte(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff ffd1 	bl	8001104 <w25q128_spi_swap_byte>

    device_id = w25q128_spi_swap_byte(FLASH_DummyByte) << 8;
 8001162:	20ff      	movs	r0, #255	@ 0xff
 8001164:	f7ff ffce 	bl	8001104 <w25q128_spi_swap_byte>
 8001168:	4603      	mov	r3, r0
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	80fb      	strh	r3, [r7, #6]
    device_id |= w25q128_spi_swap_byte(FLASH_DummyByte);
 800116e:	20ff      	movs	r0, #255	@ 0xff
 8001170:	f7ff ffc8 	bl	8001104 <w25q128_spi_swap_byte>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4313      	orrs	r3, r2
 800117c:	80fb      	strh	r3, [r7, #6]


    W25Q128_CS(1);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <w25q128_read_id+0x60>)
 8001186:	f001 fa19 	bl	80025bc <HAL_GPIO_WritePin>
    return device_id;
 800118a:	88fb      	ldrh	r3, [r7, #6]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40010c00 	.word	0x40010c00

08001198 <flash_read_byte>:
  * @brief SPI1 读一个字节
  * @param None
  * @retval None
  */
uint8_t flash_read_byte(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8
    uint8_t t_data = 0, r_data = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	2300      	movs	r3, #0
 80011a4:	71bb      	strb	r3, [r7, #6]

    if(HAL_SPI_TransmitReceive(&hspi2, &t_data, &r_data, 1, 0xFFFFFF) != HAL_OK)
 80011a6:	1dba      	adds	r2, r7, #6
 80011a8:	1df9      	adds	r1, r7, #7
 80011aa:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <flash_read_byte+0x34>)
 80011b4:	f001 ff1a 	bl	8002fec <HAL_SPI_TransmitReceive>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <flash_read_byte+0x2a>
    {
        r_data = 0xff;
 80011be:	23ff      	movs	r3, #255	@ 0xff
 80011c0:	71bb      	strb	r3, [r7, #6]
    }
    return r_data;
 80011c2:	79bb      	ldrb	r3, [r7, #6]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000290 	.word	0x20000290

080011d0 <flash_send_byte>:
  * @brief SPI1 写一个字节
  * @param byte 写入的字节
  * @retval 写状态 0成功 1失败
  */
uint8_t flash_send_byte(uint8_t byte)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
    uint8_t r_data;

    if(HAL_SPI_TransmitReceive(&hspi2, &byte, &r_data, 1, 0xFFFFFF) != HAL_OK)
 80011da:	f107 020f 	add.w	r2, r7, #15
 80011de:	1df9      	adds	r1, r7, #7
 80011e0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	4806      	ldr	r0, [pc, #24]	@ (8001204 <flash_send_byte+0x34>)
 80011ea:	f001 feff 	bl	8002fec <HAL_SPI_TransmitReceive>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <flash_send_byte+0x28>
    {
      return 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <flash_send_byte+0x2a>
    }
    return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000290 	.word	0x20000290

08001208 <flash_read_ID>:
  * @brief FLASH 读ID
  * @param None
  * @retval None
  */
uint32_t flash_read_ID(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
  uint32_t temp, temp0, temp1, temp2;

  W25Q64_CS(0);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001214:	4812      	ldr	r0, [pc, #72]	@ (8001260 <flash_read_ID+0x58>)
 8001216:	f001 f9d1 	bl	80025bc <HAL_GPIO_WritePin>

  flash_send_byte(0x9F);
 800121a:	209f      	movs	r0, #159	@ 0x9f
 800121c:	f7ff ffd8 	bl	80011d0 <flash_send_byte>

  temp0 = flash_read_byte();
 8001220:	f7ff ffba 	bl	8001198 <flash_read_byte>
 8001224:	4603      	mov	r3, r0
 8001226:	60fb      	str	r3, [r7, #12]
  temp1 = flash_read_byte();
 8001228:	f7ff ffb6 	bl	8001198 <flash_read_byte>
 800122c:	4603      	mov	r3, r0
 800122e:	60bb      	str	r3, [r7, #8]
  temp2 = flash_read_byte();
 8001230:	f7ff ffb2 	bl	8001198 <flash_read_byte>
 8001234:	4603      	mov	r3, r0
 8001236:	607b      	str	r3, [r7, #4]

  W25Q64_CS(1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800123e:	4808      	ldr	r0, [pc, #32]	@ (8001260 <flash_read_ID+0x58>)
 8001240:	f001 f9bc 	bl	80025bc <HAL_GPIO_WritePin>

  temp = (temp0 << 16) | (temp1 << 8) | temp2;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	041a      	lsls	r2, r3, #16
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	4313      	orrs	r3, r2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	603b      	str	r3, [r7, #0]

  return temp;
 8001254:	683b      	ldr	r3, [r7, #0]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40010c00 	.word	0x40010c00

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_Init+0x28>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_Init+0x28>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f947 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	200f      	movs	r0, #15
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff f9be 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f95f 	bl	8001572 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 f927 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	@ (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000208 	.word	0x20000208
 80012ec:	20000204 	.word	0x20000204

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_IncTick+0x1c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_IncTick+0x20>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a03      	ldr	r2, [pc, #12]	@ (8001310 <HAL_IncTick+0x20>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	20000208 	.word	0x20000208
 8001310:	20001448 	.word	0x20001448

08001314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b02      	ldr	r3, [pc, #8]	@ (8001324 <HAL_GetTick+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20001448 	.word	0x20001448

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff fff0 	bl	8001314 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffe0 	bl	8001314 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000208 	.word	0x20000208

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4906      	ldr	r1, [pc, #24]	@ (8001408 <__NVIC_EnableIRQ+0x34>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	@ (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	@ (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	@ 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff90 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff2d 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff42 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff90 	bl	8001460 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5f 	bl	800140c <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff35 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e059      	b.n	8001656 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <HAL_DMA_Init+0xd4>)
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d80f      	bhi.n	80015ce <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <HAL_DMA_Init+0xd8>)
 80015b6:	4413      	add	r3, r2
 80015b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001668 <HAL_DMA_Init+0xdc>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	009a      	lsls	r2, r3, #2
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a28      	ldr	r2, [pc, #160]	@ (800166c <HAL_DMA_Init+0xe0>)
 80015ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015cc:	e00e      	b.n	80015ec <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <HAL_DMA_Init+0xe4>)
 80015d6:	4413      	add	r3, r2
 80015d8:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <HAL_DMA_Init+0xdc>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	009a      	lsls	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <HAL_DMA_Init+0xe8>)
 80015ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001602:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001606:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40020407 	.word	0x40020407
 8001664:	bffdfff8 	.word	0xbffdfff8
 8001668:	cccccccd 	.word	0xcccccccd
 800166c:	40020000 	.word	0x40020000
 8001670:	bffdfbf8 	.word	0xbffdfbf8
 8001674:	40020400 	.word	0x40020400

08001678 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_DMA_Start_IT+0x20>
 8001694:	2302      	movs	r3, #2
 8001696:	e04b      	b.n	8001730 <HAL_DMA_Start_IT+0xb8>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d13a      	bne.n	8001722 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0201 	bic.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fbb1 	bl	8001e38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 020e 	orr.w	r2, r2, #14
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e00f      	b.n	8001710 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0204 	bic.w	r2, r2, #4
 80016fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 020a 	orr.w	r2, r2, #10
 800170e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e005      	b.n	800172e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800172a:	2302      	movs	r3, #2
 800172c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800172e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d008      	beq.n	8001762 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2204      	movs	r2, #4
 8001754:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e020      	b.n	80017a4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 020e 	bic.w	r2, r2, #14
 8001770:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0201 	bic.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178a:	2101      	movs	r1, #1
 800178c:	fa01 f202 	lsl.w	r2, r1, r2
 8001790:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d005      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2204      	movs	r2, #4
 80017cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e0d6      	b.n	8001982 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 020e 	bic.w	r2, r2, #14
 80017e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b64      	ldr	r3, [pc, #400]	@ (800198c <HAL_DMA_Abort_IT+0x1dc>)
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d958      	bls.n	80018b2 <HAL_DMA_Abort_IT+0x102>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a62      	ldr	r2, [pc, #392]	@ (8001990 <HAL_DMA_Abort_IT+0x1e0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d04f      	beq.n	80018aa <HAL_DMA_Abort_IT+0xfa>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a61      	ldr	r2, [pc, #388]	@ (8001994 <HAL_DMA_Abort_IT+0x1e4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d048      	beq.n	80018a6 <HAL_DMA_Abort_IT+0xf6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5f      	ldr	r2, [pc, #380]	@ (8001998 <HAL_DMA_Abort_IT+0x1e8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d040      	beq.n	80018a0 <HAL_DMA_Abort_IT+0xf0>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a5e      	ldr	r2, [pc, #376]	@ (800199c <HAL_DMA_Abort_IT+0x1ec>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d038      	beq.n	800189a <HAL_DMA_Abort_IT+0xea>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a5c      	ldr	r2, [pc, #368]	@ (80019a0 <HAL_DMA_Abort_IT+0x1f0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d030      	beq.n	8001894 <HAL_DMA_Abort_IT+0xe4>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a5b      	ldr	r2, [pc, #364]	@ (80019a4 <HAL_DMA_Abort_IT+0x1f4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d028      	beq.n	800188e <HAL_DMA_Abort_IT+0xde>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a52      	ldr	r2, [pc, #328]	@ (800198c <HAL_DMA_Abort_IT+0x1dc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d020      	beq.n	8001888 <HAL_DMA_Abort_IT+0xd8>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a57      	ldr	r2, [pc, #348]	@ (80019a8 <HAL_DMA_Abort_IT+0x1f8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d019      	beq.n	8001884 <HAL_DMA_Abort_IT+0xd4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a55      	ldr	r2, [pc, #340]	@ (80019ac <HAL_DMA_Abort_IT+0x1fc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d012      	beq.n	8001880 <HAL_DMA_Abort_IT+0xd0>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a54      	ldr	r2, [pc, #336]	@ (80019b0 <HAL_DMA_Abort_IT+0x200>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00a      	beq.n	800187a <HAL_DMA_Abort_IT+0xca>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <HAL_DMA_Abort_IT+0x204>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d102      	bne.n	8001874 <HAL_DMA_Abort_IT+0xc4>
 800186e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001872:	e01b      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 8001874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001878:	e018      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 800187a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800187e:	e015      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 8001880:	2310      	movs	r3, #16
 8001882:	e013      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 8001884:	2301      	movs	r3, #1
 8001886:	e011      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 8001888:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800188c:	e00e      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 800188e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001892:	e00b      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 8001894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001898:	e008      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 800189a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189e:	e005      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 80018a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a4:	e002      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 80018a6:	2310      	movs	r3, #16
 80018a8:	e000      	b.n	80018ac <HAL_DMA_Abort_IT+0xfc>
 80018aa:	2301      	movs	r3, #1
 80018ac:	4a42      	ldr	r2, [pc, #264]	@ (80019b8 <HAL_DMA_Abort_IT+0x208>)
 80018ae:	6053      	str	r3, [r2, #4]
 80018b0:	e057      	b.n	8001962 <HAL_DMA_Abort_IT+0x1b2>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a36      	ldr	r2, [pc, #216]	@ (8001990 <HAL_DMA_Abort_IT+0x1e0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d04f      	beq.n	800195c <HAL_DMA_Abort_IT+0x1ac>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a34      	ldr	r2, [pc, #208]	@ (8001994 <HAL_DMA_Abort_IT+0x1e4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d048      	beq.n	8001958 <HAL_DMA_Abort_IT+0x1a8>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a33      	ldr	r2, [pc, #204]	@ (8001998 <HAL_DMA_Abort_IT+0x1e8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d040      	beq.n	8001952 <HAL_DMA_Abort_IT+0x1a2>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a31      	ldr	r2, [pc, #196]	@ (800199c <HAL_DMA_Abort_IT+0x1ec>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d038      	beq.n	800194c <HAL_DMA_Abort_IT+0x19c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a30      	ldr	r2, [pc, #192]	@ (80019a0 <HAL_DMA_Abort_IT+0x1f0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d030      	beq.n	8001946 <HAL_DMA_Abort_IT+0x196>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2e      	ldr	r2, [pc, #184]	@ (80019a4 <HAL_DMA_Abort_IT+0x1f4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d028      	beq.n	8001940 <HAL_DMA_Abort_IT+0x190>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a26      	ldr	r2, [pc, #152]	@ (800198c <HAL_DMA_Abort_IT+0x1dc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d020      	beq.n	800193a <HAL_DMA_Abort_IT+0x18a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2a      	ldr	r2, [pc, #168]	@ (80019a8 <HAL_DMA_Abort_IT+0x1f8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d019      	beq.n	8001936 <HAL_DMA_Abort_IT+0x186>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a29      	ldr	r2, [pc, #164]	@ (80019ac <HAL_DMA_Abort_IT+0x1fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d012      	beq.n	8001932 <HAL_DMA_Abort_IT+0x182>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a27      	ldr	r2, [pc, #156]	@ (80019b0 <HAL_DMA_Abort_IT+0x200>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00a      	beq.n	800192c <HAL_DMA_Abort_IT+0x17c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a26      	ldr	r2, [pc, #152]	@ (80019b4 <HAL_DMA_Abort_IT+0x204>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d102      	bne.n	8001926 <HAL_DMA_Abort_IT+0x176>
 8001920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001924:	e01b      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 8001926:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800192a:	e018      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 800192c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001930:	e015      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 8001932:	2310      	movs	r3, #16
 8001934:	e013      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 8001936:	2301      	movs	r3, #1
 8001938:	e011      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 800193a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800193e:	e00e      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 8001940:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001944:	e00b      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 8001946:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800194a:	e008      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 800194c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001950:	e005      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 8001952:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001956:	e002      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 8001958:	2310      	movs	r3, #16
 800195a:	e000      	b.n	800195e <HAL_DMA_Abort_IT+0x1ae>
 800195c:	2301      	movs	r3, #1
 800195e:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <HAL_DMA_Abort_IT+0x20c>)
 8001960:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
    } 
  }
  return status;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40020080 	.word	0x40020080
 8001990:	40020008 	.word	0x40020008
 8001994:	4002001c 	.word	0x4002001c
 8001998:	40020030 	.word	0x40020030
 800199c:	40020044 	.word	0x40020044
 80019a0:	40020058 	.word	0x40020058
 80019a4:	4002006c 	.word	0x4002006c
 80019a8:	40020408 	.word	0x40020408
 80019ac:	4002041c 	.word	0x4002041c
 80019b0:	40020430 	.word	0x40020430
 80019b4:	40020444 	.word	0x40020444
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020000 	.word	0x40020000

080019c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	2204      	movs	r2, #4
 80019de:	409a      	lsls	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80f1 	beq.w	8001bcc <HAL_DMA_IRQHandler+0x20c>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80eb 	beq.w	8001bcc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0204 	bic.w	r2, r2, #4
 8001a12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b98 <HAL_DMA_IRQHandler+0x1d8>)
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d958      	bls.n	8001ad2 <HAL_DMA_IRQHandler+0x112>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a5d      	ldr	r2, [pc, #372]	@ (8001b9c <HAL_DMA_IRQHandler+0x1dc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d04f      	beq.n	8001aca <HAL_DMA_IRQHandler+0x10a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d048      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x106>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a5a      	ldr	r2, [pc, #360]	@ (8001ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d040      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x100>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a59      	ldr	r2, [pc, #356]	@ (8001ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d038      	beq.n	8001aba <HAL_DMA_IRQHandler+0xfa>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	@ (8001bac <HAL_DMA_IRQHandler+0x1ec>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d030      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0xf4>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a56      	ldr	r2, [pc, #344]	@ (8001bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d028      	beq.n	8001aae <HAL_DMA_IRQHandler+0xee>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a4d      	ldr	r2, [pc, #308]	@ (8001b98 <HAL_DMA_IRQHandler+0x1d8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d020      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xe8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a52      	ldr	r2, [pc, #328]	@ (8001bb4 <HAL_DMA_IRQHandler+0x1f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d019      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0xe4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a50      	ldr	r2, [pc, #320]	@ (8001bb8 <HAL_DMA_IRQHandler+0x1f8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d012      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0xe0>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a4f      	ldr	r2, [pc, #316]	@ (8001bbc <HAL_DMA_IRQHandler+0x1fc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00a      	beq.n	8001a9a <HAL_DMA_IRQHandler+0xda>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a4d      	ldr	r2, [pc, #308]	@ (8001bc0 <HAL_DMA_IRQHandler+0x200>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d102      	bne.n	8001a94 <HAL_DMA_IRQHandler+0xd4>
 8001a8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a92:	e01b      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001a94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a98:	e018      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a9e:	e015      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001aa0:	2340      	movs	r3, #64	@ 0x40
 8001aa2:	e013      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e011      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001aa8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001aac:	e00e      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001aae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ab2:	e00b      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001ab4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ab8:	e008      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001aba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001abe:	e005      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ac4:	e002      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001ac6:	2340      	movs	r3, #64	@ 0x40
 8001ac8:	e000      	b.n	8001acc <HAL_DMA_IRQHandler+0x10c>
 8001aca:	2304      	movs	r3, #4
 8001acc:	4a3d      	ldr	r2, [pc, #244]	@ (8001bc4 <HAL_DMA_IRQHandler+0x204>)
 8001ace:	6053      	str	r3, [r2, #4]
 8001ad0:	e057      	b.n	8001b82 <HAL_DMA_IRQHandler+0x1c2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a31      	ldr	r2, [pc, #196]	@ (8001b9c <HAL_DMA_IRQHandler+0x1dc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04f      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x1bc>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d048      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x1b8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d040      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x1b2>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2c      	ldr	r2, [pc, #176]	@ (8001ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d038      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x1ac>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a2b      	ldr	r2, [pc, #172]	@ (8001bac <HAL_DMA_IRQHandler+0x1ec>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d030      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x1a6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a29      	ldr	r2, [pc, #164]	@ (8001bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d028      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x1a0>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a21      	ldr	r2, [pc, #132]	@ (8001b98 <HAL_DMA_IRQHandler+0x1d8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d020      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x19a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <HAL_DMA_IRQHandler+0x1f4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d019      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x196>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <HAL_DMA_IRQHandler+0x1f8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d012      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x192>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <HAL_DMA_IRQHandler+0x1fc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00a      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x18c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a21      	ldr	r2, [pc, #132]	@ (8001bc0 <HAL_DMA_IRQHandler+0x200>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <HAL_DMA_IRQHandler+0x186>
 8001b40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b44:	e01b      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b46:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b4a:	e018      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b50:	e015      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b52:	2340      	movs	r3, #64	@ 0x40
 8001b54:	e013      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b56:	2304      	movs	r3, #4
 8001b58:	e011      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b5e:	e00e      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b64:	e00b      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b66:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b6a:	e008      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b70:	e005      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b76:	e002      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b78:	2340      	movs	r3, #64	@ 0x40
 8001b7a:	e000      	b.n	8001b7e <HAL_DMA_IRQHandler+0x1be>
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <HAL_DMA_IRQHandler+0x208>)
 8001b80:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8136 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b94:	e130      	b.n	8001df8 <HAL_DMA_IRQHandler+0x438>
 8001b96:	bf00      	nop
 8001b98:	40020080 	.word	0x40020080
 8001b9c:	40020008 	.word	0x40020008
 8001ba0:	4002001c 	.word	0x4002001c
 8001ba4:	40020030 	.word	0x40020030
 8001ba8:	40020044 	.word	0x40020044
 8001bac:	40020058 	.word	0x40020058
 8001bb0:	4002006c 	.word	0x4002006c
 8001bb4:	40020408 	.word	0x40020408
 8001bb8:	4002041c 	.word	0x4002041c
 8001bbc:	40020430 	.word	0x40020430
 8001bc0:	40020444 	.word	0x40020444
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80dd 	beq.w	8001d98 <HAL_DMA_IRQHandler+0x3d8>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80d7 	beq.w	8001d98 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 020a 	bic.w	r2, r2, #10
 8001c06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <HAL_DMA_IRQHandler+0x444>)
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d958      	bls.n	8001cce <HAL_DMA_IRQHandler+0x30e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a79      	ldr	r2, [pc, #484]	@ (8001e08 <HAL_DMA_IRQHandler+0x448>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d04f      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x306>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a78      	ldr	r2, [pc, #480]	@ (8001e0c <HAL_DMA_IRQHandler+0x44c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d048      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x302>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a76      	ldr	r2, [pc, #472]	@ (8001e10 <HAL_DMA_IRQHandler+0x450>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d040      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x2fc>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a75      	ldr	r2, [pc, #468]	@ (8001e14 <HAL_DMA_IRQHandler+0x454>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d038      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x2f6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a73      	ldr	r2, [pc, #460]	@ (8001e18 <HAL_DMA_IRQHandler+0x458>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d030      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x2f0>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a72      	ldr	r2, [pc, #456]	@ (8001e1c <HAL_DMA_IRQHandler+0x45c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d028      	beq.n	8001caa <HAL_DMA_IRQHandler+0x2ea>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a69      	ldr	r2, [pc, #420]	@ (8001e04 <HAL_DMA_IRQHandler+0x444>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d020      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0x2e4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6e      	ldr	r2, [pc, #440]	@ (8001e20 <HAL_DMA_IRQHandler+0x460>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d019      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2e0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a6c      	ldr	r2, [pc, #432]	@ (8001e24 <HAL_DMA_IRQHandler+0x464>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d012      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x2dc>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a6b      	ldr	r2, [pc, #428]	@ (8001e28 <HAL_DMA_IRQHandler+0x468>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00a      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x2d6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a69      	ldr	r2, [pc, #420]	@ (8001e2c <HAL_DMA_IRQHandler+0x46c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d102      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x2d0>
 8001c8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c8e:	e01b      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001c90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c94:	e018      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001c96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c9a:	e015      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e013      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e011      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca8:	e00e      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001caa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cae:	e00b      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001cb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb4:	e008      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cba:	e005      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cc0:	e002      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	e000      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x308>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	4a59      	ldr	r2, [pc, #356]	@ (8001e30 <HAL_DMA_IRQHandler+0x470>)
 8001cca:	6053      	str	r3, [r2, #4]
 8001ccc:	e057      	b.n	8001d7e <HAL_DMA_IRQHandler+0x3be>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4d      	ldr	r2, [pc, #308]	@ (8001e08 <HAL_DMA_IRQHandler+0x448>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d04f      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x3b8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8001e0c <HAL_DMA_IRQHandler+0x44c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d048      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x3b4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	@ (8001e10 <HAL_DMA_IRQHandler+0x450>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d040      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x3ae>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a48      	ldr	r2, [pc, #288]	@ (8001e14 <HAL_DMA_IRQHandler+0x454>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d038      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x3a8>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a47      	ldr	r2, [pc, #284]	@ (8001e18 <HAL_DMA_IRQHandler+0x458>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d030      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x3a2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a45      	ldr	r2, [pc, #276]	@ (8001e1c <HAL_DMA_IRQHandler+0x45c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d028      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x39c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e04 <HAL_DMA_IRQHandler+0x444>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d020      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x396>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a41      	ldr	r2, [pc, #260]	@ (8001e20 <HAL_DMA_IRQHandler+0x460>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x392>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a40      	ldr	r2, [pc, #256]	@ (8001e24 <HAL_DMA_IRQHandler+0x464>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d012      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x38e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8001e28 <HAL_DMA_IRQHandler+0x468>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00a      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x388>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a3d      	ldr	r2, [pc, #244]	@ (8001e2c <HAL_DMA_IRQHandler+0x46c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d102      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x382>
 8001d3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d40:	e01b      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d46:	e018      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d4c:	e015      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e013      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e011      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d5a:	e00e      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d5c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d60:	e00b      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d66:	e008      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d6c:	e005      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d72:	e002      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d74:	2320      	movs	r3, #32
 8001d76:	e000      	b.n	8001d7a <HAL_DMA_IRQHandler+0x3ba>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e34 <HAL_DMA_IRQHandler+0x474>)
 8001d7c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d034      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d96:	e02f      	b.n	8001df8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d028      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x43a>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d023      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 020e 	bic.w	r2, r2, #14
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
    }
  }
  return;
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
}
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40020080 	.word	0x40020080
 8001e08:	40020008 	.word	0x40020008
 8001e0c:	4002001c 	.word	0x4002001c
 8001e10:	40020030 	.word	0x40020030
 8001e14:	40020044 	.word	0x40020044
 8001e18:	40020058 	.word	0x40020058
 8001e1c:	4002006c 	.word	0x4002006c
 8001e20:	40020408 	.word	0x40020408
 8001e24:	4002041c 	.word	0x4002041c
 8001e28:	40020430 	.word	0x40020430
 8001e2c:	40020444 	.word	0x40020444
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40020000 	.word	0x40020000

08001e38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d108      	bne.n	8001e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e76:	e007      	b.n	8001e88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001eae:	4b2f      	ldr	r3, [pc, #188]	@ (8001f6c <HAL_FLASH_Program+0xd8>)
 8001eb0:	7e1b      	ldrb	r3, [r3, #24]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_FLASH_Program+0x26>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e054      	b.n	8001f64 <HAL_FLASH_Program+0xd0>
 8001eba:	4b2c      	ldr	r3, [pc, #176]	@ (8001f6c <HAL_FLASH_Program+0xd8>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ec0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ec4:	f000 f8a8 	bl	8002018 <FLASH_WaitForLastOperation>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d144      	bne.n	8001f5c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	757b      	strb	r3, [r7, #21]
 8001edc:	e007      	b.n	8001eee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d102      	bne.n	8001eea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	757b      	strb	r3, [r7, #21]
 8001ee8:	e001      	b.n	8001eee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001eea:	2304      	movs	r3, #4
 8001eec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75bb      	strb	r3, [r7, #22]
 8001ef2:	e02d      	b.n	8001f50 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001ef4:	7dbb      	ldrb	r3, [r7, #22]
 8001ef6:	005a      	lsls	r2, r3, #1
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	eb02 0c03 	add.w	ip, r2, r3
 8001efe:	7dbb      	ldrb	r3, [r7, #22]
 8001f00:	0119      	lsls	r1, r3, #4
 8001f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f06:	f1c1 0620 	rsb	r6, r1, #32
 8001f0a:	f1a1 0020 	sub.w	r0, r1, #32
 8001f0e:	fa22 f401 	lsr.w	r4, r2, r1
 8001f12:	fa03 f606 	lsl.w	r6, r3, r6
 8001f16:	4334      	orrs	r4, r6
 8001f18:	fa23 f000 	lsr.w	r0, r3, r0
 8001f1c:	4304      	orrs	r4, r0
 8001f1e:	fa23 f501 	lsr.w	r5, r3, r1
 8001f22:	b2a3      	uxth	r3, r4
 8001f24:	4619      	mov	r1, r3
 8001f26:	4660      	mov	r0, ip
 8001f28:	f000 f85a 	bl	8001fe0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f30:	f000 f872 	bl	8002018 <FLASH_WaitForLastOperation>
 8001f34:	4603      	mov	r3, r0
 8001f36:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <HAL_FLASH_Program+0xdc>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <HAL_FLASH_Program+0xdc>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001f4a:	7dbb      	ldrb	r3, [r7, #22]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	75bb      	strb	r3, [r7, #22]
 8001f50:	7dba      	ldrb	r2, [r7, #22]
 8001f52:	7d7b      	ldrb	r3, [r7, #21]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d3cd      	bcc.n	8001ef4 <HAL_FLASH_Program+0x60>
 8001f58:	e000      	b.n	8001f5c <HAL_FLASH_Program+0xc8>
      {
        break;
 8001f5a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <HAL_FLASH_Program+0xd8>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	761a      	strb	r2, [r3, #24]

  return status;
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6c:	20001450 	.word	0x20001450
 8001f70:	40022000 	.word	0x40022000

08001f74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <HAL_FLASH_Unlock+0x40>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00d      	beq.n	8001fa6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_FLASH_Unlock+0x40>)
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <HAL_FLASH_Unlock+0x44>)
 8001f8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HAL_FLASH_Unlock+0x40>)
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <HAL_FLASH_Unlock+0x48>)
 8001f94:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f96:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <HAL_FLASH_Unlock+0x40>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	45670123 	.word	0x45670123
 8001fbc:	cdef89ab 	.word	0xcdef89ab

08001fc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_FLASH_Lock+0x1c>)
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <HAL_FLASH_Lock+0x1c>)
 8001fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <FLASH_Program_HalfWord+0x30>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001ff2:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <FLASH_Program_HalfWord+0x34>)
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <FLASH_Program_HalfWord+0x34>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	887a      	ldrh	r2, [r7, #2]
 8002002:	801a      	strh	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20001450 	.word	0x20001450
 8002014:	40022000 	.word	0x40022000

08002018 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff f978 	bl	8001314 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002026:	e010      	b.n	800204a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202e:	d00c      	beq.n	800204a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <FLASH_WaitForLastOperation+0x2e>
 8002036:	f7ff f96d 	bl	8001314 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	d201      	bcs.n	800204a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e025      	b.n	8002096 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <FLASH_WaitForLastOperation+0x88>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1e8      	bne.n	8002028 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002056:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <FLASH_WaitForLastOperation+0x88>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002062:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <FLASH_WaitForLastOperation+0x88>)
 8002064:	2220      	movs	r2, #32
 8002066:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002068:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <FLASH_WaitForLastOperation+0x88>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002074:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <FLASH_WaitForLastOperation+0x88>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002080:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <FLASH_WaitForLastOperation+0x88>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800208c:	f000 f80a 	bl	80020a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40022000 	.word	0x40022000

080020a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80020ae:	4b23      	ldr	r3, [pc, #140]	@ (800213c <FLASH_SetErrorCode+0x98>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80020ba:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <FLASH_SetErrorCode+0x9c>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002140 <FLASH_SetErrorCode+0x9c>)
 80020c4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f043 0310 	orr.w	r3, r3, #16
 80020cc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80020ce:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <FLASH_SetErrorCode+0x98>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <FLASH_SetErrorCode+0x9c>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <FLASH_SetErrorCode+0x9c>)
 80020e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80020ee:	4b13      	ldr	r3, [pc, #76]	@ (800213c <FLASH_SetErrorCode+0x98>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <FLASH_SetErrorCode+0x9c>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	4a0f      	ldr	r2, [pc, #60]	@ (8002140 <FLASH_SetErrorCode+0x9c>)
 8002104:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002106:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <FLASH_SetErrorCode+0x98>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <FLASH_SetErrorCode+0x98>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f240 1201 	movw	r2, #257	@ 0x101
 8002118:	4293      	cmp	r3, r2
 800211a:	d106      	bne.n	800212a <FLASH_SetErrorCode+0x86>
 800211c:	4b07      	ldr	r3, [pc, #28]	@ (800213c <FLASH_SetErrorCode+0x98>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a06      	ldr	r2, [pc, #24]	@ (800213c <FLASH_SetErrorCode+0x98>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	61d3      	str	r3, [r2, #28]
}  
 8002128:	e002      	b.n	8002130 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800212a:	4a04      	ldr	r2, [pc, #16]	@ (800213c <FLASH_SetErrorCode+0x98>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	60d3      	str	r3, [r2, #12]
}  
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000
 8002140:	20001450 	.word	0x20001450

08002144 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002156:	4b2f      	ldr	r3, [pc, #188]	@ (8002214 <HAL_FLASHEx_Erase+0xd0>)
 8002158:	7e1b      	ldrb	r3, [r3, #24]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_FLASHEx_Erase+0x1e>
 800215e:	2302      	movs	r3, #2
 8002160:	e053      	b.n	800220a <HAL_FLASHEx_Erase+0xc6>
 8002162:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <HAL_FLASHEx_Erase+0xd0>)
 8002164:	2201      	movs	r2, #1
 8002166:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d116      	bne.n	800219e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002170:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002174:	f7ff ff50 	bl	8002018 <FLASH_WaitForLastOperation>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d141      	bne.n	8002202 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800217e:	2001      	movs	r0, #1
 8002180:	f000 f84c 	bl	800221c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002184:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002188:	f7ff ff46 	bl	8002018 <FLASH_WaitForLastOperation>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002190:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <HAL_FLASHEx_Erase+0xd4>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4a20      	ldr	r2, [pc, #128]	@ (8002218 <HAL_FLASHEx_Erase+0xd4>)
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	6113      	str	r3, [r2, #16]
 800219c:	e031      	b.n	8002202 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800219e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021a2:	f7ff ff39 	bl	8002018 <FLASH_WaitForLastOperation>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d12a      	bne.n	8002202 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f04f 32ff 	mov.w	r2, #4294967295
 80021b2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	e019      	b.n	80021f0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80021bc:	68b8      	ldr	r0, [r7, #8]
 80021be:	f000 f849 	bl	8002254 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021c2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021c6:	f7ff ff27 	bl	8002018 <FLASH_WaitForLastOperation>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80021ce:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_FLASHEx_Erase+0xd4>)
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	4a11      	ldr	r2, [pc, #68]	@ (8002218 <HAL_FLASHEx_Erase+0xd4>)
 80021d4:	f023 0302 	bic.w	r3, r3, #2
 80021d8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	601a      	str	r2, [r3, #0]
            break;
 80021e6:	e00c      	b.n	8002202 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ee:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	02da      	lsls	r2, r3, #11
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	4413      	add	r3, r2
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d3dc      	bcc.n	80021bc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002202:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <HAL_FLASHEx_Erase+0xd0>)
 8002204:	2200      	movs	r2, #0
 8002206:	761a      	strb	r2, [r3, #24]

  return status;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20001450 	.word	0x20001450
 8002218:	40022000 	.word	0x40022000

0800221c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <FLASH_MassErase+0x30>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <FLASH_MassErase+0x34>)
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <FLASH_MassErase+0x34>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <FLASH_MassErase+0x34>)
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	4a05      	ldr	r2, [pc, #20]	@ (8002250 <FLASH_MassErase+0x34>)
 800223c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002240:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20001450 	.word	0x20001450
 8002250:	40022000 	.word	0x40022000

08002254 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800225c:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <FLASH_PageErase+0x38>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <FLASH_PageErase+0x3c>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <FLASH_PageErase+0x3c>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800226e:	4a08      	ldr	r2, [pc, #32]	@ (8002290 <FLASH_PageErase+0x3c>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <FLASH_PageErase+0x3c>)
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	4a05      	ldr	r2, [pc, #20]	@ (8002290 <FLASH_PageErase+0x3c>)
 800227a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800227e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20001450 	.word	0x20001450
 8002290:	40022000 	.word	0x40022000

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b08b      	sub	sp, #44	@ 0x2c
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a6:	e179      	b.n	800259c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022a8:	2201      	movs	r2, #1
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f040 8168 	bne.w	8002596 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a96      	ldr	r2, [pc, #600]	@ (8002524 <HAL_GPIO_Init+0x290>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d05e      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 80022d0:	4a94      	ldr	r2, [pc, #592]	@ (8002524 <HAL_GPIO_Init+0x290>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d875      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 80022d6:	4a94      	ldr	r2, [pc, #592]	@ (8002528 <HAL_GPIO_Init+0x294>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d058      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 80022dc:	4a92      	ldr	r2, [pc, #584]	@ (8002528 <HAL_GPIO_Init+0x294>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d86f      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 80022e2:	4a92      	ldr	r2, [pc, #584]	@ (800252c <HAL_GPIO_Init+0x298>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d052      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 80022e8:	4a90      	ldr	r2, [pc, #576]	@ (800252c <HAL_GPIO_Init+0x298>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d869      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 80022ee:	4a90      	ldr	r2, [pc, #576]	@ (8002530 <HAL_GPIO_Init+0x29c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d04c      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 80022f4:	4a8e      	ldr	r2, [pc, #568]	@ (8002530 <HAL_GPIO_Init+0x29c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d863      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 80022fa:	4a8e      	ldr	r2, [pc, #568]	@ (8002534 <HAL_GPIO_Init+0x2a0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d046      	beq.n	800238e <HAL_GPIO_Init+0xfa>
 8002300:	4a8c      	ldr	r2, [pc, #560]	@ (8002534 <HAL_GPIO_Init+0x2a0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d85d      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 8002306:	2b12      	cmp	r3, #18
 8002308:	d82a      	bhi.n	8002360 <HAL_GPIO_Init+0xcc>
 800230a:	2b12      	cmp	r3, #18
 800230c:	d859      	bhi.n	80023c2 <HAL_GPIO_Init+0x12e>
 800230e:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <HAL_GPIO_Init+0x80>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	0800238f 	.word	0x0800238f
 8002318:	08002369 	.word	0x08002369
 800231c:	0800237b 	.word	0x0800237b
 8002320:	080023bd 	.word	0x080023bd
 8002324:	080023c3 	.word	0x080023c3
 8002328:	080023c3 	.word	0x080023c3
 800232c:	080023c3 	.word	0x080023c3
 8002330:	080023c3 	.word	0x080023c3
 8002334:	080023c3 	.word	0x080023c3
 8002338:	080023c3 	.word	0x080023c3
 800233c:	080023c3 	.word	0x080023c3
 8002340:	080023c3 	.word	0x080023c3
 8002344:	080023c3 	.word	0x080023c3
 8002348:	080023c3 	.word	0x080023c3
 800234c:	080023c3 	.word	0x080023c3
 8002350:	080023c3 	.word	0x080023c3
 8002354:	080023c3 	.word	0x080023c3
 8002358:	08002371 	.word	0x08002371
 800235c:	08002385 	.word	0x08002385
 8002360:	4a75      	ldr	r2, [pc, #468]	@ (8002538 <HAL_GPIO_Init+0x2a4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002366:	e02c      	b.n	80023c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	623b      	str	r3, [r7, #32]
          break;
 800236e:	e029      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	3304      	adds	r3, #4
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e024      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	3308      	adds	r3, #8
 8002380:	623b      	str	r3, [r7, #32]
          break;
 8002382:	e01f      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	330c      	adds	r3, #12
 800238a:	623b      	str	r3, [r7, #32]
          break;
 800238c:	e01a      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002396:	2304      	movs	r3, #4
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e013      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a4:	2308      	movs	r3, #8
 80023a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	611a      	str	r2, [r3, #16]
          break;
 80023ae:	e009      	b.n	80023c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b0:	2308      	movs	r3, #8
 80023b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	615a      	str	r2, [r3, #20]
          break;
 80023ba:	e003      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
          break;
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x130>
          break;
 80023c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2bff      	cmp	r3, #255	@ 0xff
 80023c8:	d801      	bhi.n	80023ce <HAL_GPIO_Init+0x13a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	e001      	b.n	80023d2 <HAL_GPIO_Init+0x13e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2bff      	cmp	r3, #255	@ 0xff
 80023d8:	d802      	bhi.n	80023e0 <HAL_GPIO_Init+0x14c>
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_Init+0x152>
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	3b08      	subs	r3, #8
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	210f      	movs	r1, #15
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	401a      	ands	r2, r3
 80023f8:	6a39      	ldr	r1, [r7, #32]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	431a      	orrs	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80c1 	beq.w	8002596 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002414:	4b49      	ldr	r3, [pc, #292]	@ (800253c <HAL_GPIO_Init+0x2a8>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a48      	ldr	r2, [pc, #288]	@ (800253c <HAL_GPIO_Init+0x2a8>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b46      	ldr	r3, [pc, #280]	@ (800253c <HAL_GPIO_Init+0x2a8>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800242c:	4a44      	ldr	r2, [pc, #272]	@ (8002540 <HAL_GPIO_Init+0x2ac>)
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3c      	ldr	r2, [pc, #240]	@ (8002544 <HAL_GPIO_Init+0x2b0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d01f      	beq.n	8002498 <HAL_GPIO_Init+0x204>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3b      	ldr	r2, [pc, #236]	@ (8002548 <HAL_GPIO_Init+0x2b4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d019      	beq.n	8002494 <HAL_GPIO_Init+0x200>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3a      	ldr	r2, [pc, #232]	@ (800254c <HAL_GPIO_Init+0x2b8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_GPIO_Init+0x1fc>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a39      	ldr	r2, [pc, #228]	@ (8002550 <HAL_GPIO_Init+0x2bc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00d      	beq.n	800248c <HAL_GPIO_Init+0x1f8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a38      	ldr	r2, [pc, #224]	@ (8002554 <HAL_GPIO_Init+0x2c0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <HAL_GPIO_Init+0x1f4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a37      	ldr	r2, [pc, #220]	@ (8002558 <HAL_GPIO_Init+0x2c4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_GPIO_Init+0x1f0>
 8002480:	2305      	movs	r3, #5
 8002482:	e00a      	b.n	800249a <HAL_GPIO_Init+0x206>
 8002484:	2306      	movs	r3, #6
 8002486:	e008      	b.n	800249a <HAL_GPIO_Init+0x206>
 8002488:	2304      	movs	r3, #4
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x206>
 800248c:	2303      	movs	r3, #3
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x206>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x206>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x206>
 8002498:	2300      	movs	r3, #0
 800249a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024aa:	4925      	ldr	r1, [pc, #148]	@ (8002540 <HAL_GPIO_Init+0x2ac>)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024c4:	4b25      	ldr	r3, [pc, #148]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4924      	ldr	r1, [pc, #144]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024d2:	4b22      	ldr	r3, [pc, #136]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4920      	ldr	r1, [pc, #128]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 80024dc:	4013      	ands	r3, r2
 80024de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	491a      	ldr	r1, [pc, #104]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60cb      	str	r3, [r1, #12]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024fa:	4b18      	ldr	r3, [pc, #96]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	4916      	ldr	r1, [pc, #88]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 8002504:	4013      	ands	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d025      	beq.n	8002560 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4910      	ldr	r1, [pc, #64]	@ (800255c <HAL_GPIO_Init+0x2c8>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	e025      	b.n	800256e <HAL_GPIO_Init+0x2da>
 8002522:	bf00      	nop
 8002524:	10320000 	.word	0x10320000
 8002528:	10310000 	.word	0x10310000
 800252c:	10220000 	.word	0x10220000
 8002530:	10210000 	.word	0x10210000
 8002534:	10120000 	.word	0x10120000
 8002538:	10110000 	.word	0x10110000
 800253c:	40021000 	.word	0x40021000
 8002540:	40010000 	.word	0x40010000
 8002544:	40010800 	.word	0x40010800
 8002548:	40010c00 	.word	0x40010c00
 800254c:	40011000 	.word	0x40011000
 8002550:	40011400 	.word	0x40011400
 8002554:	40011800 	.word	0x40011800
 8002558:	40011c00 	.word	0x40011c00
 800255c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002560:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <HAL_GPIO_Init+0x324>)
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	43db      	mvns	r3, r3
 8002568:	4913      	ldr	r1, [pc, #76]	@ (80025b8 <HAL_GPIO_Init+0x324>)
 800256a:	4013      	ands	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800257a:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <HAL_GPIO_Init+0x324>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	490e      	ldr	r1, [pc, #56]	@ (80025b8 <HAL_GPIO_Init+0x324>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
 8002586:	e006      	b.n	8002596 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002588:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <HAL_GPIO_Init+0x324>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	43db      	mvns	r3, r3
 8002590:	4909      	ldr	r1, [pc, #36]	@ (80025b8 <HAL_GPIO_Init+0x324>)
 8002592:	4013      	ands	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	3301      	adds	r3, #1
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f47f ae7e 	bne.w	80022a8 <HAL_GPIO_Init+0x14>
  }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	372c      	adds	r7, #44	@ 0x2c
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025d8:	e003      	b.n	80025e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	611a      	str	r2, [r3, #16]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	041a      	lsls	r2, r3, #16
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43d9      	mvns	r1, r3
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	400b      	ands	r3, r1
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	611a      	str	r2, [r3, #16]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e036      	b.n	800269e <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002638:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002642:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6852      	ldr	r2, [r2, #4]
 800264c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6892      	ldr	r2, [r2, #8]
 8002656:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002658:	f7fe fe5c 	bl	8001314 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800265e:	e011      	b.n	8002684 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002660:	f7fe fe58 	bl	8001314 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 323c 	movw	r2, #4924	@ 0x133c
 800266e:	4293      	cmp	r3, r2
 8002670:	d908      	bls.n	8002684 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e00c      	b.n	800269e <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e6      	bne.n	8002660 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800269a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80026b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e272      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8087 	beq.w	80027f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026e4:	4b92      	ldr	r3, [pc, #584]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d00c      	beq.n	800270a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d112      	bne.n	8002722 <HAL_RCC_OscConfig+0x5e>
 80026fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002708:	d10b      	bne.n	8002722 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270a:	4b89      	ldr	r3, [pc, #548]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d06c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x12c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d168      	bne.n	80027f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e24c      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x76>
 800272c:	4b80      	ldr	r3, [pc, #512]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a7f      	ldr	r2, [pc, #508]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	e02e      	b.n	8002798 <HAL_RCC_OscConfig+0xd4>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x98>
 8002742:	4b7b      	ldr	r3, [pc, #492]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a7a      	ldr	r2, [pc, #488]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b78      	ldr	r3, [pc, #480]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a77      	ldr	r2, [pc, #476]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002754:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e01d      	b.n	8002798 <HAL_RCC_OscConfig+0xd4>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0xbc>
 8002766:	4b72      	ldr	r3, [pc, #456]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a71      	ldr	r2, [pc, #452]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b6f      	ldr	r3, [pc, #444]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a6e      	ldr	r2, [pc, #440]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0xd4>
 8002780:	4b6b      	ldr	r3, [pc, #428]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a6a      	ldr	r2, [pc, #424]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b68      	ldr	r3, [pc, #416]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a67      	ldr	r2, [pc, #412]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002796:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fdb8 	bl	8001314 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a8:	f7fe fdb4 	bl	8001314 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	@ 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e200      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0xe4>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fda4 	bl	8001314 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe fda0 	bl	8001314 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	@ 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e1ec      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	4b53      	ldr	r3, [pc, #332]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x10c>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d063      	beq.n	80028c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800280a:	4b49      	ldr	r3, [pc, #292]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b08      	cmp	r3, #8
 8002814:	d11c      	bne.n	8002850 <HAL_RCC_OscConfig+0x18c>
 8002816:	4b46      	ldr	r3, [pc, #280]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d116      	bne.n	8002850 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	4b43      	ldr	r3, [pc, #268]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_RCC_OscConfig+0x176>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e1c0      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283a:	4b3d      	ldr	r3, [pc, #244]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4939      	ldr	r1, [pc, #228]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	e03a      	b.n	80028c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002858:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <HAL_RCC_OscConfig+0x270>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe fd59 	bl	8001314 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002866:	f7fe fd55 	bl	8001314 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1a1      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	4b2d      	ldr	r3, [pc, #180]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4927      	ldr	r1, [pc, #156]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
 8002898:	e015      	b.n	80028c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289a:	4b26      	ldr	r3, [pc, #152]	@ (8002934 <HAL_RCC_OscConfig+0x270>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fd38 	bl	8001314 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe fd34 	bl	8001314 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e180      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d03a      	beq.n	8002948 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d019      	beq.n	800290e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028da:	4b17      	ldr	r3, [pc, #92]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7fe fd18 	bl	8001314 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e8:	f7fe fd14 	bl	8001314 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e160      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002906:	2001      	movs	r0, #1
 8002908:	f000 face 	bl	8002ea8 <RCC_Delay>
 800290c:	e01c      	b.n	8002948 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_RCC_OscConfig+0x274>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002914:	f7fe fcfe 	bl	8001314 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291a:	e00f      	b.n	800293c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe fcfa 	bl	8001314 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d908      	bls.n	800293c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e146      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	42420000 	.word	0x42420000
 8002938:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293c:	4b92      	ldr	r3, [pc, #584]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e9      	bne.n	800291c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80a6 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295a:	4b8b      	ldr	r3, [pc, #556]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	4b88      	ldr	r3, [pc, #544]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4a87      	ldr	r2, [pc, #540]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002970:	61d3      	str	r3, [r2, #28]
 8002972:	4b85      	ldr	r3, [pc, #532]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297e:	2301      	movs	r3, #1
 8002980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	4b82      	ldr	r3, [pc, #520]	@ (8002b8c <HAL_RCC_OscConfig+0x4c8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d118      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b8c <HAL_RCC_OscConfig+0x4c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7e      	ldr	r2, [pc, #504]	@ (8002b8c <HAL_RCC_OscConfig+0x4c8>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7fe fcbb 	bl	8001314 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7fe fcb7 	bl	8001314 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b64      	cmp	r3, #100	@ 0x64
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e103      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	4b75      	ldr	r3, [pc, #468]	@ (8002b8c <HAL_RCC_OscConfig+0x4c8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x312>
 80029c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6213      	str	r3, [r2, #32]
 80029d4:	e02d      	b.n	8002a32 <HAL_RCC_OscConfig+0x36e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x334>
 80029de:	4b6a      	ldr	r3, [pc, #424]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4a69      	ldr	r2, [pc, #420]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6213      	str	r3, [r2, #32]
 80029ea:	4b67      	ldr	r3, [pc, #412]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4a66      	ldr	r2, [pc, #408]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	f023 0304 	bic.w	r3, r3, #4
 80029f4:	6213      	str	r3, [r2, #32]
 80029f6:	e01c      	b.n	8002a32 <HAL_RCC_OscConfig+0x36e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	d10c      	bne.n	8002a1a <HAL_RCC_OscConfig+0x356>
 8002a00:	4b61      	ldr	r3, [pc, #388]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4a60      	ldr	r2, [pc, #384]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	f043 0304 	orr.w	r3, r3, #4
 8002a0a:	6213      	str	r3, [r2, #32]
 8002a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4a5d      	ldr	r2, [pc, #372]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6213      	str	r3, [r2, #32]
 8002a18:	e00b      	b.n	8002a32 <HAL_RCC_OscConfig+0x36e>
 8002a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6213      	str	r3, [r2, #32]
 8002a26:	4b58      	ldr	r3, [pc, #352]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4a57      	ldr	r2, [pc, #348]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f023 0304 	bic.w	r3, r3, #4
 8002a30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d015      	beq.n	8002a66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fc6b 	bl	8001314 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7fe fc67 	bl	8001314 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0b1      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	4b4b      	ldr	r3, [pc, #300]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ee      	beq.n	8002a42 <HAL_RCC_OscConfig+0x37e>
 8002a64:	e014      	b.n	8002a90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a66:	f7fe fc55 	bl	8001314 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7fe fc51 	bl	8001314 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e09b      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a84:	4b40      	ldr	r3, [pc, #256]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1ee      	bne.n	8002a6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d105      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a96:	4b3c      	ldr	r3, [pc, #240]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8087 	beq.w	8002bba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aac:	4b36      	ldr	r3, [pc, #216]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d061      	beq.n	8002b7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d146      	bne.n	8002b4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac0:	4b33      	ldr	r3, [pc, #204]	@ (8002b90 <HAL_RCC_OscConfig+0x4cc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fc25 	bl	8001314 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ace:	f7fe fc21 	bl	8001314 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e06d      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae0:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af4:	d108      	bne.n	8002b08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002af6:	4b24      	ldr	r3, [pc, #144]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4921      	ldr	r1, [pc, #132]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b08:	4b1f      	ldr	r3, [pc, #124]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a19      	ldr	r1, [r3, #32]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	491b      	ldr	r1, [pc, #108]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b20:	4b1b      	ldr	r3, [pc, #108]	@ (8002b90 <HAL_RCC_OscConfig+0x4cc>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fbf5 	bl	8001314 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe fbf1 	bl	8001314 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e03d      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x46a>
 8002b4c:	e035      	b.n	8002bba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <HAL_RCC_OscConfig+0x4cc>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fbde 	bl	8001314 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fbda 	bl	8001314 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e026      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x498>
 8002b7a:	e01e      	b.n	8002bba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e019      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_RCC_OscConfig+0x500>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0d0      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d910      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b67      	ldr	r3, [pc, #412]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 0207 	bic.w	r2, r3, #7
 8002bf2:	4965      	ldr	r1, [pc, #404]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b59      	ldr	r3, [pc, #356]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a58      	ldr	r2, [pc, #352]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3c:	4b53      	ldr	r3, [pc, #332]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a52      	ldr	r2, [pc, #328]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b50      	ldr	r3, [pc, #320]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	494d      	ldr	r1, [pc, #308]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d040      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d115      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	4b41      	ldr	r3, [pc, #260]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e073      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b3d      	ldr	r3, [pc, #244]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06b      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca6:	4b39      	ldr	r3, [pc, #228]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f023 0203 	bic.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4936      	ldr	r1, [pc, #216]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fb2c 	bl	8001314 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc0:	f7fe fb28 	bl	8001314 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e053      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 020c 	and.w	r2, r3, #12
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d1eb      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b27      	ldr	r3, [pc, #156]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d210      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 0207 	bic.w	r2, r3, #7
 8002cfe:	4922      	ldr	r1, [pc, #136]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b19      	ldr	r3, [pc, #100]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4916      	ldr	r1, [pc, #88]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d42:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	490e      	ldr	r1, [pc, #56]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d56:	f000 f821 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	490a      	ldr	r1, [pc, #40]	@ (8002d90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	5ccb      	ldrb	r3, [r1, r3]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	4a09      	ldr	r2, [pc, #36]	@ (8002d94 <HAL_RCC_ClockConfig+0x1cc>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <HAL_RCC_ClockConfig+0x1d0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe fa8a 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	0800543c 	.word	0x0800543c
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000204 	.word	0x20000204

08002d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002db6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x30>
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002dca:	e027      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dce:	613b      	str	r3, [r7, #16]
      break;
 8002dd0:	e027      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	0c9b      	lsrs	r3, r3, #18
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	4a17      	ldr	r2, [pc, #92]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ddc:	5cd3      	ldrb	r3, [r2, r3]
 8002dde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dea:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0c5b      	lsrs	r3, r3, #17
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	4a11      	ldr	r2, [pc, #68]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002df6:	5cd3      	ldrb	r3, [r2, r3]
 8002df8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dfe:	fb03 f202 	mul.w	r2, r3, r2
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e004      	b.n	8002e16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e10:	fb02 f303 	mul.w	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	613b      	str	r3, [r7, #16]
      break;
 8002e1a:	e002      	b.n	8002e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1e:	613b      	str	r3, [r7, #16]
      break;
 8002e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e22:	693b      	ldr	r3, [r7, #16]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	007a1200 	.word	0x007a1200
 8002e38:	08005454 	.word	0x08005454
 8002e3c:	08005464 	.word	0x08005464
 8002e40:	003d0900 	.word	0x003d0900

08002e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e48:	4b02      	ldr	r3, [pc, #8]	@ (8002e54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	20000000 	.word	0x20000000

08002e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e5c:	f7ff fff2 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4903      	ldr	r1, [pc, #12]	@ (8002e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	0800544c 	.word	0x0800544c

08002e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e84:	f7ff ffde 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0adb      	lsrs	r3, r3, #11
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4903      	ldr	r1, [pc, #12]	@ (8002ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	0800544c 	.word	0x0800544c

08002ea8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <RCC_Delay+0x34>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <RCC_Delay+0x38>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	0a5b      	lsrs	r3, r3, #9
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ec4:	bf00      	nop
  }
  while (Delay --);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1e5a      	subs	r2, r3, #1
 8002eca:	60fa      	str	r2, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f9      	bne.n	8002ec4 <RCC_Delay+0x1c>
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	10624dd3 	.word	0x10624dd3

08002ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e076      	b.n	8002fe4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f06:	d009      	beq.n	8002f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
 8002f0e:	e005      	b.n	8002f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd fb94 	bl	8000664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa0:	ea42 0103 	orr.w	r1, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	0c1a      	lsrs	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f002 0204 	and.w	r2, r2, #4
 8002fc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	@ 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ffe:	f7fe f989 	bl	8001314 <HAL_GetTick>
 8003002:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800300a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003016:	7ffb      	ldrb	r3, [r7, #31]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d00c      	beq.n	8003036 <HAL_SPI_TransmitReceive+0x4a>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003022:	d106      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x46>
 800302c:	7ffb      	ldrb	r3, [r7, #31]
 800302e:	2b04      	cmp	r3, #4
 8003030:	d001      	beq.n	8003036 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003032:	2302      	movs	r3, #2
 8003034:	e17f      	b.n	8003336 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_SPI_TransmitReceive+0x5c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_SPI_TransmitReceive+0x5c>
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e174      	b.n	8003336 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_SPI_TransmitReceive+0x6e>
 8003056:	2302      	movs	r3, #2
 8003058:	e16d      	b.n	8003336 <HAL_SPI_TransmitReceive+0x34a>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b04      	cmp	r3, #4
 800306c:	d003      	beq.n	8003076 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2205      	movs	r2, #5
 8003072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	887a      	ldrh	r2, [r7, #2]
 8003086:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	887a      	ldrh	r2, [r7, #2]
 800309e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b6:	2b40      	cmp	r3, #64	@ 0x40
 80030b8:	d007      	beq.n	80030ca <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d2:	d17e      	bne.n	80031d2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0xf6>
 80030dc:	8afb      	ldrh	r3, [r7, #22]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d16c      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	881a      	ldrh	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	1c9a      	adds	r2, r3, #2
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003106:	e059      	b.n	80031bc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d11b      	bne.n	800314e <HAL_SPI_TransmitReceive+0x162>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d016      	beq.n	800314e <HAL_SPI_TransmitReceive+0x162>
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	2b01      	cmp	r3, #1
 8003124:	d113      	bne.n	800314e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d119      	bne.n	8003190 <HAL_SPI_TransmitReceive+0x1a4>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d014      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	b292      	uxth	r2, r2
 8003172:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	1c9a      	adds	r2, r3, #2
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800318c:	2301      	movs	r3, #1
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003190:	f7fe f8c0 	bl	8001314 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800319c:	429a      	cmp	r2, r3
 800319e:	d80d      	bhi.n	80031bc <HAL_SPI_TransmitReceive+0x1d0>
 80031a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d009      	beq.n	80031bc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0bc      	b.n	8003336 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1a0      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x11c>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d19b      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x11c>
 80031d0:	e082      	b.n	80032d8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x1f4>
 80031da:	8afb      	ldrh	r3, [r7, #22]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d171      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	7812      	ldrb	r2, [r2, #0]
 80031ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003206:	e05d      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d11c      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x264>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d017      	beq.n	8003250 <HAL_SPI_TransmitReceive+0x264>
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	2b01      	cmp	r3, #1
 8003224:	d114      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	7812      	ldrb	r2, [r2, #0]
 8003232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d119      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x2a6>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d014      	beq.n	8003292 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800328e:	2301      	movs	r3, #1
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003292:	f7fe f83f 	bl	8001314 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800329e:	429a      	cmp	r2, r3
 80032a0:	d803      	bhi.n	80032aa <HAL_SPI_TransmitReceive+0x2be>
 80032a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d102      	bne.n	80032b0 <HAL_SPI_TransmitReceive+0x2c4>
 80032aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e038      	b.n	8003336 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d19c      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x21c>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d197      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f8b7 	bl	8003450 <SPI_EndRxTxTransaction>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e01d      	b.n	8003336 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003334:	2300      	movs	r3, #0
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3728      	adds	r7, #40	@ 0x28
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003350:	f7fd ffe0 	bl	8001314 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	4413      	add	r3, r2
 800335e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003360:	f7fd ffd8 	bl	8001314 <HAL_GetTick>
 8003364:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003366:	4b39      	ldr	r3, [pc, #228]	@ (800344c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	015b      	lsls	r3, r3, #5
 800336c:	0d1b      	lsrs	r3, r3, #20
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003376:	e054      	b.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d050      	beq.n	8003422 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003380:	f7fd ffc8 	bl	8001314 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	429a      	cmp	r2, r3
 800338e:	d902      	bls.n	8003396 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d13d      	bne.n	8003412 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ae:	d111      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b8:	d004      	beq.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c2:	d107      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033dc:	d10f      	bne.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e017      	b.n	8003442 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3b01      	subs	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d19b      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000000 	.word	0x20000000

08003450 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2201      	movs	r2, #1
 8003464:	2102      	movs	r1, #2
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff ff6a 	bl	8003340 <SPI_WaitFlagStateUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e013      	b.n	80034aa <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2200      	movs	r2, #0
 800348a:	2180      	movs	r1, #128	@ 0x80
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f7ff ff57 	bl	8003340 <SPI_WaitFlagStateUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e000      	b.n	80034aa <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e042      	b.n	800354a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7fd f90f 	bl	80006fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2224      	movs	r2, #36	@ 0x24
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 ffb6 	bl	8004468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800350a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800351a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800352a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	@ 0x30
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	d156      	bne.n	800361c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_UART_Transmit_DMA+0x26>
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e04f      	b.n	800361e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2221      	movs	r2, #33	@ 0x21
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a2:	4a21      	ldr	r2, [pc, #132]	@ (8003628 <HAL_UART_Transmit_DMA+0xd4>)
 80035a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035aa:	4a20      	ldr	r2, [pc, #128]	@ (800362c <HAL_UART_Transmit_DMA+0xd8>)
 80035ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <HAL_UART_Transmit_DMA+0xdc>)
 80035b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ba:	2200      	movs	r2, #0
 80035bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80035be:	f107 0308 	add.w	r3, r7, #8
 80035c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80035c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3304      	adds	r3, #4
 80035d2:	461a      	mov	r2, r3
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	f7fe f84f 	bl	8001678 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3314      	adds	r3, #20
 80035ea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	617b      	str	r3, [r7, #20]
   return(result);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3314      	adds	r3, #20
 8003602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003604:	627a      	str	r2, [r7, #36]	@ 0x24
 8003606:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6a39      	ldr	r1, [r7, #32]
 800360a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	61fb      	str	r3, [r7, #28]
   return(result);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e5      	bne.n	80035e4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3730      	adds	r7, #48	@ 0x30
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	08003cff 	.word	0x08003cff
 800362c:	08003d99 	.word	0x08003d99
 8003630:	08003f1d 	.word	0x08003f1d

08003634 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b20      	cmp	r3, #32
 800364c:	d112      	bne.n	8003674 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_UART_Receive_DMA+0x26>
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00b      	b.n	8003676 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	461a      	mov	r2, r3
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fca0 	bl	8003fb0 <UART_Start_Receive_DMA>
 8003670:	4603      	mov	r3, r0
 8003672:	e000      	b.n	8003676 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b090      	sub	sp, #64	@ 0x40
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b21      	cmp	r3, #33	@ 0x21
 80036aa:	d128      	bne.n	80036fe <HAL_UART_DMAStop+0x80>
 80036ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d025      	beq.n	80036fe <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3314      	adds	r3, #20
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	623b      	str	r3, [r7, #32]
   return(result);
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e5      	bne.n	80036b2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe f820 	bl	8001738 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fcf3 	bl	80040e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b22      	cmp	r3, #34	@ 0x22
 800371e:	d128      	bne.n	8003772 <HAL_UART_DMAStop+0xf4>
 8003720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d025      	beq.n	8003772 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	60fb      	str	r3, [r7, #12]
   return(result);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800373c:	637b      	str	r3, [r7, #52]	@ 0x34
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3314      	adds	r3, #20
 8003744:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003746:	61fa      	str	r2, [r7, #28]
 8003748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	69b9      	ldr	r1, [r7, #24]
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	617b      	str	r3, [r7, #20]
   return(result);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd ffe6 	bl	8001738 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fce0 	bl	8004132 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3740      	adds	r7, #64	@ 0x40
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b0ba      	sub	sp, #232	@ 0xe8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_UART_IRQHandler+0x66>
 80037ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fd86 	bl	80042ec <UART_Receive_IT>
      return;
 80037e0:	e25b      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80de 	beq.w	80039a8 <HAL_UART_IRQHandler+0x22c>
 80037ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80d1 	beq.w	80039a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_UART_IRQHandler+0xae>
 8003812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_UART_IRQHandler+0xd2>
 8003836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_UART_IRQHandler+0xf6>
 800385a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d011      	beq.n	80038a2 <HAL_UART_IRQHandler+0x126>
 800387e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800388a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	f043 0208 	orr.w	r2, r3, #8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 81f2 	beq.w	8003c90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_UART_IRQHandler+0x14e>
 80038b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fd11 	bl	80042ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_UART_IRQHandler+0x17a>
 80038ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d04f      	beq.n	8003996 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fc1b 	bl	8004132 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d041      	beq.n	800398e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3314      	adds	r3, #20
 8003910:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003936:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800393a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800394e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1d9      	bne.n	800390a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d013      	beq.n	8003986 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003962:	4a7e      	ldr	r2, [pc, #504]	@ (8003b5c <HAL_UART_IRQHandler+0x3e0>)
 8003964:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd ff20 	bl	80017b0 <HAL_DMA_Abort_IT>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003980:	4610      	mov	r0, r2
 8003982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	e00e      	b.n	80039a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fb4c 	bl	8001024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398c:	e00a      	b.n	80039a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd fb48 	bl	8001024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	e006      	b.n	80039a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd fb44 	bl	8001024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039a2:	e175      	b.n	8003c90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	bf00      	nop
    return;
 80039a6:	e173      	b.n	8003c90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	f040 814f 	bne.w	8003c50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8148 	beq.w	8003c50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8141 	beq.w	8003c50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80b6 	beq.w	8003b60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8145 	beq.w	8003c94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a12:	429a      	cmp	r2, r3
 8003a14:	f080 813e 	bcs.w	8003c94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	f000 8088 	beq.w	8003b3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	330c      	adds	r3, #12
 8003a32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a58:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1d9      	bne.n	8003a2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3314      	adds	r3, #20
 8003a7e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a9c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003aa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003aa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003aae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e1      	bne.n	8003a78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3314      	adds	r3, #20
 8003aba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ad8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ada:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ade:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ae6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e3      	bne.n	8003ab4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b0c:	f023 0310 	bic.w	r3, r3, #16
 8003b10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b1e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b20:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e3      	bne.n	8003afa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd fdfe 	bl	8001738 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8c8 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b58:	e09c      	b.n	8003c94 <HAL_UART_IRQHandler+0x518>
 8003b5a:	bf00      	nop
 8003b5c:	080041f7 	.word	0x080041f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 808e 	beq.w	8003c98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8089 	beq.w	8003c98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003baa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e3      	bne.n	8003b86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003be2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e3      	bne.n	8003bbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	69b9      	ldr	r1, [r7, #24]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	617b      	str	r3, [r7, #20]
   return(result);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e3      	bne.n	8003c04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f84d 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c4e:	e023      	b.n	8003c98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_UART_IRQHandler+0x4f4>
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fad8 	bl	800421e <UART_Transmit_IT>
    return;
 8003c6e:	e014      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <HAL_UART_IRQHandler+0x51e>
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fb17 	bl	80042bc <UART_EndTransmit_IT>
    return;
 8003c8e:	e004      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c98:	bf00      	nop
  }
}
 8003c9a:	37e8      	adds	r7, #232	@ 0xe8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b090      	sub	sp, #64	@ 0x40
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d137      	bne.n	8003d8a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d40:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d74:	61fa      	str	r2, [r7, #28]
 8003d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	617b      	str	r3, [r7, #20]
   return(result);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d88:	e002      	b.n	8003d90 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003d8a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003d8c:	f7ff ff88 	bl	8003ca0 <HAL_UART_TxCpltCallback>
}
 8003d90:	bf00      	nop
 8003d92:	3740      	adds	r7, #64	@ 0x40
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff ff83 	bl	8003cb2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b09c      	sub	sp, #112	@ 0x70
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d172      	bne.n	8003eb6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003df6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003df8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e5      	bne.n	8003dd6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e5      	bne.n	8003e0a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3314      	adds	r3, #20
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3314      	adds	r3, #20
 8003e5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e5      	bne.n	8003e3e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d119      	bne.n	8003eb6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f023 0310 	bic.w	r3, r3, #16
 8003e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ea2:	61fa      	str	r2, [r7, #28]
 8003ea4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	69b9      	ldr	r1, [r7, #24]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e5      	bne.n	8003e82 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eb8:	2200      	movs	r2, #0
 8003eba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d106      	bne.n	8003ed2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ecc:	f7ff ff0c 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ed0:	e002      	b.n	8003ed8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003ed2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ed4:	f7ff fef6 	bl	8003cc4 <HAL_UART_RxCpltCallback>
}
 8003ed8:	bf00      	nop
 8003eda:	3770      	adds	r7, #112	@ 0x70
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d108      	bne.n	8003f0e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	4619      	mov	r1, r3
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff feee 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f0c:	e002      	b.n	8003f14 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fee1 	bl	8003cd6 <HAL_UART_RxHalfCpltCallback>
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b21      	cmp	r3, #33	@ 0x21
 8003f4e:	d108      	bne.n	8003f62 <UART_DMAError+0x46>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	f000 f8c1 	bl	80040e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf14      	ite	ne
 8003f70:	2301      	movne	r3, #1
 8003f72:	2300      	moveq	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b22      	cmp	r3, #34	@ 0x22
 8003f82:	d108      	bne.n	8003f96 <UART_DMAError+0x7a>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003f90:	68b8      	ldr	r0, [r7, #8]
 8003f92:	f000 f8ce 	bl	8004132 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	f043 0210 	orr.w	r2, r3, #16
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa2:	68b8      	ldr	r0, [r7, #8]
 8003fa4:	f7fd f83e 	bl	8001024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b098      	sub	sp, #96	@ 0x60
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2222      	movs	r2, #34	@ 0x22
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fdc:	4a3e      	ldr	r2, [pc, #248]	@ (80040d8 <UART_Start_Receive_DMA+0x128>)
 8003fde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe4:	4a3d      	ldr	r2, [pc, #244]	@ (80040dc <UART_Start_Receive_DMA+0x12c>)
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	4a3c      	ldr	r2, [pc, #240]	@ (80040e0 <UART_Start_Receive_DMA+0x130>)
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ff8:	f107 0308 	add.w	r3, r7, #8
 8003ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	f7fd fb32 	bl	8001678 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d019      	beq.n	8004066 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004048:	65bb      	str	r3, [r7, #88]	@ 0x58
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004052:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004054:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	657b      	str	r3, [r7, #84]	@ 0x54
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004086:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004088:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800408c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e5      	bne.n	8004066 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3314      	adds	r3, #20
 80040a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	617b      	str	r3, [r7, #20]
   return(result);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3314      	adds	r3, #20
 80040b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80040ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80040bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6a39      	ldr	r1, [r7, #32]
 80040c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e5      	bne.n	800409a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3760      	adds	r7, #96	@ 0x60
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	08003db5 	.word	0x08003db5
 80040dc:	08003ee1 	.word	0x08003ee1
 80040e0:	08003f1d 	.word	0x08003f1d

080040e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b089      	sub	sp, #36	@ 0x24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	61ba      	str	r2, [r7, #24]
 800410e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6979      	ldr	r1, [r7, #20]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	613b      	str	r3, [r7, #16]
   return(result);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e5      	bne.n	80040ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004128:	bf00      	nop
 800412a:	3724      	adds	r7, #36	@ 0x24
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004132:	b480      	push	{r7}
 8004134:	b095      	sub	sp, #84	@ 0x54
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800414a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	330c      	adds	r3, #12
 8004158:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800415a:	643a      	str	r2, [r7, #64]	@ 0x40
 800415c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004160:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e5      	bne.n	800413a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	61fb      	str	r3, [r7, #28]
   return(result);
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800418e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e5      	bne.n	800416e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d119      	bne.n	80041de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f023 0310 	bic.w	r3, r3, #16
 80041c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ca:	61ba      	str	r2, [r7, #24]
 80041cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6979      	ldr	r1, [r7, #20]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	613b      	str	r3, [r7, #16]
   return(result);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e5      	bne.n	80041aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041ec:	bf00      	nop
 80041ee:	3754      	adds	r7, #84	@ 0x54
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7fc ff07 	bl	8001024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b21      	cmp	r3, #33	@ 0x21
 8004230:	d13e      	bne.n	80042b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800423a:	d114      	bne.n	8004266 <UART_Transmit_IT+0x48>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d110      	bne.n	8004266 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004258:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	1c9a      	adds	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	621a      	str	r2, [r3, #32]
 8004264:	e008      	b.n	8004278 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6211      	str	r1, [r2, #32]
 8004270:	781a      	ldrb	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29b      	uxth	r3, r3
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	4619      	mov	r1, r3
 8004286:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10f      	bne.n	80042ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800429a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e000      	b.n	80042b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042b0:	2302      	movs	r3, #2
  }
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff fcdf 	bl	8003ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	@ 0x30
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b22      	cmp	r3, #34	@ 0x22
 80042fe:	f040 80ae 	bne.w	800445e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430a:	d117      	bne.n	800433c <UART_Receive_IT+0x50>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d113      	bne.n	800433c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004314:	2300      	movs	r3, #0
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432a:	b29a      	uxth	r2, r3
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	1c9a      	adds	r2, r3, #2
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	629a      	str	r2, [r3, #40]	@ 0x28
 800433a:	e026      	b.n	800438a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434e:	d007      	beq.n	8004360 <UART_Receive_IT+0x74>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <UART_Receive_IT+0x82>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e008      	b.n	8004380 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800437a:	b2da      	uxtb	r2, r3
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	4619      	mov	r1, r3
 8004398:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800439a:	2b00      	cmp	r3, #0
 800439c:	d15d      	bne.n	800445a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0220 	bic.w	r2, r2, #32
 80043ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d135      	bne.n	8004450 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	613b      	str	r3, [r7, #16]
   return(result);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f023 0310 	bic.w	r3, r3, #16
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440a:	623a      	str	r2, [r7, #32]
 800440c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	69f9      	ldr	r1, [r7, #28]
 8004410:	6a3a      	ldr	r2, [r7, #32]
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	61bb      	str	r3, [r7, #24]
   return(result);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e5      	bne.n	80043ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b10      	cmp	r3, #16
 800442a:	d10a      	bne.n	8004442 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fc4d 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
 800444e:	e002      	b.n	8004456 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fc37 	bl	8003cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e002      	b.n	8004460 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	3730      	adds	r7, #48	@ 0x30
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044a2:	f023 030c 	bic.w	r3, r3, #12
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2c      	ldr	r2, [pc, #176]	@ (800457c <UART_SetConfig+0x114>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d103      	bne.n	80044d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044d0:	f7fe fcd6 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	e002      	b.n	80044de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044d8:	f7fe fcbe 	bl	8002e58 <HAL_RCC_GetPCLK1Freq>
 80044dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009a      	lsls	r2, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	4a22      	ldr	r2, [pc, #136]	@ (8004580 <UART_SetConfig+0x118>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	0119      	lsls	r1, r3, #4
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009a      	lsls	r2, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	fbb2 f2f3 	udiv	r2, r2, r3
 8004514:	4b1a      	ldr	r3, [pc, #104]	@ (8004580 <UART_SetConfig+0x118>)
 8004516:	fba3 0302 	umull	r0, r3, r3, r2
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2064      	movs	r0, #100	@ 0x64
 800451e:	fb00 f303 	mul.w	r3, r0, r3
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	3332      	adds	r3, #50	@ 0x32
 8004528:	4a15      	ldr	r2, [pc, #84]	@ (8004580 <UART_SetConfig+0x118>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004534:	4419      	add	r1, r3
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	fbb2 f2f3 	udiv	r2, r2, r3
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <UART_SetConfig+0x118>)
 800454e:	fba3 0302 	umull	r0, r3, r3, r2
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2064      	movs	r0, #100	@ 0x64
 8004556:	fb00 f303 	mul.w	r3, r0, r3
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	3332      	adds	r3, #50	@ 0x32
 8004560:	4a07      	ldr	r2, [pc, #28]	@ (8004580 <UART_SetConfig+0x118>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	440a      	add	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40013800 	.word	0x40013800
 8004580:	51eb851f 	.word	0x51eb851f

08004584 <std>:
 8004584:	2300      	movs	r3, #0
 8004586:	b510      	push	{r4, lr}
 8004588:	4604      	mov	r4, r0
 800458a:	e9c0 3300 	strd	r3, r3, [r0]
 800458e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004592:	6083      	str	r3, [r0, #8]
 8004594:	8181      	strh	r1, [r0, #12]
 8004596:	6643      	str	r3, [r0, #100]	@ 0x64
 8004598:	81c2      	strh	r2, [r0, #14]
 800459a:	6183      	str	r3, [r0, #24]
 800459c:	4619      	mov	r1, r3
 800459e:	2208      	movs	r2, #8
 80045a0:	305c      	adds	r0, #92	@ 0x5c
 80045a2:	f000 f906 	bl	80047b2 <memset>
 80045a6:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <std+0x58>)
 80045a8:	6224      	str	r4, [r4, #32]
 80045aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80045ac:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <std+0x5c>)
 80045ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045b0:	4b0c      	ldr	r3, [pc, #48]	@ (80045e4 <std+0x60>)
 80045b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <std+0x64>)
 80045b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80045b8:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <std+0x68>)
 80045ba:	429c      	cmp	r4, r3
 80045bc:	d006      	beq.n	80045cc <std+0x48>
 80045be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045c2:	4294      	cmp	r4, r2
 80045c4:	d002      	beq.n	80045cc <std+0x48>
 80045c6:	33d0      	adds	r3, #208	@ 0xd0
 80045c8:	429c      	cmp	r4, r3
 80045ca:	d105      	bne.n	80045d8 <std+0x54>
 80045cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d4:	f000 b966 	b.w	80048a4 <__retarget_lock_init_recursive>
 80045d8:	bd10      	pop	{r4, pc}
 80045da:	bf00      	nop
 80045dc:	0800472d 	.word	0x0800472d
 80045e0:	0800474f 	.word	0x0800474f
 80045e4:	08004787 	.word	0x08004787
 80045e8:	080047ab 	.word	0x080047ab
 80045ec:	20001470 	.word	0x20001470

080045f0 <stdio_exit_handler>:
 80045f0:	4a02      	ldr	r2, [pc, #8]	@ (80045fc <stdio_exit_handler+0xc>)
 80045f2:	4903      	ldr	r1, [pc, #12]	@ (8004600 <stdio_exit_handler+0x10>)
 80045f4:	4803      	ldr	r0, [pc, #12]	@ (8004604 <stdio_exit_handler+0x14>)
 80045f6:	f000 b869 	b.w	80046cc <_fwalk_sglue>
 80045fa:	bf00      	nop
 80045fc:	2000020c 	.word	0x2000020c
 8004600:	08005159 	.word	0x08005159
 8004604:	2000021c 	.word	0x2000021c

08004608 <cleanup_stdio>:
 8004608:	6841      	ldr	r1, [r0, #4]
 800460a:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <cleanup_stdio+0x34>)
 800460c:	b510      	push	{r4, lr}
 800460e:	4299      	cmp	r1, r3
 8004610:	4604      	mov	r4, r0
 8004612:	d001      	beq.n	8004618 <cleanup_stdio+0x10>
 8004614:	f000 fda0 	bl	8005158 <_fflush_r>
 8004618:	68a1      	ldr	r1, [r4, #8]
 800461a:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <cleanup_stdio+0x38>)
 800461c:	4299      	cmp	r1, r3
 800461e:	d002      	beq.n	8004626 <cleanup_stdio+0x1e>
 8004620:	4620      	mov	r0, r4
 8004622:	f000 fd99 	bl	8005158 <_fflush_r>
 8004626:	68e1      	ldr	r1, [r4, #12]
 8004628:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <cleanup_stdio+0x3c>)
 800462a:	4299      	cmp	r1, r3
 800462c:	d004      	beq.n	8004638 <cleanup_stdio+0x30>
 800462e:	4620      	mov	r0, r4
 8004630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004634:	f000 bd90 	b.w	8005158 <_fflush_r>
 8004638:	bd10      	pop	{r4, pc}
 800463a:	bf00      	nop
 800463c:	20001470 	.word	0x20001470
 8004640:	200014d8 	.word	0x200014d8
 8004644:	20001540 	.word	0x20001540

08004648 <global_stdio_init.part.0>:
 8004648:	b510      	push	{r4, lr}
 800464a:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <global_stdio_init.part.0+0x30>)
 800464c:	4c0b      	ldr	r4, [pc, #44]	@ (800467c <global_stdio_init.part.0+0x34>)
 800464e:	4a0c      	ldr	r2, [pc, #48]	@ (8004680 <global_stdio_init.part.0+0x38>)
 8004650:	4620      	mov	r0, r4
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	2104      	movs	r1, #4
 8004656:	2200      	movs	r2, #0
 8004658:	f7ff ff94 	bl	8004584 <std>
 800465c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004660:	2201      	movs	r2, #1
 8004662:	2109      	movs	r1, #9
 8004664:	f7ff ff8e 	bl	8004584 <std>
 8004668:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800466c:	2202      	movs	r2, #2
 800466e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004672:	2112      	movs	r1, #18
 8004674:	f7ff bf86 	b.w	8004584 <std>
 8004678:	200015a8 	.word	0x200015a8
 800467c:	20001470 	.word	0x20001470
 8004680:	080045f1 	.word	0x080045f1

08004684 <__sfp_lock_acquire>:
 8004684:	4801      	ldr	r0, [pc, #4]	@ (800468c <__sfp_lock_acquire+0x8>)
 8004686:	f000 b90e 	b.w	80048a6 <__retarget_lock_acquire_recursive>
 800468a:	bf00      	nop
 800468c:	200015b1 	.word	0x200015b1

08004690 <__sfp_lock_release>:
 8004690:	4801      	ldr	r0, [pc, #4]	@ (8004698 <__sfp_lock_release+0x8>)
 8004692:	f000 b909 	b.w	80048a8 <__retarget_lock_release_recursive>
 8004696:	bf00      	nop
 8004698:	200015b1 	.word	0x200015b1

0800469c <__sinit>:
 800469c:	b510      	push	{r4, lr}
 800469e:	4604      	mov	r4, r0
 80046a0:	f7ff fff0 	bl	8004684 <__sfp_lock_acquire>
 80046a4:	6a23      	ldr	r3, [r4, #32]
 80046a6:	b11b      	cbz	r3, 80046b0 <__sinit+0x14>
 80046a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ac:	f7ff bff0 	b.w	8004690 <__sfp_lock_release>
 80046b0:	4b04      	ldr	r3, [pc, #16]	@ (80046c4 <__sinit+0x28>)
 80046b2:	6223      	str	r3, [r4, #32]
 80046b4:	4b04      	ldr	r3, [pc, #16]	@ (80046c8 <__sinit+0x2c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f5      	bne.n	80046a8 <__sinit+0xc>
 80046bc:	f7ff ffc4 	bl	8004648 <global_stdio_init.part.0>
 80046c0:	e7f2      	b.n	80046a8 <__sinit+0xc>
 80046c2:	bf00      	nop
 80046c4:	08004609 	.word	0x08004609
 80046c8:	200015a8 	.word	0x200015a8

080046cc <_fwalk_sglue>:
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d0:	4607      	mov	r7, r0
 80046d2:	4688      	mov	r8, r1
 80046d4:	4614      	mov	r4, r2
 80046d6:	2600      	movs	r6, #0
 80046d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046dc:	f1b9 0901 	subs.w	r9, r9, #1
 80046e0:	d505      	bpl.n	80046ee <_fwalk_sglue+0x22>
 80046e2:	6824      	ldr	r4, [r4, #0]
 80046e4:	2c00      	cmp	r4, #0
 80046e6:	d1f7      	bne.n	80046d8 <_fwalk_sglue+0xc>
 80046e8:	4630      	mov	r0, r6
 80046ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ee:	89ab      	ldrh	r3, [r5, #12]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d907      	bls.n	8004704 <_fwalk_sglue+0x38>
 80046f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046f8:	3301      	adds	r3, #1
 80046fa:	d003      	beq.n	8004704 <_fwalk_sglue+0x38>
 80046fc:	4629      	mov	r1, r5
 80046fe:	4638      	mov	r0, r7
 8004700:	47c0      	blx	r8
 8004702:	4306      	orrs	r6, r0
 8004704:	3568      	adds	r5, #104	@ 0x68
 8004706:	e7e9      	b.n	80046dc <_fwalk_sglue+0x10>

08004708 <iprintf>:
 8004708:	b40f      	push	{r0, r1, r2, r3}
 800470a:	b507      	push	{r0, r1, r2, lr}
 800470c:	4906      	ldr	r1, [pc, #24]	@ (8004728 <iprintf+0x20>)
 800470e:	ab04      	add	r3, sp, #16
 8004710:	6808      	ldr	r0, [r1, #0]
 8004712:	f853 2b04 	ldr.w	r2, [r3], #4
 8004716:	6881      	ldr	r1, [r0, #8]
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	f000 f9f3 	bl	8004b04 <_vfiprintf_r>
 800471e:	b003      	add	sp, #12
 8004720:	f85d eb04 	ldr.w	lr, [sp], #4
 8004724:	b004      	add	sp, #16
 8004726:	4770      	bx	lr
 8004728:	20000218 	.word	0x20000218

0800472c <__sread>:
 800472c:	b510      	push	{r4, lr}
 800472e:	460c      	mov	r4, r1
 8004730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004734:	f000 f868 	bl	8004808 <_read_r>
 8004738:	2800      	cmp	r0, #0
 800473a:	bfab      	itete	ge
 800473c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800473e:	89a3      	ldrhlt	r3, [r4, #12]
 8004740:	181b      	addge	r3, r3, r0
 8004742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004746:	bfac      	ite	ge
 8004748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800474a:	81a3      	strhlt	r3, [r4, #12]
 800474c:	bd10      	pop	{r4, pc}

0800474e <__swrite>:
 800474e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004752:	461f      	mov	r7, r3
 8004754:	898b      	ldrh	r3, [r1, #12]
 8004756:	4605      	mov	r5, r0
 8004758:	05db      	lsls	r3, r3, #23
 800475a:	460c      	mov	r4, r1
 800475c:	4616      	mov	r6, r2
 800475e:	d505      	bpl.n	800476c <__swrite+0x1e>
 8004760:	2302      	movs	r3, #2
 8004762:	2200      	movs	r2, #0
 8004764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004768:	f000 f83c 	bl	80047e4 <_lseek_r>
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	4632      	mov	r2, r6
 8004770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004774:	81a3      	strh	r3, [r4, #12]
 8004776:	4628      	mov	r0, r5
 8004778:	463b      	mov	r3, r7
 800477a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800477e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004782:	f000 b853 	b.w	800482c <_write_r>

08004786 <__sseek>:
 8004786:	b510      	push	{r4, lr}
 8004788:	460c      	mov	r4, r1
 800478a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478e:	f000 f829 	bl	80047e4 <_lseek_r>
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	bf15      	itete	ne
 8004798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800479a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800479e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047a2:	81a3      	strheq	r3, [r4, #12]
 80047a4:	bf18      	it	ne
 80047a6:	81a3      	strhne	r3, [r4, #12]
 80047a8:	bd10      	pop	{r4, pc}

080047aa <__sclose>:
 80047aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ae:	f000 b809 	b.w	80047c4 <_close_r>

080047b2 <memset>:
 80047b2:	4603      	mov	r3, r0
 80047b4:	4402      	add	r2, r0
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d100      	bne.n	80047bc <memset+0xa>
 80047ba:	4770      	bx	lr
 80047bc:	f803 1b01 	strb.w	r1, [r3], #1
 80047c0:	e7f9      	b.n	80047b6 <memset+0x4>
	...

080047c4 <_close_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	2300      	movs	r3, #0
 80047c8:	4d05      	ldr	r5, [pc, #20]	@ (80047e0 <_close_r+0x1c>)
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	f7fc f8c3 	bl	800095a <_close>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_close_r+0x1a>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_close_r+0x1a>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	200015ac 	.word	0x200015ac

080047e4 <_lseek_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4604      	mov	r4, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	4611      	mov	r1, r2
 80047ec:	2200      	movs	r2, #0
 80047ee:	4d05      	ldr	r5, [pc, #20]	@ (8004804 <_lseek_r+0x20>)
 80047f0:	602a      	str	r2, [r5, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f7fc f8d5 	bl	80009a2 <_lseek>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_lseek_r+0x1e>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_lseek_r+0x1e>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	200015ac 	.word	0x200015ac

08004808 <_read_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	2200      	movs	r2, #0
 8004812:	4d05      	ldr	r5, [pc, #20]	@ (8004828 <_read_r+0x20>)
 8004814:	602a      	str	r2, [r5, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	f7fc f866 	bl	80008e8 <_read>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_read_r+0x1e>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_read_r+0x1e>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	200015ac 	.word	0x200015ac

0800482c <_write_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4604      	mov	r4, r0
 8004830:	4608      	mov	r0, r1
 8004832:	4611      	mov	r1, r2
 8004834:	2200      	movs	r2, #0
 8004836:	4d05      	ldr	r5, [pc, #20]	@ (800484c <_write_r+0x20>)
 8004838:	602a      	str	r2, [r5, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f7fc f871 	bl	8000922 <_write>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_write_r+0x1e>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_write_r+0x1e>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	200015ac 	.word	0x200015ac

08004850 <__errno>:
 8004850:	4b01      	ldr	r3, [pc, #4]	@ (8004858 <__errno+0x8>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000218 	.word	0x20000218

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	2600      	movs	r6, #0
 8004860:	4d0c      	ldr	r5, [pc, #48]	@ (8004894 <__libc_init_array+0x38>)
 8004862:	4c0d      	ldr	r4, [pc, #52]	@ (8004898 <__libc_init_array+0x3c>)
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	f000 fdd2 	bl	8005414 <_init>
 8004870:	2600      	movs	r6, #0
 8004872:	4d0a      	ldr	r5, [pc, #40]	@ (800489c <__libc_init_array+0x40>)
 8004874:	4c0a      	ldr	r4, [pc, #40]	@ (80048a0 <__libc_init_array+0x44>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	0800549c 	.word	0x0800549c
 8004898:	0800549c 	.word	0x0800549c
 800489c:	0800549c 	.word	0x0800549c
 80048a0:	080054a0 	.word	0x080054a0

080048a4 <__retarget_lock_init_recursive>:
 80048a4:	4770      	bx	lr

080048a6 <__retarget_lock_acquire_recursive>:
 80048a6:	4770      	bx	lr

080048a8 <__retarget_lock_release_recursive>:
 80048a8:	4770      	bx	lr

080048aa <memcpy>:
 80048aa:	440a      	add	r2, r1
 80048ac:	4291      	cmp	r1, r2
 80048ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80048b2:	d100      	bne.n	80048b6 <memcpy+0xc>
 80048b4:	4770      	bx	lr
 80048b6:	b510      	push	{r4, lr}
 80048b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048bc:	4291      	cmp	r1, r2
 80048be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c2:	d1f9      	bne.n	80048b8 <memcpy+0xe>
 80048c4:	bd10      	pop	{r4, pc}
	...

080048c8 <_free_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4605      	mov	r5, r0
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d040      	beq.n	8004952 <_free_r+0x8a>
 80048d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d4:	1f0c      	subs	r4, r1, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfb8      	it	lt
 80048da:	18e4      	addlt	r4, r4, r3
 80048dc:	f000 f8de 	bl	8004a9c <__malloc_lock>
 80048e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004954 <_free_r+0x8c>)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	b933      	cbnz	r3, 80048f4 <_free_r+0x2c>
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	6014      	str	r4, [r2, #0]
 80048ea:	4628      	mov	r0, r5
 80048ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f0:	f000 b8da 	b.w	8004aa8 <__malloc_unlock>
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d908      	bls.n	800490a <_free_r+0x42>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	1821      	adds	r1, r4, r0
 80048fc:	428b      	cmp	r3, r1
 80048fe:	bf01      	itttt	eq
 8004900:	6819      	ldreq	r1, [r3, #0]
 8004902:	685b      	ldreq	r3, [r3, #4]
 8004904:	1809      	addeq	r1, r1, r0
 8004906:	6021      	streq	r1, [r4, #0]
 8004908:	e7ed      	b.n	80048e6 <_free_r+0x1e>
 800490a:	461a      	mov	r2, r3
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	b10b      	cbz	r3, 8004914 <_free_r+0x4c>
 8004910:	42a3      	cmp	r3, r4
 8004912:	d9fa      	bls.n	800490a <_free_r+0x42>
 8004914:	6811      	ldr	r1, [r2, #0]
 8004916:	1850      	adds	r0, r2, r1
 8004918:	42a0      	cmp	r0, r4
 800491a:	d10b      	bne.n	8004934 <_free_r+0x6c>
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	4401      	add	r1, r0
 8004920:	1850      	adds	r0, r2, r1
 8004922:	4283      	cmp	r3, r0
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	d1e0      	bne.n	80048ea <_free_r+0x22>
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4408      	add	r0, r1
 800492e:	6010      	str	r0, [r2, #0]
 8004930:	6053      	str	r3, [r2, #4]
 8004932:	e7da      	b.n	80048ea <_free_r+0x22>
 8004934:	d902      	bls.n	800493c <_free_r+0x74>
 8004936:	230c      	movs	r3, #12
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	e7d6      	b.n	80048ea <_free_r+0x22>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	1821      	adds	r1, r4, r0
 8004940:	428b      	cmp	r3, r1
 8004942:	bf01      	itttt	eq
 8004944:	6819      	ldreq	r1, [r3, #0]
 8004946:	685b      	ldreq	r3, [r3, #4]
 8004948:	1809      	addeq	r1, r1, r0
 800494a:	6021      	streq	r1, [r4, #0]
 800494c:	6063      	str	r3, [r4, #4]
 800494e:	6054      	str	r4, [r2, #4]
 8004950:	e7cb      	b.n	80048ea <_free_r+0x22>
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	200015b8 	.word	0x200015b8

08004958 <sbrk_aligned>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4e0f      	ldr	r6, [pc, #60]	@ (8004998 <sbrk_aligned+0x40>)
 800495c:	460c      	mov	r4, r1
 800495e:	6831      	ldr	r1, [r6, #0]
 8004960:	4605      	mov	r5, r0
 8004962:	b911      	cbnz	r1, 800496a <sbrk_aligned+0x12>
 8004964:	f000 fcb4 	bl	80052d0 <_sbrk_r>
 8004968:	6030      	str	r0, [r6, #0]
 800496a:	4621      	mov	r1, r4
 800496c:	4628      	mov	r0, r5
 800496e:	f000 fcaf 	bl	80052d0 <_sbrk_r>
 8004972:	1c43      	adds	r3, r0, #1
 8004974:	d103      	bne.n	800497e <sbrk_aligned+0x26>
 8004976:	f04f 34ff 	mov.w	r4, #4294967295
 800497a:	4620      	mov	r0, r4
 800497c:	bd70      	pop	{r4, r5, r6, pc}
 800497e:	1cc4      	adds	r4, r0, #3
 8004980:	f024 0403 	bic.w	r4, r4, #3
 8004984:	42a0      	cmp	r0, r4
 8004986:	d0f8      	beq.n	800497a <sbrk_aligned+0x22>
 8004988:	1a21      	subs	r1, r4, r0
 800498a:	4628      	mov	r0, r5
 800498c:	f000 fca0 	bl	80052d0 <_sbrk_r>
 8004990:	3001      	adds	r0, #1
 8004992:	d1f2      	bne.n	800497a <sbrk_aligned+0x22>
 8004994:	e7ef      	b.n	8004976 <sbrk_aligned+0x1e>
 8004996:	bf00      	nop
 8004998:	200015b4 	.word	0x200015b4

0800499c <_malloc_r>:
 800499c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a0:	1ccd      	adds	r5, r1, #3
 80049a2:	f025 0503 	bic.w	r5, r5, #3
 80049a6:	3508      	adds	r5, #8
 80049a8:	2d0c      	cmp	r5, #12
 80049aa:	bf38      	it	cc
 80049ac:	250c      	movcc	r5, #12
 80049ae:	2d00      	cmp	r5, #0
 80049b0:	4606      	mov	r6, r0
 80049b2:	db01      	blt.n	80049b8 <_malloc_r+0x1c>
 80049b4:	42a9      	cmp	r1, r5
 80049b6:	d904      	bls.n	80049c2 <_malloc_r+0x26>
 80049b8:	230c      	movs	r3, #12
 80049ba:	6033      	str	r3, [r6, #0]
 80049bc:	2000      	movs	r0, #0
 80049be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a98 <_malloc_r+0xfc>
 80049c6:	f000 f869 	bl	8004a9c <__malloc_lock>
 80049ca:	f8d8 3000 	ldr.w	r3, [r8]
 80049ce:	461c      	mov	r4, r3
 80049d0:	bb44      	cbnz	r4, 8004a24 <_malloc_r+0x88>
 80049d2:	4629      	mov	r1, r5
 80049d4:	4630      	mov	r0, r6
 80049d6:	f7ff ffbf 	bl	8004958 <sbrk_aligned>
 80049da:	1c43      	adds	r3, r0, #1
 80049dc:	4604      	mov	r4, r0
 80049de:	d158      	bne.n	8004a92 <_malloc_r+0xf6>
 80049e0:	f8d8 4000 	ldr.w	r4, [r8]
 80049e4:	4627      	mov	r7, r4
 80049e6:	2f00      	cmp	r7, #0
 80049e8:	d143      	bne.n	8004a72 <_malloc_r+0xd6>
 80049ea:	2c00      	cmp	r4, #0
 80049ec:	d04b      	beq.n	8004a86 <_malloc_r+0xea>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	4639      	mov	r1, r7
 80049f2:	4630      	mov	r0, r6
 80049f4:	eb04 0903 	add.w	r9, r4, r3
 80049f8:	f000 fc6a 	bl	80052d0 <_sbrk_r>
 80049fc:	4581      	cmp	r9, r0
 80049fe:	d142      	bne.n	8004a86 <_malloc_r+0xea>
 8004a00:	6821      	ldr	r1, [r4, #0]
 8004a02:	4630      	mov	r0, r6
 8004a04:	1a6d      	subs	r5, r5, r1
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7ff ffa6 	bl	8004958 <sbrk_aligned>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d03a      	beq.n	8004a86 <_malloc_r+0xea>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	442b      	add	r3, r5
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	f8d8 3000 	ldr.w	r3, [r8]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	bb62      	cbnz	r2, 8004a78 <_malloc_r+0xdc>
 8004a1e:	f8c8 7000 	str.w	r7, [r8]
 8004a22:	e00f      	b.n	8004a44 <_malloc_r+0xa8>
 8004a24:	6822      	ldr	r2, [r4, #0]
 8004a26:	1b52      	subs	r2, r2, r5
 8004a28:	d420      	bmi.n	8004a6c <_malloc_r+0xd0>
 8004a2a:	2a0b      	cmp	r2, #11
 8004a2c:	d917      	bls.n	8004a5e <_malloc_r+0xc2>
 8004a2e:	1961      	adds	r1, r4, r5
 8004a30:	42a3      	cmp	r3, r4
 8004a32:	6025      	str	r5, [r4, #0]
 8004a34:	bf18      	it	ne
 8004a36:	6059      	strne	r1, [r3, #4]
 8004a38:	6863      	ldr	r3, [r4, #4]
 8004a3a:	bf08      	it	eq
 8004a3c:	f8c8 1000 	streq.w	r1, [r8]
 8004a40:	5162      	str	r2, [r4, r5]
 8004a42:	604b      	str	r3, [r1, #4]
 8004a44:	4630      	mov	r0, r6
 8004a46:	f000 f82f 	bl	8004aa8 <__malloc_unlock>
 8004a4a:	f104 000b 	add.w	r0, r4, #11
 8004a4e:	1d23      	adds	r3, r4, #4
 8004a50:	f020 0007 	bic.w	r0, r0, #7
 8004a54:	1ac2      	subs	r2, r0, r3
 8004a56:	bf1c      	itt	ne
 8004a58:	1a1b      	subne	r3, r3, r0
 8004a5a:	50a3      	strne	r3, [r4, r2]
 8004a5c:	e7af      	b.n	80049be <_malloc_r+0x22>
 8004a5e:	6862      	ldr	r2, [r4, #4]
 8004a60:	42a3      	cmp	r3, r4
 8004a62:	bf0c      	ite	eq
 8004a64:	f8c8 2000 	streq.w	r2, [r8]
 8004a68:	605a      	strne	r2, [r3, #4]
 8004a6a:	e7eb      	b.n	8004a44 <_malloc_r+0xa8>
 8004a6c:	4623      	mov	r3, r4
 8004a6e:	6864      	ldr	r4, [r4, #4]
 8004a70:	e7ae      	b.n	80049d0 <_malloc_r+0x34>
 8004a72:	463c      	mov	r4, r7
 8004a74:	687f      	ldr	r7, [r7, #4]
 8004a76:	e7b6      	b.n	80049e6 <_malloc_r+0x4a>
 8004a78:	461a      	mov	r2, r3
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	d1fb      	bne.n	8004a78 <_malloc_r+0xdc>
 8004a80:	2300      	movs	r3, #0
 8004a82:	6053      	str	r3, [r2, #4]
 8004a84:	e7de      	b.n	8004a44 <_malloc_r+0xa8>
 8004a86:	230c      	movs	r3, #12
 8004a88:	4630      	mov	r0, r6
 8004a8a:	6033      	str	r3, [r6, #0]
 8004a8c:	f000 f80c 	bl	8004aa8 <__malloc_unlock>
 8004a90:	e794      	b.n	80049bc <_malloc_r+0x20>
 8004a92:	6005      	str	r5, [r0, #0]
 8004a94:	e7d6      	b.n	8004a44 <_malloc_r+0xa8>
 8004a96:	bf00      	nop
 8004a98:	200015b8 	.word	0x200015b8

08004a9c <__malloc_lock>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	@ (8004aa4 <__malloc_lock+0x8>)
 8004a9e:	f7ff bf02 	b.w	80048a6 <__retarget_lock_acquire_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	200015b0 	.word	0x200015b0

08004aa8 <__malloc_unlock>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	@ (8004ab0 <__malloc_unlock+0x8>)
 8004aaa:	f7ff befd 	b.w	80048a8 <__retarget_lock_release_recursive>
 8004aae:	bf00      	nop
 8004ab0:	200015b0 	.word	0x200015b0

08004ab4 <__sfputc_r>:
 8004ab4:	6893      	ldr	r3, [r2, #8]
 8004ab6:	b410      	push	{r4}
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	6093      	str	r3, [r2, #8]
 8004abe:	da07      	bge.n	8004ad0 <__sfputc_r+0x1c>
 8004ac0:	6994      	ldr	r4, [r2, #24]
 8004ac2:	42a3      	cmp	r3, r4
 8004ac4:	db01      	blt.n	8004aca <__sfputc_r+0x16>
 8004ac6:	290a      	cmp	r1, #10
 8004ac8:	d102      	bne.n	8004ad0 <__sfputc_r+0x1c>
 8004aca:	bc10      	pop	{r4}
 8004acc:	f000 bb6c 	b.w	80051a8 <__swbuf_r>
 8004ad0:	6813      	ldr	r3, [r2, #0]
 8004ad2:	1c58      	adds	r0, r3, #1
 8004ad4:	6010      	str	r0, [r2, #0]
 8004ad6:	7019      	strb	r1, [r3, #0]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	bc10      	pop	{r4}
 8004adc:	4770      	bx	lr

08004ade <__sfputs_r>:
 8004ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	460f      	mov	r7, r1
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	18d5      	adds	r5, r2, r3
 8004ae8:	42ac      	cmp	r4, r5
 8004aea:	d101      	bne.n	8004af0 <__sfputs_r+0x12>
 8004aec:	2000      	movs	r0, #0
 8004aee:	e007      	b.n	8004b00 <__sfputs_r+0x22>
 8004af0:	463a      	mov	r2, r7
 8004af2:	4630      	mov	r0, r6
 8004af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af8:	f7ff ffdc 	bl	8004ab4 <__sfputc_r>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d1f3      	bne.n	8004ae8 <__sfputs_r+0xa>
 8004b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b04 <_vfiprintf_r>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	460d      	mov	r5, r1
 8004b0a:	4614      	mov	r4, r2
 8004b0c:	4698      	mov	r8, r3
 8004b0e:	4606      	mov	r6, r0
 8004b10:	b09d      	sub	sp, #116	@ 0x74
 8004b12:	b118      	cbz	r0, 8004b1c <_vfiprintf_r+0x18>
 8004b14:	6a03      	ldr	r3, [r0, #32]
 8004b16:	b90b      	cbnz	r3, 8004b1c <_vfiprintf_r+0x18>
 8004b18:	f7ff fdc0 	bl	800469c <__sinit>
 8004b1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b1e:	07d9      	lsls	r1, r3, #31
 8004b20:	d405      	bmi.n	8004b2e <_vfiprintf_r+0x2a>
 8004b22:	89ab      	ldrh	r3, [r5, #12]
 8004b24:	059a      	lsls	r2, r3, #22
 8004b26:	d402      	bmi.n	8004b2e <_vfiprintf_r+0x2a>
 8004b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b2a:	f7ff febc 	bl	80048a6 <__retarget_lock_acquire_recursive>
 8004b2e:	89ab      	ldrh	r3, [r5, #12]
 8004b30:	071b      	lsls	r3, r3, #28
 8004b32:	d501      	bpl.n	8004b38 <_vfiprintf_r+0x34>
 8004b34:	692b      	ldr	r3, [r5, #16]
 8004b36:	b99b      	cbnz	r3, 8004b60 <_vfiprintf_r+0x5c>
 8004b38:	4629      	mov	r1, r5
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f000 fb72 	bl	8005224 <__swsetup_r>
 8004b40:	b170      	cbz	r0, 8004b60 <_vfiprintf_r+0x5c>
 8004b42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b44:	07dc      	lsls	r4, r3, #31
 8004b46:	d504      	bpl.n	8004b52 <_vfiprintf_r+0x4e>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	b01d      	add	sp, #116	@ 0x74
 8004b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b52:	89ab      	ldrh	r3, [r5, #12]
 8004b54:	0598      	lsls	r0, r3, #22
 8004b56:	d4f7      	bmi.n	8004b48 <_vfiprintf_r+0x44>
 8004b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b5a:	f7ff fea5 	bl	80048a8 <__retarget_lock_release_recursive>
 8004b5e:	e7f3      	b.n	8004b48 <_vfiprintf_r+0x44>
 8004b60:	2300      	movs	r3, #0
 8004b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b64:	2320      	movs	r3, #32
 8004b66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b6a:	2330      	movs	r3, #48	@ 0x30
 8004b6c:	f04f 0901 	mov.w	r9, #1
 8004b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004d20 <_vfiprintf_r+0x21c>
 8004b78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	469a      	mov	sl, r3
 8004b80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b84:	b10a      	cbz	r2, 8004b8a <_vfiprintf_r+0x86>
 8004b86:	2a25      	cmp	r2, #37	@ 0x25
 8004b88:	d1f9      	bne.n	8004b7e <_vfiprintf_r+0x7a>
 8004b8a:	ebba 0b04 	subs.w	fp, sl, r4
 8004b8e:	d00b      	beq.n	8004ba8 <_vfiprintf_r+0xa4>
 8004b90:	465b      	mov	r3, fp
 8004b92:	4622      	mov	r2, r4
 8004b94:	4629      	mov	r1, r5
 8004b96:	4630      	mov	r0, r6
 8004b98:	f7ff ffa1 	bl	8004ade <__sfputs_r>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	f000 80a7 	beq.w	8004cf0 <_vfiprintf_r+0x1ec>
 8004ba2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ba4:	445a      	add	r2, fp
 8004ba6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 809f 	beq.w	8004cf0 <_vfiprintf_r+0x1ec>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bbc:	f10a 0a01 	add.w	sl, sl, #1
 8004bc0:	9304      	str	r3, [sp, #16]
 8004bc2:	9307      	str	r3, [sp, #28]
 8004bc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bca:	4654      	mov	r4, sl
 8004bcc:	2205      	movs	r2, #5
 8004bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd2:	4853      	ldr	r0, [pc, #332]	@ (8004d20 <_vfiprintf_r+0x21c>)
 8004bd4:	f000 fb8c 	bl	80052f0 <memchr>
 8004bd8:	9a04      	ldr	r2, [sp, #16]
 8004bda:	b9d8      	cbnz	r0, 8004c14 <_vfiprintf_r+0x110>
 8004bdc:	06d1      	lsls	r1, r2, #27
 8004bde:	bf44      	itt	mi
 8004be0:	2320      	movmi	r3, #32
 8004be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004be6:	0713      	lsls	r3, r2, #28
 8004be8:	bf44      	itt	mi
 8004bea:	232b      	movmi	r3, #43	@ 0x2b
 8004bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bf6:	d015      	beq.n	8004c24 <_vfiprintf_r+0x120>
 8004bf8:	4654      	mov	r4, sl
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f04f 0c0a 	mov.w	ip, #10
 8004c00:	9a07      	ldr	r2, [sp, #28]
 8004c02:	4621      	mov	r1, r4
 8004c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c08:	3b30      	subs	r3, #48	@ 0x30
 8004c0a:	2b09      	cmp	r3, #9
 8004c0c:	d94b      	bls.n	8004ca6 <_vfiprintf_r+0x1a2>
 8004c0e:	b1b0      	cbz	r0, 8004c3e <_vfiprintf_r+0x13a>
 8004c10:	9207      	str	r2, [sp, #28]
 8004c12:	e014      	b.n	8004c3e <_vfiprintf_r+0x13a>
 8004c14:	eba0 0308 	sub.w	r3, r0, r8
 8004c18:	fa09 f303 	lsl.w	r3, r9, r3
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	46a2      	mov	sl, r4
 8004c20:	9304      	str	r3, [sp, #16]
 8004c22:	e7d2      	b.n	8004bca <_vfiprintf_r+0xc6>
 8004c24:	9b03      	ldr	r3, [sp, #12]
 8004c26:	1d19      	adds	r1, r3, #4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	9103      	str	r1, [sp, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bfbb      	ittet	lt
 8004c30:	425b      	neglt	r3, r3
 8004c32:	f042 0202 	orrlt.w	r2, r2, #2
 8004c36:	9307      	strge	r3, [sp, #28]
 8004c38:	9307      	strlt	r3, [sp, #28]
 8004c3a:	bfb8      	it	lt
 8004c3c:	9204      	strlt	r2, [sp, #16]
 8004c3e:	7823      	ldrb	r3, [r4, #0]
 8004c40:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c42:	d10a      	bne.n	8004c5a <_vfiprintf_r+0x156>
 8004c44:	7863      	ldrb	r3, [r4, #1]
 8004c46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c48:	d132      	bne.n	8004cb0 <_vfiprintf_r+0x1ac>
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	3402      	adds	r4, #2
 8004c4e:	1d1a      	adds	r2, r3, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	9203      	str	r2, [sp, #12]
 8004c54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c58:	9305      	str	r3, [sp, #20]
 8004c5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004d24 <_vfiprintf_r+0x220>
 8004c5e:	2203      	movs	r2, #3
 8004c60:	4650      	mov	r0, sl
 8004c62:	7821      	ldrb	r1, [r4, #0]
 8004c64:	f000 fb44 	bl	80052f0 <memchr>
 8004c68:	b138      	cbz	r0, 8004c7a <_vfiprintf_r+0x176>
 8004c6a:	2240      	movs	r2, #64	@ 0x40
 8004c6c:	9b04      	ldr	r3, [sp, #16]
 8004c6e:	eba0 000a 	sub.w	r0, r0, sl
 8004c72:	4082      	lsls	r2, r0
 8004c74:	4313      	orrs	r3, r2
 8004c76:	3401      	adds	r4, #1
 8004c78:	9304      	str	r3, [sp, #16]
 8004c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7e:	2206      	movs	r2, #6
 8004c80:	4829      	ldr	r0, [pc, #164]	@ (8004d28 <_vfiprintf_r+0x224>)
 8004c82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c86:	f000 fb33 	bl	80052f0 <memchr>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d03f      	beq.n	8004d0e <_vfiprintf_r+0x20a>
 8004c8e:	4b27      	ldr	r3, [pc, #156]	@ (8004d2c <_vfiprintf_r+0x228>)
 8004c90:	bb1b      	cbnz	r3, 8004cda <_vfiprintf_r+0x1d6>
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	3307      	adds	r3, #7
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	9303      	str	r3, [sp, #12]
 8004c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca0:	443b      	add	r3, r7
 8004ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ca4:	e76a      	b.n	8004b7c <_vfiprintf_r+0x78>
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	2001      	movs	r0, #1
 8004caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cae:	e7a8      	b.n	8004c02 <_vfiprintf_r+0xfe>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f04f 0c0a 	mov.w	ip, #10
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	3401      	adds	r4, #1
 8004cba:	9305      	str	r3, [sp, #20]
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cc2:	3a30      	subs	r2, #48	@ 0x30
 8004cc4:	2a09      	cmp	r2, #9
 8004cc6:	d903      	bls.n	8004cd0 <_vfiprintf_r+0x1cc>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0c6      	beq.n	8004c5a <_vfiprintf_r+0x156>
 8004ccc:	9105      	str	r1, [sp, #20]
 8004cce:	e7c4      	b.n	8004c5a <_vfiprintf_r+0x156>
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd8:	e7f0      	b.n	8004cbc <_vfiprintf_r+0x1b8>
 8004cda:	ab03      	add	r3, sp, #12
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	462a      	mov	r2, r5
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <_vfiprintf_r+0x22c>)
 8004ce4:	a904      	add	r1, sp, #16
 8004ce6:	f3af 8000 	nop.w
 8004cea:	4607      	mov	r7, r0
 8004cec:	1c78      	adds	r0, r7, #1
 8004cee:	d1d6      	bne.n	8004c9e <_vfiprintf_r+0x19a>
 8004cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cf2:	07d9      	lsls	r1, r3, #31
 8004cf4:	d405      	bmi.n	8004d02 <_vfiprintf_r+0x1fe>
 8004cf6:	89ab      	ldrh	r3, [r5, #12]
 8004cf8:	059a      	lsls	r2, r3, #22
 8004cfa:	d402      	bmi.n	8004d02 <_vfiprintf_r+0x1fe>
 8004cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cfe:	f7ff fdd3 	bl	80048a8 <__retarget_lock_release_recursive>
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	065b      	lsls	r3, r3, #25
 8004d06:	f53f af1f 	bmi.w	8004b48 <_vfiprintf_r+0x44>
 8004d0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d0c:	e71e      	b.n	8004b4c <_vfiprintf_r+0x48>
 8004d0e:	ab03      	add	r3, sp, #12
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	462a      	mov	r2, r5
 8004d14:	4630      	mov	r0, r6
 8004d16:	4b06      	ldr	r3, [pc, #24]	@ (8004d30 <_vfiprintf_r+0x22c>)
 8004d18:	a904      	add	r1, sp, #16
 8004d1a:	f000 f87d 	bl	8004e18 <_printf_i>
 8004d1e:	e7e4      	b.n	8004cea <_vfiprintf_r+0x1e6>
 8004d20:	08005466 	.word	0x08005466
 8004d24:	0800546c 	.word	0x0800546c
 8004d28:	08005470 	.word	0x08005470
 8004d2c:	00000000 	.word	0x00000000
 8004d30:	08004adf 	.word	0x08004adf

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4698      	mov	r8, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	4607      	mov	r7, r0
 8004d42:	4293      	cmp	r3, r2
 8004d44:	bfb8      	it	lt
 8004d46:	4613      	movlt	r3, r2
 8004d48:	6033      	str	r3, [r6, #0]
 8004d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d4e:	460c      	mov	r4, r1
 8004d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc2b      	bgt.n	8004dd4 <_printf_common+0xa0>
 8004d7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	3b00      	subs	r3, #0
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d430      	bmi.n	8004dee <_printf_common+0xba>
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d94:	47c8      	blx	r9
 8004d96:	3001      	adds	r0, #1
 8004d98:	d023      	beq.n	8004de2 <_printf_common+0xae>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	f003 0306 	and.w	r3, r3, #6
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf14      	ite	ne
 8004da6:	2500      	movne	r5, #0
 8004da8:	6833      	ldreq	r3, [r6, #0]
 8004daa:	f04f 0600 	mov.w	r6, #0
 8004dae:	bf08      	it	eq
 8004db0:	68e5      	ldreq	r5, [r4, #12]
 8004db2:	f104 041a 	add.w	r4, r4, #26
 8004db6:	bf08      	it	eq
 8004db8:	1aed      	subeq	r5, r5, r3
 8004dba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dbe:	bf08      	it	eq
 8004dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bfc4      	itt	gt
 8004dc8:	1a9b      	subgt	r3, r3, r2
 8004dca:	18ed      	addgt	r5, r5, r3
 8004dcc:	42b5      	cmp	r5, r6
 8004dce:	d11a      	bne.n	8004e06 <_printf_common+0xd2>
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	e008      	b.n	8004de6 <_printf_common+0xb2>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4652      	mov	r2, sl
 8004dd8:	4641      	mov	r1, r8
 8004dda:	4638      	mov	r0, r7
 8004ddc:	47c8      	blx	r9
 8004dde:	3001      	adds	r0, #1
 8004de0:	d103      	bne.n	8004dea <_printf_common+0xb6>
 8004de2:	f04f 30ff 	mov.w	r0, #4294967295
 8004de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dea:	3501      	adds	r5, #1
 8004dec:	e7c1      	b.n	8004d72 <_printf_common+0x3e>
 8004dee:	2030      	movs	r0, #48	@ 0x30
 8004df0:	18e1      	adds	r1, r4, r3
 8004df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dfc:	4422      	add	r2, r4
 8004dfe:	3302      	adds	r3, #2
 8004e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e04:	e7c2      	b.n	8004d8c <_printf_common+0x58>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	47c8      	blx	r9
 8004e10:	3001      	adds	r0, #1
 8004e12:	d0e6      	beq.n	8004de2 <_printf_common+0xae>
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7d9      	b.n	8004dcc <_printf_common+0x98>

08004e18 <_printf_i>:
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	7e0f      	ldrb	r7, [r1, #24]
 8004e1e:	4691      	mov	r9, r2
 8004e20:	2f78      	cmp	r7, #120	@ 0x78
 8004e22:	4680      	mov	r8, r0
 8004e24:	460c      	mov	r4, r1
 8004e26:	469a      	mov	sl, r3
 8004e28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e2e:	d807      	bhi.n	8004e40 <_printf_i+0x28>
 8004e30:	2f62      	cmp	r7, #98	@ 0x62
 8004e32:	d80a      	bhi.n	8004e4a <_printf_i+0x32>
 8004e34:	2f00      	cmp	r7, #0
 8004e36:	f000 80d3 	beq.w	8004fe0 <_printf_i+0x1c8>
 8004e3a:	2f58      	cmp	r7, #88	@ 0x58
 8004e3c:	f000 80ba 	beq.w	8004fb4 <_printf_i+0x19c>
 8004e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e48:	e03a      	b.n	8004ec0 <_printf_i+0xa8>
 8004e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e4e:	2b15      	cmp	r3, #21
 8004e50:	d8f6      	bhi.n	8004e40 <_printf_i+0x28>
 8004e52:	a101      	add	r1, pc, #4	@ (adr r1, 8004e58 <_printf_i+0x40>)
 8004e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e58:	08004eb1 	.word	0x08004eb1
 8004e5c:	08004ec5 	.word	0x08004ec5
 8004e60:	08004e41 	.word	0x08004e41
 8004e64:	08004e41 	.word	0x08004e41
 8004e68:	08004e41 	.word	0x08004e41
 8004e6c:	08004e41 	.word	0x08004e41
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004e41 	.word	0x08004e41
 8004e78:	08004e41 	.word	0x08004e41
 8004e7c:	08004e41 	.word	0x08004e41
 8004e80:	08004e41 	.word	0x08004e41
 8004e84:	08004fc7 	.word	0x08004fc7
 8004e88:	08004eef 	.word	0x08004eef
 8004e8c:	08004f81 	.word	0x08004f81
 8004e90:	08004e41 	.word	0x08004e41
 8004e94:	08004e41 	.word	0x08004e41
 8004e98:	08004fe9 	.word	0x08004fe9
 8004e9c:	08004e41 	.word	0x08004e41
 8004ea0:	08004eef 	.word	0x08004eef
 8004ea4:	08004e41 	.word	0x08004e41
 8004ea8:	08004e41 	.word	0x08004e41
 8004eac:	08004f89 	.word	0x08004f89
 8004eb0:	6833      	ldr	r3, [r6, #0]
 8004eb2:	1d1a      	adds	r2, r3, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6032      	str	r2, [r6, #0]
 8004eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e09e      	b.n	8005002 <_printf_i+0x1ea>
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	6820      	ldr	r0, [r4, #0]
 8004ec8:	1d19      	adds	r1, r3, #4
 8004eca:	6031      	str	r1, [r6, #0]
 8004ecc:	0606      	lsls	r6, r0, #24
 8004ece:	d501      	bpl.n	8004ed4 <_printf_i+0xbc>
 8004ed0:	681d      	ldr	r5, [r3, #0]
 8004ed2:	e003      	b.n	8004edc <_printf_i+0xc4>
 8004ed4:	0645      	lsls	r5, r0, #25
 8004ed6:	d5fb      	bpl.n	8004ed0 <_printf_i+0xb8>
 8004ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004edc:	2d00      	cmp	r5, #0
 8004ede:	da03      	bge.n	8004ee8 <_printf_i+0xd0>
 8004ee0:	232d      	movs	r3, #45	@ 0x2d
 8004ee2:	426d      	negs	r5, r5
 8004ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ee8:	230a      	movs	r3, #10
 8004eea:	4859      	ldr	r0, [pc, #356]	@ (8005050 <_printf_i+0x238>)
 8004eec:	e011      	b.n	8004f12 <_printf_i+0xfa>
 8004eee:	6821      	ldr	r1, [r4, #0]
 8004ef0:	6833      	ldr	r3, [r6, #0]
 8004ef2:	0608      	lsls	r0, r1, #24
 8004ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ef8:	d402      	bmi.n	8004f00 <_printf_i+0xe8>
 8004efa:	0649      	lsls	r1, r1, #25
 8004efc:	bf48      	it	mi
 8004efe:	b2ad      	uxthmi	r5, r5
 8004f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f02:	6033      	str	r3, [r6, #0]
 8004f04:	bf14      	ite	ne
 8004f06:	230a      	movne	r3, #10
 8004f08:	2308      	moveq	r3, #8
 8004f0a:	4851      	ldr	r0, [pc, #324]	@ (8005050 <_printf_i+0x238>)
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f12:	6866      	ldr	r6, [r4, #4]
 8004f14:	2e00      	cmp	r6, #0
 8004f16:	bfa8      	it	ge
 8004f18:	6821      	ldrge	r1, [r4, #0]
 8004f1a:	60a6      	str	r6, [r4, #8]
 8004f1c:	bfa4      	itt	ge
 8004f1e:	f021 0104 	bicge.w	r1, r1, #4
 8004f22:	6021      	strge	r1, [r4, #0]
 8004f24:	b90d      	cbnz	r5, 8004f2a <_printf_i+0x112>
 8004f26:	2e00      	cmp	r6, #0
 8004f28:	d04b      	beq.n	8004fc2 <_printf_i+0x1aa>
 8004f2a:	4616      	mov	r6, r2
 8004f2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f30:	fb03 5711 	mls	r7, r3, r1, r5
 8004f34:	5dc7      	ldrb	r7, [r0, r7]
 8004f36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f3a:	462f      	mov	r7, r5
 8004f3c:	42bb      	cmp	r3, r7
 8004f3e:	460d      	mov	r5, r1
 8004f40:	d9f4      	bls.n	8004f2c <_printf_i+0x114>
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d10b      	bne.n	8004f5e <_printf_i+0x146>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	07df      	lsls	r7, r3, #31
 8004f4a:	d508      	bpl.n	8004f5e <_printf_i+0x146>
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	6861      	ldr	r1, [r4, #4]
 8004f50:	4299      	cmp	r1, r3
 8004f52:	bfde      	ittt	le
 8004f54:	2330      	movle	r3, #48	@ 0x30
 8004f56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f5e:	1b92      	subs	r2, r2, r6
 8004f60:	6122      	str	r2, [r4, #16]
 8004f62:	464b      	mov	r3, r9
 8004f64:	4621      	mov	r1, r4
 8004f66:	4640      	mov	r0, r8
 8004f68:	f8cd a000 	str.w	sl, [sp]
 8004f6c:	aa03      	add	r2, sp, #12
 8004f6e:	f7ff fee1 	bl	8004d34 <_printf_common>
 8004f72:	3001      	adds	r0, #1
 8004f74:	d14a      	bne.n	800500c <_printf_i+0x1f4>
 8004f76:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7a:	b004      	add	sp, #16
 8004f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f043 0320 	orr.w	r3, r3, #32
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	2778      	movs	r7, #120	@ 0x78
 8004f8a:	4832      	ldr	r0, [pc, #200]	@ (8005054 <_printf_i+0x23c>)
 8004f8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	6831      	ldr	r1, [r6, #0]
 8004f94:	061f      	lsls	r7, r3, #24
 8004f96:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f9a:	d402      	bmi.n	8004fa2 <_printf_i+0x18a>
 8004f9c:	065f      	lsls	r7, r3, #25
 8004f9e:	bf48      	it	mi
 8004fa0:	b2ad      	uxthmi	r5, r5
 8004fa2:	6031      	str	r1, [r6, #0]
 8004fa4:	07d9      	lsls	r1, r3, #31
 8004fa6:	bf44      	itt	mi
 8004fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8004fac:	6023      	strmi	r3, [r4, #0]
 8004fae:	b11d      	cbz	r5, 8004fb8 <_printf_i+0x1a0>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	e7ab      	b.n	8004f0c <_printf_i+0xf4>
 8004fb4:	4826      	ldr	r0, [pc, #152]	@ (8005050 <_printf_i+0x238>)
 8004fb6:	e7e9      	b.n	8004f8c <_printf_i+0x174>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	f023 0320 	bic.w	r3, r3, #32
 8004fbe:	6023      	str	r3, [r4, #0]
 8004fc0:	e7f6      	b.n	8004fb0 <_printf_i+0x198>
 8004fc2:	4616      	mov	r6, r2
 8004fc4:	e7bd      	b.n	8004f42 <_printf_i+0x12a>
 8004fc6:	6833      	ldr	r3, [r6, #0]
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	1d18      	adds	r0, r3, #4
 8004fcc:	6961      	ldr	r1, [r4, #20]
 8004fce:	6030      	str	r0, [r6, #0]
 8004fd0:	062e      	lsls	r6, r5, #24
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	d501      	bpl.n	8004fda <_printf_i+0x1c2>
 8004fd6:	6019      	str	r1, [r3, #0]
 8004fd8:	e002      	b.n	8004fe0 <_printf_i+0x1c8>
 8004fda:	0668      	lsls	r0, r5, #25
 8004fdc:	d5fb      	bpl.n	8004fd6 <_printf_i+0x1be>
 8004fde:	8019      	strh	r1, [r3, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4616      	mov	r6, r2
 8004fe4:	6123      	str	r3, [r4, #16]
 8004fe6:	e7bc      	b.n	8004f62 <_printf_i+0x14a>
 8004fe8:	6833      	ldr	r3, [r6, #0]
 8004fea:	2100      	movs	r1, #0
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	6032      	str	r2, [r6, #0]
 8004ff0:	681e      	ldr	r6, [r3, #0]
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f000 f97b 	bl	80052f0 <memchr>
 8004ffa:	b108      	cbz	r0, 8005000 <_printf_i+0x1e8>
 8004ffc:	1b80      	subs	r0, r0, r6
 8004ffe:	6060      	str	r0, [r4, #4]
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	2300      	movs	r3, #0
 8005006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800500a:	e7aa      	b.n	8004f62 <_printf_i+0x14a>
 800500c:	4632      	mov	r2, r6
 800500e:	4649      	mov	r1, r9
 8005010:	4640      	mov	r0, r8
 8005012:	6923      	ldr	r3, [r4, #16]
 8005014:	47d0      	blx	sl
 8005016:	3001      	adds	r0, #1
 8005018:	d0ad      	beq.n	8004f76 <_printf_i+0x15e>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	079b      	lsls	r3, r3, #30
 800501e:	d413      	bmi.n	8005048 <_printf_i+0x230>
 8005020:	68e0      	ldr	r0, [r4, #12]
 8005022:	9b03      	ldr	r3, [sp, #12]
 8005024:	4298      	cmp	r0, r3
 8005026:	bfb8      	it	lt
 8005028:	4618      	movlt	r0, r3
 800502a:	e7a6      	b.n	8004f7a <_printf_i+0x162>
 800502c:	2301      	movs	r3, #1
 800502e:	4632      	mov	r2, r6
 8005030:	4649      	mov	r1, r9
 8005032:	4640      	mov	r0, r8
 8005034:	47d0      	blx	sl
 8005036:	3001      	adds	r0, #1
 8005038:	d09d      	beq.n	8004f76 <_printf_i+0x15e>
 800503a:	3501      	adds	r5, #1
 800503c:	68e3      	ldr	r3, [r4, #12]
 800503e:	9903      	ldr	r1, [sp, #12]
 8005040:	1a5b      	subs	r3, r3, r1
 8005042:	42ab      	cmp	r3, r5
 8005044:	dcf2      	bgt.n	800502c <_printf_i+0x214>
 8005046:	e7eb      	b.n	8005020 <_printf_i+0x208>
 8005048:	2500      	movs	r5, #0
 800504a:	f104 0619 	add.w	r6, r4, #25
 800504e:	e7f5      	b.n	800503c <_printf_i+0x224>
 8005050:	08005477 	.word	0x08005477
 8005054:	08005488 	.word	0x08005488

08005058 <__sflush_r>:
 8005058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	0716      	lsls	r6, r2, #28
 8005060:	4605      	mov	r5, r0
 8005062:	460c      	mov	r4, r1
 8005064:	d454      	bmi.n	8005110 <__sflush_r+0xb8>
 8005066:	684b      	ldr	r3, [r1, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	dc02      	bgt.n	8005072 <__sflush_r+0x1a>
 800506c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	dd48      	ble.n	8005104 <__sflush_r+0xac>
 8005072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005074:	2e00      	cmp	r6, #0
 8005076:	d045      	beq.n	8005104 <__sflush_r+0xac>
 8005078:	2300      	movs	r3, #0
 800507a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800507e:	682f      	ldr	r7, [r5, #0]
 8005080:	6a21      	ldr	r1, [r4, #32]
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	d030      	beq.n	80050e8 <__sflush_r+0x90>
 8005086:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	0759      	lsls	r1, r3, #29
 800508c:	d505      	bpl.n	800509a <__sflush_r+0x42>
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	1ad2      	subs	r2, r2, r3
 8005092:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005094:	b10b      	cbz	r3, 800509a <__sflush_r+0x42>
 8005096:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005098:	1ad2      	subs	r2, r2, r3
 800509a:	2300      	movs	r3, #0
 800509c:	4628      	mov	r0, r5
 800509e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050a0:	6a21      	ldr	r1, [r4, #32]
 80050a2:	47b0      	blx	r6
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	d106      	bne.n	80050b8 <__sflush_r+0x60>
 80050aa:	6829      	ldr	r1, [r5, #0]
 80050ac:	291d      	cmp	r1, #29
 80050ae:	d82b      	bhi.n	8005108 <__sflush_r+0xb0>
 80050b0:	4a28      	ldr	r2, [pc, #160]	@ (8005154 <__sflush_r+0xfc>)
 80050b2:	410a      	asrs	r2, r1
 80050b4:	07d6      	lsls	r6, r2, #31
 80050b6:	d427      	bmi.n	8005108 <__sflush_r+0xb0>
 80050b8:	2200      	movs	r2, #0
 80050ba:	6062      	str	r2, [r4, #4]
 80050bc:	6922      	ldr	r2, [r4, #16]
 80050be:	04d9      	lsls	r1, r3, #19
 80050c0:	6022      	str	r2, [r4, #0]
 80050c2:	d504      	bpl.n	80050ce <__sflush_r+0x76>
 80050c4:	1c42      	adds	r2, r0, #1
 80050c6:	d101      	bne.n	80050cc <__sflush_r+0x74>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b903      	cbnz	r3, 80050ce <__sflush_r+0x76>
 80050cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80050ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050d0:	602f      	str	r7, [r5, #0]
 80050d2:	b1b9      	cbz	r1, 8005104 <__sflush_r+0xac>
 80050d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050d8:	4299      	cmp	r1, r3
 80050da:	d002      	beq.n	80050e2 <__sflush_r+0x8a>
 80050dc:	4628      	mov	r0, r5
 80050de:	f7ff fbf3 	bl	80048c8 <_free_r>
 80050e2:	2300      	movs	r3, #0
 80050e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80050e6:	e00d      	b.n	8005104 <__sflush_r+0xac>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b0      	blx	r6
 80050ee:	4602      	mov	r2, r0
 80050f0:	1c50      	adds	r0, r2, #1
 80050f2:	d1c9      	bne.n	8005088 <__sflush_r+0x30>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0c6      	beq.n	8005088 <__sflush_r+0x30>
 80050fa:	2b1d      	cmp	r3, #29
 80050fc:	d001      	beq.n	8005102 <__sflush_r+0xaa>
 80050fe:	2b16      	cmp	r3, #22
 8005100:	d11d      	bne.n	800513e <__sflush_r+0xe6>
 8005102:	602f      	str	r7, [r5, #0]
 8005104:	2000      	movs	r0, #0
 8005106:	e021      	b.n	800514c <__sflush_r+0xf4>
 8005108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800510c:	b21b      	sxth	r3, r3
 800510e:	e01a      	b.n	8005146 <__sflush_r+0xee>
 8005110:	690f      	ldr	r7, [r1, #16]
 8005112:	2f00      	cmp	r7, #0
 8005114:	d0f6      	beq.n	8005104 <__sflush_r+0xac>
 8005116:	0793      	lsls	r3, r2, #30
 8005118:	bf18      	it	ne
 800511a:	2300      	movne	r3, #0
 800511c:	680e      	ldr	r6, [r1, #0]
 800511e:	bf08      	it	eq
 8005120:	694b      	ldreq	r3, [r1, #20]
 8005122:	1bf6      	subs	r6, r6, r7
 8005124:	600f      	str	r7, [r1, #0]
 8005126:	608b      	str	r3, [r1, #8]
 8005128:	2e00      	cmp	r6, #0
 800512a:	ddeb      	ble.n	8005104 <__sflush_r+0xac>
 800512c:	4633      	mov	r3, r6
 800512e:	463a      	mov	r2, r7
 8005130:	4628      	mov	r0, r5
 8005132:	6a21      	ldr	r1, [r4, #32]
 8005134:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005138:	47e0      	blx	ip
 800513a:	2800      	cmp	r0, #0
 800513c:	dc07      	bgt.n	800514e <__sflush_r+0xf6>
 800513e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005146:	f04f 30ff 	mov.w	r0, #4294967295
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800514e:	4407      	add	r7, r0
 8005150:	1a36      	subs	r6, r6, r0
 8005152:	e7e9      	b.n	8005128 <__sflush_r+0xd0>
 8005154:	dfbffffe 	.word	0xdfbffffe

08005158 <_fflush_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	690b      	ldr	r3, [r1, #16]
 800515c:	4605      	mov	r5, r0
 800515e:	460c      	mov	r4, r1
 8005160:	b913      	cbnz	r3, 8005168 <_fflush_r+0x10>
 8005162:	2500      	movs	r5, #0
 8005164:	4628      	mov	r0, r5
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	b118      	cbz	r0, 8005172 <_fflush_r+0x1a>
 800516a:	6a03      	ldr	r3, [r0, #32]
 800516c:	b90b      	cbnz	r3, 8005172 <_fflush_r+0x1a>
 800516e:	f7ff fa95 	bl	800469c <__sinit>
 8005172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f3      	beq.n	8005162 <_fflush_r+0xa>
 800517a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800517c:	07d0      	lsls	r0, r2, #31
 800517e:	d404      	bmi.n	800518a <_fflush_r+0x32>
 8005180:	0599      	lsls	r1, r3, #22
 8005182:	d402      	bmi.n	800518a <_fflush_r+0x32>
 8005184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005186:	f7ff fb8e 	bl	80048a6 <__retarget_lock_acquire_recursive>
 800518a:	4628      	mov	r0, r5
 800518c:	4621      	mov	r1, r4
 800518e:	f7ff ff63 	bl	8005058 <__sflush_r>
 8005192:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005194:	4605      	mov	r5, r0
 8005196:	07da      	lsls	r2, r3, #31
 8005198:	d4e4      	bmi.n	8005164 <_fflush_r+0xc>
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	059b      	lsls	r3, r3, #22
 800519e:	d4e1      	bmi.n	8005164 <_fflush_r+0xc>
 80051a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051a2:	f7ff fb81 	bl	80048a8 <__retarget_lock_release_recursive>
 80051a6:	e7dd      	b.n	8005164 <_fflush_r+0xc>

080051a8 <__swbuf_r>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	460e      	mov	r6, r1
 80051ac:	4614      	mov	r4, r2
 80051ae:	4605      	mov	r5, r0
 80051b0:	b118      	cbz	r0, 80051ba <__swbuf_r+0x12>
 80051b2:	6a03      	ldr	r3, [r0, #32]
 80051b4:	b90b      	cbnz	r3, 80051ba <__swbuf_r+0x12>
 80051b6:	f7ff fa71 	bl	800469c <__sinit>
 80051ba:	69a3      	ldr	r3, [r4, #24]
 80051bc:	60a3      	str	r3, [r4, #8]
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	071a      	lsls	r2, r3, #28
 80051c2:	d501      	bpl.n	80051c8 <__swbuf_r+0x20>
 80051c4:	6923      	ldr	r3, [r4, #16]
 80051c6:	b943      	cbnz	r3, 80051da <__swbuf_r+0x32>
 80051c8:	4621      	mov	r1, r4
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 f82a 	bl	8005224 <__swsetup_r>
 80051d0:	b118      	cbz	r0, 80051da <__swbuf_r+0x32>
 80051d2:	f04f 37ff 	mov.w	r7, #4294967295
 80051d6:	4638      	mov	r0, r7
 80051d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	6922      	ldr	r2, [r4, #16]
 80051de:	b2f6      	uxtb	r6, r6
 80051e0:	1a98      	subs	r0, r3, r2
 80051e2:	6963      	ldr	r3, [r4, #20]
 80051e4:	4637      	mov	r7, r6
 80051e6:	4283      	cmp	r3, r0
 80051e8:	dc05      	bgt.n	80051f6 <__swbuf_r+0x4e>
 80051ea:	4621      	mov	r1, r4
 80051ec:	4628      	mov	r0, r5
 80051ee:	f7ff ffb3 	bl	8005158 <_fflush_r>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d1ed      	bne.n	80051d2 <__swbuf_r+0x2a>
 80051f6:	68a3      	ldr	r3, [r4, #8]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	60a3      	str	r3, [r4, #8]
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	6022      	str	r2, [r4, #0]
 8005202:	701e      	strb	r6, [r3, #0]
 8005204:	6962      	ldr	r2, [r4, #20]
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	429a      	cmp	r2, r3
 800520a:	d004      	beq.n	8005216 <__swbuf_r+0x6e>
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	07db      	lsls	r3, r3, #31
 8005210:	d5e1      	bpl.n	80051d6 <__swbuf_r+0x2e>
 8005212:	2e0a      	cmp	r6, #10
 8005214:	d1df      	bne.n	80051d6 <__swbuf_r+0x2e>
 8005216:	4621      	mov	r1, r4
 8005218:	4628      	mov	r0, r5
 800521a:	f7ff ff9d 	bl	8005158 <_fflush_r>
 800521e:	2800      	cmp	r0, #0
 8005220:	d0d9      	beq.n	80051d6 <__swbuf_r+0x2e>
 8005222:	e7d6      	b.n	80051d2 <__swbuf_r+0x2a>

08005224 <__swsetup_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4b29      	ldr	r3, [pc, #164]	@ (80052cc <__swsetup_r+0xa8>)
 8005228:	4605      	mov	r5, r0
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	460c      	mov	r4, r1
 800522e:	b118      	cbz	r0, 8005238 <__swsetup_r+0x14>
 8005230:	6a03      	ldr	r3, [r0, #32]
 8005232:	b90b      	cbnz	r3, 8005238 <__swsetup_r+0x14>
 8005234:	f7ff fa32 	bl	800469c <__sinit>
 8005238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523c:	0719      	lsls	r1, r3, #28
 800523e:	d422      	bmi.n	8005286 <__swsetup_r+0x62>
 8005240:	06da      	lsls	r2, r3, #27
 8005242:	d407      	bmi.n	8005254 <__swsetup_r+0x30>
 8005244:	2209      	movs	r2, #9
 8005246:	602a      	str	r2, [r5, #0]
 8005248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800524c:	f04f 30ff 	mov.w	r0, #4294967295
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	e033      	b.n	80052bc <__swsetup_r+0x98>
 8005254:	0758      	lsls	r0, r3, #29
 8005256:	d512      	bpl.n	800527e <__swsetup_r+0x5a>
 8005258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800525a:	b141      	cbz	r1, 800526e <__swsetup_r+0x4a>
 800525c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005260:	4299      	cmp	r1, r3
 8005262:	d002      	beq.n	800526a <__swsetup_r+0x46>
 8005264:	4628      	mov	r0, r5
 8005266:	f7ff fb2f 	bl	80048c8 <_free_r>
 800526a:	2300      	movs	r3, #0
 800526c:	6363      	str	r3, [r4, #52]	@ 0x34
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005274:	81a3      	strh	r3, [r4, #12]
 8005276:	2300      	movs	r3, #0
 8005278:	6063      	str	r3, [r4, #4]
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	f043 0308 	orr.w	r3, r3, #8
 8005284:	81a3      	strh	r3, [r4, #12]
 8005286:	6923      	ldr	r3, [r4, #16]
 8005288:	b94b      	cbnz	r3, 800529e <__swsetup_r+0x7a>
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005294:	d003      	beq.n	800529e <__swsetup_r+0x7a>
 8005296:	4621      	mov	r1, r4
 8005298:	4628      	mov	r0, r5
 800529a:	f000 f85c 	bl	8005356 <__smakebuf_r>
 800529e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a2:	f013 0201 	ands.w	r2, r3, #1
 80052a6:	d00a      	beq.n	80052be <__swsetup_r+0x9a>
 80052a8:	2200      	movs	r2, #0
 80052aa:	60a2      	str	r2, [r4, #8]
 80052ac:	6962      	ldr	r2, [r4, #20]
 80052ae:	4252      	negs	r2, r2
 80052b0:	61a2      	str	r2, [r4, #24]
 80052b2:	6922      	ldr	r2, [r4, #16]
 80052b4:	b942      	cbnz	r2, 80052c8 <__swsetup_r+0xa4>
 80052b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80052ba:	d1c5      	bne.n	8005248 <__swsetup_r+0x24>
 80052bc:	bd38      	pop	{r3, r4, r5, pc}
 80052be:	0799      	lsls	r1, r3, #30
 80052c0:	bf58      	it	pl
 80052c2:	6962      	ldrpl	r2, [r4, #20]
 80052c4:	60a2      	str	r2, [r4, #8]
 80052c6:	e7f4      	b.n	80052b2 <__swsetup_r+0x8e>
 80052c8:	2000      	movs	r0, #0
 80052ca:	e7f7      	b.n	80052bc <__swsetup_r+0x98>
 80052cc:	20000218 	.word	0x20000218

080052d0 <_sbrk_r>:
 80052d0:	b538      	push	{r3, r4, r5, lr}
 80052d2:	2300      	movs	r3, #0
 80052d4:	4d05      	ldr	r5, [pc, #20]	@ (80052ec <_sbrk_r+0x1c>)
 80052d6:	4604      	mov	r4, r0
 80052d8:	4608      	mov	r0, r1
 80052da:	602b      	str	r3, [r5, #0]
 80052dc:	f7fb fb6e 	bl	80009bc <_sbrk>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_sbrk_r+0x1a>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_sbrk_r+0x1a>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	200015ac 	.word	0x200015ac

080052f0 <memchr>:
 80052f0:	4603      	mov	r3, r0
 80052f2:	b510      	push	{r4, lr}
 80052f4:	b2c9      	uxtb	r1, r1
 80052f6:	4402      	add	r2, r0
 80052f8:	4293      	cmp	r3, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	d101      	bne.n	8005302 <memchr+0x12>
 80052fe:	2000      	movs	r0, #0
 8005300:	e003      	b.n	800530a <memchr+0x1a>
 8005302:	7804      	ldrb	r4, [r0, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	428c      	cmp	r4, r1
 8005308:	d1f6      	bne.n	80052f8 <memchr+0x8>
 800530a:	bd10      	pop	{r4, pc}

0800530c <__swhatbuf_r>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	460c      	mov	r4, r1
 8005310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005314:	4615      	mov	r5, r2
 8005316:	2900      	cmp	r1, #0
 8005318:	461e      	mov	r6, r3
 800531a:	b096      	sub	sp, #88	@ 0x58
 800531c:	da0c      	bge.n	8005338 <__swhatbuf_r+0x2c>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	2100      	movs	r1, #0
 8005322:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005326:	bf14      	ite	ne
 8005328:	2340      	movne	r3, #64	@ 0x40
 800532a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800532e:	2000      	movs	r0, #0
 8005330:	6031      	str	r1, [r6, #0]
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	b016      	add	sp, #88	@ 0x58
 8005336:	bd70      	pop	{r4, r5, r6, pc}
 8005338:	466a      	mov	r2, sp
 800533a:	f000 f849 	bl	80053d0 <_fstat_r>
 800533e:	2800      	cmp	r0, #0
 8005340:	dbed      	blt.n	800531e <__swhatbuf_r+0x12>
 8005342:	9901      	ldr	r1, [sp, #4]
 8005344:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005348:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800534c:	4259      	negs	r1, r3
 800534e:	4159      	adcs	r1, r3
 8005350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005354:	e7eb      	b.n	800532e <__swhatbuf_r+0x22>

08005356 <__smakebuf_r>:
 8005356:	898b      	ldrh	r3, [r1, #12]
 8005358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800535a:	079d      	lsls	r5, r3, #30
 800535c:	4606      	mov	r6, r0
 800535e:	460c      	mov	r4, r1
 8005360:	d507      	bpl.n	8005372 <__smakebuf_r+0x1c>
 8005362:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	6123      	str	r3, [r4, #16]
 800536a:	2301      	movs	r3, #1
 800536c:	6163      	str	r3, [r4, #20]
 800536e:	b003      	add	sp, #12
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005372:	466a      	mov	r2, sp
 8005374:	ab01      	add	r3, sp, #4
 8005376:	f7ff ffc9 	bl	800530c <__swhatbuf_r>
 800537a:	9f00      	ldr	r7, [sp, #0]
 800537c:	4605      	mov	r5, r0
 800537e:	4639      	mov	r1, r7
 8005380:	4630      	mov	r0, r6
 8005382:	f7ff fb0b 	bl	800499c <_malloc_r>
 8005386:	b948      	cbnz	r0, 800539c <__smakebuf_r+0x46>
 8005388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538c:	059a      	lsls	r2, r3, #22
 800538e:	d4ee      	bmi.n	800536e <__smakebuf_r+0x18>
 8005390:	f023 0303 	bic.w	r3, r3, #3
 8005394:	f043 0302 	orr.w	r3, r3, #2
 8005398:	81a3      	strh	r3, [r4, #12]
 800539a:	e7e2      	b.n	8005362 <__smakebuf_r+0xc>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	9b01      	ldr	r3, [sp, #4]
 80053aa:	6020      	str	r0, [r4, #0]
 80053ac:	b15b      	cbz	r3, 80053c6 <__smakebuf_r+0x70>
 80053ae:	4630      	mov	r0, r6
 80053b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053b4:	f000 f81e 	bl	80053f4 <_isatty_r>
 80053b8:	b128      	cbz	r0, 80053c6 <__smakebuf_r+0x70>
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	f023 0303 	bic.w	r3, r3, #3
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	81a3      	strh	r3, [r4, #12]
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	431d      	orrs	r5, r3
 80053ca:	81a5      	strh	r5, [r4, #12]
 80053cc:	e7cf      	b.n	800536e <__smakebuf_r+0x18>
	...

080053d0 <_fstat_r>:
 80053d0:	b538      	push	{r3, r4, r5, lr}
 80053d2:	2300      	movs	r3, #0
 80053d4:	4d06      	ldr	r5, [pc, #24]	@ (80053f0 <_fstat_r+0x20>)
 80053d6:	4604      	mov	r4, r0
 80053d8:	4608      	mov	r0, r1
 80053da:	4611      	mov	r1, r2
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	f7fb fac7 	bl	8000970 <_fstat>
 80053e2:	1c43      	adds	r3, r0, #1
 80053e4:	d102      	bne.n	80053ec <_fstat_r+0x1c>
 80053e6:	682b      	ldr	r3, [r5, #0]
 80053e8:	b103      	cbz	r3, 80053ec <_fstat_r+0x1c>
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	bd38      	pop	{r3, r4, r5, pc}
 80053ee:	bf00      	nop
 80053f0:	200015ac 	.word	0x200015ac

080053f4 <_isatty_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	2300      	movs	r3, #0
 80053f8:	4d05      	ldr	r5, [pc, #20]	@ (8005410 <_isatty_r+0x1c>)
 80053fa:	4604      	mov	r4, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	602b      	str	r3, [r5, #0]
 8005400:	f7fb fac5 	bl	800098e <_isatty>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_isatty_r+0x1a>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b103      	cbz	r3, 800540e <_isatty_r+0x1a>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	200015ac 	.word	0x200015ac

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr
