
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000384c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003a30  08003a30  00004a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  0000520c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a5c  08003a5c  0000520c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a5c  08003a5c  0000520c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a5c  08003a5c  00004a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a60  08003a60  00004a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  08003a64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a0  20000210  08003c70  00005210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200013b0  08003c70  000053b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000520c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e9f  00000000  00000000  00005235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f64  00000000  00000000  0000e0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  00010038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064a  00000000  00000000  00010888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001988f  00000000  00000000  00010ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3b9  00000000  00000000  0002a761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009092f  00000000  00000000  00036b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb8  00000000  00000000  000c748c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000c9444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000210 	.word	0x20000210
 8000200:	00000000 	.word	0x00000000
 8000204:	08003a18 	.word	0x08003a18

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000214 	.word	0x20000214
 8000220:	08003a18 	.word	0x08003a18

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fd5c 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f822 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f8c6 	bl	80003c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000234:	f000 f89e 	bl	8000374 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f862 	bl	8000300 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(Rx1Sign)
 800023c:	4b0a      	ldr	r3, [pc, #40]	@ (8000268 <main+0x44>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d008      	beq.n	8000256 <main+0x32>
	{

	  Rx1Sign = 0;
 8000244:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <main+0x44>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
	  if(Rx1_Count > 6)
 800024a:	4b08      	ldr	r3, [pc, #32]	@ (800026c <main+0x48>)
 800024c:	881b      	ldrh	r3, [r3, #0]
 800024e:	2b06      	cmp	r3, #6
 8000250:	d901      	bls.n	8000256 <main+0x32>
		  BootLoad();
 8000252:	f000 fb53 	bl	80008fc <BootLoad>
	}
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000256:	2101      	movs	r1, #1
 8000258:	4805      	ldr	r0, [pc, #20]	@ (8000270 <main+0x4c>)
 800025a:	f001 ff07 	bl	800206c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800025e:	2064      	movs	r0, #100	@ 0x64
 8000260:	f000 fda2 	bl	8000da8 <HAL_Delay>
	if(Rx1Sign)
 8000264:	e7ea      	b.n	800023c <main+0x18>
 8000266:	bf00      	nop
 8000268:	20001384 	.word	0x20001384
 800026c:	20001386 	.word	0x20001386
 8000270:	40011000 	.word	0x40011000

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	@ 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	@ 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fb8e 	bl	80039a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000296:	2301      	movs	r3, #1
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800029e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	2301      	movs	r3, #1
 80002a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	2302      	movs	r3, #2
 80002aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	f107 0318 	add.w	r3, r7, #24
 80002bc:	4618      	mov	r0, r3
 80002be:	f001 feef 	bl	80020a0 <HAL_RCC_OscConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c8:	f000 f902 	bl	80004d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	230f      	movs	r3, #15
 80002ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d0:	2302      	movs	r3, #2
 80002d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 f95c 	bl	80025a4 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f2:	f000 f8ed 	bl	80004d0 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3740      	adds	r7, #64	@ 0x40
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000304:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 8000306:	4a19      	ldr	r2, [pc, #100]	@ (800036c <MX_USART1_UART_Init+0x6c>)
 8000308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800030a:	4b17      	ldr	r3, [pc, #92]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 800030c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000312:	4b15      	ldr	r3, [pc, #84]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000318:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800031e:	4b12      	ldr	r3, [pc, #72]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000324:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 8000326:	220c      	movs	r2, #12
 8000328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032a:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000330:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000336:	480c      	ldr	r0, [pc, #48]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 8000338:	f002 fac2 	bl	80028c0 <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000342:	f000 f8c5 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
 8000346:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	68da      	ldr	r2, [r3, #12]
 800034c:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f042 0210 	orr.w	r2, r2, #16
 8000354:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1,buffer_RX1,RX1_Size);
 8000356:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 800035a:	4905      	ldr	r1, [pc, #20]	@ (8000370 <MX_USART1_UART_Init+0x70>)
 800035c:	4802      	ldr	r0, [pc, #8]	@ (8000368 <MX_USART1_UART_Init+0x68>)
 800035e:	f002 fb6f 	bl	8002a40 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000022c 	.word	0x2000022c
 800036c:	40013800 	.word	0x40013800
 8000370:	20000f44 	.word	0x20000f44

08000374 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800037a:	4b10      	ldr	r3, [pc, #64]	@ (80003bc <MX_DMA_Init+0x48>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a0f      	ldr	r2, [pc, #60]	@ (80003bc <MX_DMA_Init+0x48>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6153      	str	r3, [r2, #20]
 8000386:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <MX_DMA_Init+0x48>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	200e      	movs	r0, #14
 8000398:	f000 fe01 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800039c:	200e      	movs	r0, #14
 800039e:	f000 fe1a 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2100      	movs	r1, #0
 80003a6:	200f      	movs	r0, #15
 80003a8:	f000 fdf9 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003ac:	200f      	movs	r0, #15
 80003ae:	f000 fe12 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	4b39      	ldr	r3, [pc, #228]	@ (80004bc <MX_GPIO_Init+0xfc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a38      	ldr	r2, [pc, #224]	@ (80004bc <MX_GPIO_Init+0xfc>)
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <MX_GPIO_Init+0xfc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b33      	ldr	r3, [pc, #204]	@ (80004bc <MX_GPIO_Init+0xfc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a32      	ldr	r2, [pc, #200]	@ (80004bc <MX_GPIO_Init+0xfc>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b30      	ldr	r3, [pc, #192]	@ (80004bc <MX_GPIO_Init+0xfc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000404:	4b2d      	ldr	r3, [pc, #180]	@ (80004bc <MX_GPIO_Init+0xfc>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a2c      	ldr	r2, [pc, #176]	@ (80004bc <MX_GPIO_Init+0xfc>)
 800040a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b2a      	ldr	r3, [pc, #168]	@ (80004bc <MX_GPIO_Init+0xfc>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041c:	4b27      	ldr	r3, [pc, #156]	@ (80004bc <MX_GPIO_Init+0xfc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a26      	ldr	r2, [pc, #152]	@ (80004bc <MX_GPIO_Init+0xfc>)
 8000422:	f043 0320 	orr.w	r3, r3, #32
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b24      	ldr	r3, [pc, #144]	@ (80004bc <MX_GPIO_Init+0xfc>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0320 	and.w	r3, r3, #32
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2101      	movs	r1, #1
 8000438:	4821      	ldr	r0, [pc, #132]	@ (80004c0 <MX_GPIO_Init+0x100>)
 800043a:	f001 fdff 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2108      	movs	r1, #8
 8000442:	4820      	ldr	r0, [pc, #128]	@ (80004c4 <MX_GPIO_Init+0x104>)
 8000444:	f001 fdfa 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000448:	2301      	movs	r3, #1
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4818      	ldr	r0, [pc, #96]	@ (80004c0 <MX_GPIO_Init+0x100>)
 8000460:	f001 fc58 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000464:	2301      	movs	r3, #1
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800046c:	2302      	movs	r3, #2
 800046e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4814      	ldr	r0, [pc, #80]	@ (80004c8 <MX_GPIO_Init+0x108>)
 8000478:	f001 fc4c 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 800047c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	480e      	ldr	r0, [pc, #56]	@ (80004cc <MX_GPIO_Init+0x10c>)
 8000492:	f001 fc3f 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000496:	2308      	movs	r3, #8
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	4619      	mov	r1, r3
 80004ac:	4805      	ldr	r0, [pc, #20]	@ (80004c4 <MX_GPIO_Init+0x104>)
 80004ae:	f001 fc31 	bl	8001d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b2:	bf00      	nop
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40011000 	.word	0x40011000
 80004c4:	40011400 	.word	0x40011400
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40011c00 	.word	0x40011c00

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <Error_Handler+0x8>

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e2:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <HAL_MspInit+0x5c>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <HAL_MspInit+0x5c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <HAL_MspInit+0x5c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <HAL_MspInit+0x5c>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000512:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <HAL_MspInit+0x60>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	4a04      	ldr	r2, [pc, #16]	@ (800053c <HAL_MspInit+0x60>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000
 800053c:	40010000 	.word	0x40010000

08000540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a47      	ldr	r2, [pc, #284]	@ (8000678 <HAL_UART_MspInit+0x138>)
 800055c:	4293      	cmp	r3, r2
 800055e:	f040 8086 	bne.w	800066e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000562:	4b46      	ldr	r3, [pc, #280]	@ (800067c <HAL_UART_MspInit+0x13c>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a45      	ldr	r2, [pc, #276]	@ (800067c <HAL_UART_MspInit+0x13c>)
 8000568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b43      	ldr	r3, [pc, #268]	@ (800067c <HAL_UART_MspInit+0x13c>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b40      	ldr	r3, [pc, #256]	@ (800067c <HAL_UART_MspInit+0x13c>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a3f      	ldr	r2, [pc, #252]	@ (800067c <HAL_UART_MspInit+0x13c>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <HAL_UART_MspInit+0x13c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000592:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000598:	2302      	movs	r3, #2
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4836      	ldr	r0, [pc, #216]	@ (8000680 <HAL_UART_MspInit+0x140>)
 80005a8:	f001 fbb4 	bl	8001d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	482f      	ldr	r0, [pc, #188]	@ (8000680 <HAL_UART_MspInit+0x140>)
 80005c2:	f001 fba7 	bl	8001d14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <HAL_UART_MspInit+0x144>)
 80005c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000688 <HAL_UART_MspInit+0x148>)
 80005ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <HAL_UART_MspInit+0x144>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000684 <HAL_UART_MspInit+0x144>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000684 <HAL_UART_MspInit+0x144>)
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005de:	4b29      	ldr	r3, [pc, #164]	@ (8000684 <HAL_UART_MspInit+0x144>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005e4:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <HAL_UART_MspInit+0x144>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80005ea:	4b26      	ldr	r3, [pc, #152]	@ (8000684 <HAL_UART_MspInit+0x144>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005f0:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <HAL_UART_MspInit+0x144>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005f6:	4823      	ldr	r0, [pc, #140]	@ (8000684 <HAL_UART_MspInit+0x144>)
 80005f8:	f000 fd08 	bl	800100c <HAL_DMA_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000602:	f7ff ff65 	bl	80004d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a1e      	ldr	r2, [pc, #120]	@ (8000684 <HAL_UART_MspInit+0x144>)
 800060a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800060c:	4a1d      	ldr	r2, [pc, #116]	@ (8000684 <HAL_UART_MspInit+0x144>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000612:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <HAL_UART_MspInit+0x14c>)
 8000614:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <HAL_UART_MspInit+0x150>)
 8000616:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000618:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <HAL_UART_MspInit+0x14c>)
 800061a:	2210      	movs	r2, #16
 800061c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800061e:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <HAL_UART_MspInit+0x14c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000624:	4b19      	ldr	r3, [pc, #100]	@ (800068c <HAL_UART_MspInit+0x14c>)
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800062a:	4b18      	ldr	r3, [pc, #96]	@ (800068c <HAL_UART_MspInit+0x14c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000630:	4b16      	ldr	r3, [pc, #88]	@ (800068c <HAL_UART_MspInit+0x14c>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000636:	4b15      	ldr	r3, [pc, #84]	@ (800068c <HAL_UART_MspInit+0x14c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <HAL_UART_MspInit+0x14c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000642:	4812      	ldr	r0, [pc, #72]	@ (800068c <HAL_UART_MspInit+0x14c>)
 8000644:	f000 fce2 	bl	800100c <HAL_DMA_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800064e:	f7ff ff3f 	bl	80004d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <HAL_UART_MspInit+0x14c>)
 8000656:	639a      	str	r2, [r3, #56]	@ 0x38
 8000658:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <HAL_UART_MspInit+0x14c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	2025      	movs	r0, #37	@ 0x25
 8000664:	f000 fc9b 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000668:	2025      	movs	r0, #37	@ 0x25
 800066a:	f000 fcb4 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800066e:	bf00      	nop
 8000670:	3720      	adds	r7, #32
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40013800 	.word	0x40013800
 800067c:	40021000 	.word	0x40021000
 8000680:	40010800 	.word	0x40010800
 8000684:	20000274 	.word	0x20000274
 8000688:	40020058 	.word	0x40020058
 800068c:	200002b8 	.word	0x200002b8
 8000690:	40020044 	.word	0x40020044

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <NMI_Handler+0x4>

0800069c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <MemManage_Handler+0x4>

080006ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <UsageFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 fb44 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006f0:	4802      	ldr	r0, [pc, #8]	@ (80006fc <DMA1_Channel4_IRQHandler+0x10>)
 80006f2:	f000 fea5 	bl	8001440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200002b8 	.word	0x200002b8

08000700 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000704:	4802      	ldr	r0, [pc, #8]	@ (8000710 <DMA1_Channel5_IRQHandler+0x10>)
 8000706:	f000 fe9b 	bl	8001440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000274 	.word	0x20000274

08000714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  USART_IRQHandler_myself(&huart1);
 8000718:	4803      	ldr	r0, [pc, #12]	@ (8000728 <USART1_IRQHandler+0x14>)
 800071a:	f000 faa3 	bl	8000c64 <USART_IRQHandler_myself>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800071e:	4802      	ldr	r0, [pc, #8]	@ (8000728 <USART1_IRQHandler+0x14>)
 8000720:	f002 fa32 	bl	8002b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000022c 	.word	0x2000022c

0800072c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000738:	f7ff fff8 	bl	800072c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480b      	ldr	r0, [pc, #44]	@ (800076c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800073e:	490c      	ldr	r1, [pc, #48]	@ (8000770 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000740:	4a0c      	ldr	r2, [pc, #48]	@ (8000774 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a09      	ldr	r2, [pc, #36]	@ (8000778 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000754:	4c09      	ldr	r4, [pc, #36]	@ (800077c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f003 f927 	bl	80039b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fd5d 	bl	8000224 <main>
  bx lr
 800076a:	4770      	bx	lr
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8000774:	08003a64 	.word	0x08003a64
  ldr r2, =_sbss
 8000778:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800077c:	200013b0 	.word	0x200013b0

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <GetCrc_16>:
*   返 回 值: 校验值
*******************************************************************************/


uint16_t GetCrc_16(uint8_t * pData, uint16_t nLength)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
	uint16_t cRc_16 = 0x0000;    // 初始化
 8000790:	2300      	movs	r3, #0
 8000792:	81fb      	strh	r3, [r7, #14]
    while(nLength>0)
 8000794:	e017      	b.n	80007c6 <GetCrc_16+0x42>
    {
        cRc_16 = (cRc_16 << 8) ^ crc_table [((cRc_16>>8) ^ *pData) & 0xff];
 8000796:	89fb      	ldrh	r3, [r7, #14]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	0a1b      	lsrs	r3, r3, #8
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	404b      	eors	r3, r1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	490a      	ldr	r1, [pc, #40]	@ (80007d8 <GetCrc_16+0x54>)
 80007ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4053      	eors	r3, r2
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	81fb      	strh	r3, [r7, #14]
        nLength--;
 80007ba:	887b      	ldrh	r3, [r7, #2]
 80007bc:	3b01      	subs	r3, #1
 80007be:	807b      	strh	r3, [r7, #2]
        pData++;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
    while(nLength>0)
 80007c6:	887b      	ldrh	r3, [r7, #2]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1e4      	bne.n	8000796 <GetCrc_16+0x12>
    }
    return cRc_16;
 80007cc:	89fb      	ldrh	r3, [r7, #14]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	20000004 	.word	0x20000004

080007dc <SendBootLoad>:


void SendBootLoad(uint8_t cmd)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	uint16_t size = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	81fb      	strh	r3, [r7, #14]
	uint16_t Crc16 = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	81bb      	strh	r3, [r7, #12]
	buffer_TX1[0] = buffer_RX1[0];
 80007ee:	4b41      	ldr	r3, [pc, #260]	@ (80008f4 <SendBootLoad+0x118>)
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	4b41      	ldr	r3, [pc, #260]	@ (80008f8 <SendBootLoad+0x11c>)
 80007f4:	701a      	strb	r2, [r3, #0]
	buffer_TX1[1] = buffer_RX1[1];
 80007f6:	4b3f      	ldr	r3, [pc, #252]	@ (80008f4 <SendBootLoad+0x118>)
 80007f8:	785a      	ldrb	r2, [r3, #1]
 80007fa:	4b3f      	ldr	r3, [pc, #252]	@ (80008f8 <SendBootLoad+0x11c>)
 80007fc:	705a      	strb	r2, [r3, #1]
	buffer_TX1[2] = cmd;
 80007fe:	4a3e      	ldr	r2, [pc, #248]	@ (80008f8 <SendBootLoad+0x11c>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	7093      	strb	r3, [r2, #2]
	if(cmd == 0x01) //回复握手
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d120      	bne.n	800084c <SendBootLoad+0x70>
	{
		buffer_TX1[3] = 0x00;
 800080a:	4b3b      	ldr	r3, [pc, #236]	@ (80008f8 <SendBootLoad+0x11c>)
 800080c:	2200      	movs	r2, #0
 800080e:	70da      	strb	r2, [r3, #3]
		buffer_TX1[4] = 0x02;
 8000810:	4b39      	ldr	r3, [pc, #228]	@ (80008f8 <SendBootLoad+0x11c>)
 8000812:	2202      	movs	r2, #2
 8000814:	711a      	strb	r2, [r3, #4]
		buffer_TX1[5] = buffer_RX1[5];
 8000816:	4b37      	ldr	r3, [pc, #220]	@ (80008f4 <SendBootLoad+0x118>)
 8000818:	795a      	ldrb	r2, [r3, #5]
 800081a:	4b37      	ldr	r3, [pc, #220]	@ (80008f8 <SendBootLoad+0x11c>)
 800081c:	715a      	strb	r2, [r3, #5]
		buffer_TX1[6] = buffer_RX1[6];
 800081e:	4b35      	ldr	r3, [pc, #212]	@ (80008f4 <SendBootLoad+0x118>)
 8000820:	799a      	ldrb	r2, [r3, #6]
 8000822:	4b35      	ldr	r3, [pc, #212]	@ (80008f8 <SendBootLoad+0x11c>)
 8000824:	719a      	strb	r2, [r3, #6]
		Crc16 = GetCrc_16(buffer_TX1,7);
 8000826:	2107      	movs	r1, #7
 8000828:	4833      	ldr	r0, [pc, #204]	@ (80008f8 <SendBootLoad+0x11c>)
 800082a:	f7ff ffab 	bl	8000784 <GetCrc_16>
 800082e:	4603      	mov	r3, r0
 8000830:	81bb      	strh	r3, [r7, #12]
		buffer_TX1[8] = Crc16 >> 8;              //高位
 8000832:	89bb      	ldrh	r3, [r7, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b2f      	ldr	r3, [pc, #188]	@ (80008f8 <SendBootLoad+0x11c>)
 800083c:	721a      	strb	r2, [r3, #8]
		buffer_TX1[7] = Crc16 & 0xFF;            //低位
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <SendBootLoad+0x11c>)
 8000844:	71da      	strb	r2, [r3, #7]
		size = 9;
 8000846:	2309      	movs	r3, #9
 8000848:	81fb      	strh	r3, [r7, #14]
 800084a:	e04a      	b.n	80008e2 <SendBootLoad+0x106>
	}
	else if(cmd == 0x02)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d120      	bne.n	8000894 <SendBootLoad+0xb8>
	{
		buffer_TX1[3] = 0x00;
 8000852:	4b29      	ldr	r3, [pc, #164]	@ (80008f8 <SendBootLoad+0x11c>)
 8000854:	2200      	movs	r2, #0
 8000856:	70da      	strb	r2, [r3, #3]
		buffer_TX1[4] = 0x02;
 8000858:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <SendBootLoad+0x11c>)
 800085a:	2202      	movs	r2, #2
 800085c:	711a      	strb	r2, [r3, #4]
		buffer_TX1[5] = buffer_RX1[5];
 800085e:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <SendBootLoad+0x118>)
 8000860:	795a      	ldrb	r2, [r3, #5]
 8000862:	4b25      	ldr	r3, [pc, #148]	@ (80008f8 <SendBootLoad+0x11c>)
 8000864:	715a      	strb	r2, [r3, #5]
		buffer_TX1[6] = buffer_RX1[6];
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <SendBootLoad+0x118>)
 8000868:	799a      	ldrb	r2, [r3, #6]
 800086a:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <SendBootLoad+0x11c>)
 800086c:	719a      	strb	r2, [r3, #6]
		Crc16 = GetCrc_16(buffer_TX1,7);
 800086e:	2107      	movs	r1, #7
 8000870:	4821      	ldr	r0, [pc, #132]	@ (80008f8 <SendBootLoad+0x11c>)
 8000872:	f7ff ff87 	bl	8000784 <GetCrc_16>
 8000876:	4603      	mov	r3, r0
 8000878:	81bb      	strh	r3, [r7, #12]
		buffer_TX1[8] = Crc16 >> 8;              //高位
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	b29b      	uxth	r3, r3
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <SendBootLoad+0x11c>)
 8000884:	721a      	strb	r2, [r3, #8]
		buffer_TX1[7] = Crc16 & 0xFF;            //低位
 8000886:	89bb      	ldrh	r3, [r7, #12]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <SendBootLoad+0x11c>)
 800088c:	71da      	strb	r2, [r3, #7]
		size = 9;
 800088e:	2309      	movs	r3, #9
 8000890:	81fb      	strh	r3, [r7, #14]
 8000892:	e026      	b.n	80008e2 <SendBootLoad+0x106>
	}
	else if(cmd == 0x03)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d123      	bne.n	80008e2 <SendBootLoad+0x106>
	{
		buffer_TX1[3] = 0x04;
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <SendBootLoad+0x11c>)
 800089c:	2204      	movs	r2, #4
 800089e:	70da      	strb	r2, [r3, #3]
		buffer_TX1[4] = 0x02;
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <SendBootLoad+0x11c>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	711a      	strb	r2, [r3, #4]
		buffer_TX1[5] = buffer_RX1[5];
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <SendBootLoad+0x118>)
 80008a8:	795a      	ldrb	r2, [r3, #5]
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <SendBootLoad+0x11c>)
 80008ac:	715a      	strb	r2, [r3, #5]
		buffer_TX1[6] = buffer_RX1[6];
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <SendBootLoad+0x118>)
 80008b0:	799a      	ldrb	r2, [r3, #6]
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <SendBootLoad+0x11c>)
 80008b4:	719a      	strb	r2, [r3, #6]
		Crc16 = GetCrc_16(buffer_TX1,1031);
 80008b6:	f240 4107 	movw	r1, #1031	@ 0x407
 80008ba:	480f      	ldr	r0, [pc, #60]	@ (80008f8 <SendBootLoad+0x11c>)
 80008bc:	f7ff ff62 	bl	8000784 <GetCrc_16>
 80008c0:	4603      	mov	r3, r0
 80008c2:	81bb      	strh	r3, [r7, #12]
		buffer_TX1[1031] = Crc16 >> 8;              //高位
 80008c4:	89bb      	ldrh	r3, [r7, #12]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <SendBootLoad+0x11c>)
 80008ce:	f883 2407 	strb.w	r2, [r3, #1031]	@ 0x407
		buffer_TX1[1032] = Crc16 & 0xFF;            //低位
 80008d2:	89bb      	ldrh	r3, [r7, #12]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <SendBootLoad+0x11c>)
 80008d8:	f883 2408 	strb.w	r2, [r3, #1032]	@ 0x408
		size = 1033;
 80008dc:	f240 4309 	movw	r3, #1033	@ 0x409
 80008e0:	81fb      	strh	r3, [r7, #14]
	}
	usartSend(buffer_TX1,size);
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <SendBootLoad+0x11c>)
 80008e8:	f000 f99a 	bl	8000c20 <usartSend>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000f44 	.word	0x20000f44
 80008f8:	20000b04 	.word	0x20000b04

080008fc <BootLoad>:


void BootLoad(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8000902:	af00      	add	r7, sp, #0
	uint8_t   cmd;
	uint16_t  blocks;
	uint32_t  maxAdder;
	uint8_t   bin[1024];
	cmd = buffer_RX1[2];
 8000904:	4b3c      	ldr	r3, [pc, #240]	@ (80009f8 <BootLoad+0xfc>)
 8000906:	789b      	ldrb	r3, [r3, #2]
 8000908:	f887 340d 	strb.w	r3, [r7, #1037]	@ 0x40d
	if(cmd == 0x01) //握手
 800090c:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8000910:	2b01      	cmp	r3, #1
 8000912:	d113      	bne.n	800093c <BootLoad+0x40>
	{
		blocks = (buffer_RX1[6] << 8) + buffer_RX1[5];
 8000914:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <BootLoad+0xfc>)
 8000916:	799b      	ldrb	r3, [r3, #6]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	b29b      	uxth	r3, r3
 800091c:	4a36      	ldr	r2, [pc, #216]	@ (80009f8 <BootLoad+0xfc>)
 800091e:	7952      	ldrb	r2, [r2, #5]
 8000920:	4413      	add	r3, r2
 8000922:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a
		maxAdder = blocks * 1024;
 8000926:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	@ 0x40a
 800092a:	029b      	lsls	r3, r3, #10
 800092c:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
		SendBootLoad(cmd);
 8000930:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff51 	bl	80007dc <SendBootLoad>
		JumpAddress = *(__IO uint32_t*) (FLASH_USER_START_ADDR + 4);
		JumpToApplication = (pFunction) JumpAddress;
		__set_MSP(*(__IO uint32_t*) FLASH_USER_START_ADDR);
		JumpToApplication();
	}
}
 800093a:	e057      	b.n	80009ec <BootLoad+0xf0>
	else if(cmd == 0x02) //写
 800093c:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 8000940:	2b02      	cmp	r3, #2
 8000942:	d13a      	bne.n	80009ba <BootLoad+0xbe>
		blocks = ((buffer_RX1[6] << 8) + buffer_RX1[5]) - 1;  //块数
 8000944:	4b2c      	ldr	r3, [pc, #176]	@ (80009f8 <BootLoad+0xfc>)
 8000946:	799b      	ldrb	r3, [r3, #6]
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	4a2a      	ldr	r2, [pc, #168]	@ (80009f8 <BootLoad+0xfc>)
 800094e:	7952      	ldrb	r2, [r2, #5]
 8000950:	4413      	add	r3, r2
 8000952:	b29b      	uxth	r3, r3
 8000954:	3b01      	subs	r3, #1
 8000956:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a
		maxAdder = FLASH_USER_START_ADDR + (blocks * 1024);
 800095a:	f8b7 340a 	ldrh.w	r3, [r7, #1034]	@ 0x40a
 800095e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8000962:	3320      	adds	r3, #32
 8000964:	029b      	lsls	r3, r3, #10
 8000966:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
		for(uint16_t i=0; i<1024; i++)
 800096a:	2300      	movs	r3, #0
 800096c:	f8a7 340e 	strh.w	r3, [r7, #1038]	@ 0x40e
 8000970:	e010      	b.n	8000994 <BootLoad+0x98>
			bin[i] = buffer_RX1[7 + i];
 8000972:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 8000976:	1dda      	adds	r2, r3, #7
 8000978:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 800097c:	491e      	ldr	r1, [pc, #120]	@ (80009f8 <BootLoad+0xfc>)
 800097e:	5c89      	ldrb	r1, [r1, r2]
 8000980:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8000984:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 8000988:	54d1      	strb	r1, [r2, r3]
		for(uint16_t i=0; i<1024; i++)
 800098a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 800098e:	3301      	adds	r3, #1
 8000990:	f8a7 340e 	strh.w	r3, [r7, #1038]	@ 0x40e
 8000994:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	@ 0x40e
 8000998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800099c:	d3e9      	bcc.n	8000972 <BootLoad+0x76>
		write_flash(maxAdder, (uint16_t*)&bin, 1024/2);
 800099e:	463b      	mov	r3, r7
 80009a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a4:	4619      	mov	r1, r3
 80009a6:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 80009aa:	f000 f885 	bl	8000ab8 <write_flash>
		SendBootLoad(cmd);
 80009ae:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff12 	bl	80007dc <SendBootLoad>
}
 80009b8:	e018      	b.n	80009ec <BootLoad+0xf0>
	else if(cmd == 0x04)
 80009ba:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d114      	bne.n	80009ec <BootLoad+0xf0>
		JumpAddress = *(__IO uint32_t*) (FLASH_USER_START_ADDR + 4);
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <BootLoad+0x100>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a00 <BootLoad+0x104>)
 80009c8:	6013      	str	r3, [r2, #0]
		JumpToApplication = (pFunction) JumpAddress;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <BootLoad+0x104>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <BootLoad+0x108>)
 80009d2:	601a      	str	r2, [r3, #0]
		__set_MSP(*(__IO uint32_t*) FLASH_USER_START_ADDR);
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <BootLoad+0x10c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009dc:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80009e0:	f383 8808 	msr	MSP, r3
}
 80009e4:	bf00      	nop
		JumpToApplication();
 80009e6:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <BootLoad+0x108>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4798      	blx	r3
}
 80009ec:	bf00      	nop
 80009ee:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000f44 	.word	0x20000f44
 80009fc:	08008004 	.word	0x08008004
 8000a00:	20000300 	.word	0x20000300
 8000a04:	200002fc 	.word	0x200002fc
 8000a08:	08008000 	.word	0x08008000

08000a0c <Read_Flash_halfword>:



//从指定地址读取一个半字(16位数据)
uint16_t Read_Flash_halfword(uint32_t faddr)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    return *(volatile uint16_t *)faddr;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	b29b      	uxth	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <Read_Flash>:


//从指定地址开始读出指定长度的数据
void Read_Flash(uint32_t raddr, uint16_t *pbuf, uint16_t length)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	80fb      	strh	r3, [r7, #6]
    uint16_t i;

    for (i = 0; i < length; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	82fb      	strh	r3, [r7, #22]
 8000a36:	e00e      	b.n	8000a56 <Read_Flash+0x32>
    {
        pbuf[i] = Read_Flash_halfword(raddr);    /* 读取2个字节 */
 8000a38:	8afb      	ldrh	r3, [r7, #22]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	18d4      	adds	r4, r2, r3
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f7ff ffe3 	bl	8000a0c <Read_Flash_halfword>
 8000a46:	4603      	mov	r3, r0
 8000a48:	8023      	strh	r3, [r4, #0]
        raddr += 2; /* 偏移2个字节 */
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < length; i++)
 8000a50:	8afb      	ldrh	r3, [r7, #22]
 8000a52:	3301      	adds	r3, #1
 8000a54:	82fb      	strh	r3, [r7, #22]
 8000a56:	8afa      	ldrh	r2, [r7, #22]
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d3ec      	bcc.n	8000a38 <Read_Flash+0x14>
    }
}
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	371c      	adds	r7, #28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd90      	pop	{r4, r7, pc}

08000a68 <flash_write_nocheck>:

void flash_write_nocheck(uint32_t waddr, uint16_t *pbuf, uint16_t length)
{
 8000a68:	b5b0      	push	{r4, r5, r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	4613      	mov	r3, r2
 8000a74:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for (i = 0; i < length; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	82fb      	strh	r3, [r7, #22]
 8000a7a:	e014      	b.n	8000aa6 <flash_write_nocheck+0x3e>
    {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, waddr, pbuf[i]);
 8000a7c:	8afb      	ldrh	r3, [r7, #22]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	4413      	add	r3, r2
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	2200      	movs	r2, #0
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	4622      	mov	r2, r4
 8000a90:	462b      	mov	r3, r5
 8000a92:	68f9      	ldr	r1, [r7, #12]
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 ff3d 	bl	8001914 <HAL_FLASH_Program>
        waddr += 2;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < length; i++)
 8000aa0:	8afb      	ldrh	r3, [r7, #22]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	82fb      	strh	r3, [r7, #22]
 8000aa6:	8afa      	ldrh	r2, [r7, #22]
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d3e6      	bcc.n	8000a7c <flash_write_nocheck+0x14>
    }
}
 8000aae:	bf00      	nop
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bdb0      	pop	{r4, r5, r7, pc}

08000ab8 <write_flash>:

uint16_t g_flashbuf[STM32_SECTOR_SIZE / 2];
void write_flash(uint32_t waddr, uint16_t *pbuf, uint16_t length)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	@ 0x38
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint32_t offaddr;
    FLASH_EraseInitTypeDef flash_eraseop;
    uint32_t erase_addr;

    if (waddr < STM32_FLASH_BASE || (waddr >= (STM32_FLASH_BASE + 1024 * STM32_FLASH_SIZE)))
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000acc:	f0c0 80a1 	bcc.w	8000c12 <write_flash+0x15a>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8000ad6:	f080 809c 	bcs.w	8000c12 <write_flash+0x15a>
    {
        return;
    }

    HAL_FLASH_Unlock();
 8000ada:	f000 ff8b 	bl	80019f4 <HAL_FLASH_Unlock>

    offaddr = waddr - STM32_FLASH_BASE;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    secpos = offaddr / STM32_SECTOR_SIZE;
 8000ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae8:	0adb      	lsrs	r3, r3, #11
 8000aea:	637b      	str	r3, [r7, #52]	@ 0x34
    secoff = (offaddr % STM32_SECTOR_SIZE) / 2;
 8000aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	867b      	strh	r3, [r7, #50]	@ 0x32
    secremain = STM32_SECTOR_SIZE / 2 - secoff;
 8000af6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000af8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000afc:	863b      	strh	r3, [r7, #48]	@ 0x30
    if (length <= secremain)
 8000afe:	88fa      	ldrh	r2, [r7, #6]
 8000b00:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d801      	bhi.n	8000b0a <write_flash+0x52>
    {
        secremain = length;
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	863b      	strh	r3, [r7, #48]	@ 0x30
    }

    while (1)
    {
    	Read_Flash(secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE, g_flashbuf, STM32_SECTOR_SIZE / 2);
 8000b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b0c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000b10:	02db      	lsls	r3, r3, #11
 8000b12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b16:	4941      	ldr	r1, [pc, #260]	@ (8000c1c <write_flash+0x164>)
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff83 	bl	8000a24 <Read_Flash>
        for (i = 0; i < secremain; i++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000b22:	e00c      	b.n	8000b3e <write_flash+0x86>
        {
            if (g_flashbuf[secoff + i] != 0XFFFF)
 8000b24:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8000b26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8000c1c <write_flash+0x164>)
 8000b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d107      	bne.n	8000b48 <write_flash+0x90>
        for (i = 0; i < secremain; i++)
 8000b38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000b3e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b40:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3ee      	bcc.n	8000b24 <write_flash+0x6c>
 8000b46:	e000      	b.n	8000b4a <write_flash+0x92>
            {
                break;
 8000b48:	bf00      	nop
            }
        }
        if (i < secremain)
 8000b4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d232      	bcs.n	8000bb8 <write_flash+0x100>
        {
            flash_eraseop.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
            flash_eraseop.Banks = FLASH_BANK_1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
            flash_eraseop.NbPages = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
            flash_eraseop.PageAddress = secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE;
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b60:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000b64:	02db      	lsls	r3, r3, #11
 8000b66:	623b      	str	r3, [r7, #32]
            HAL_FLASHEx_Erase( &flash_eraseop, &erase_addr);
 8000b68:	f107 0214 	add.w	r2, r7, #20
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 f826 	bl	8001bc4 <HAL_FLASHEx_Erase>

            for (i = 0; i < secremain; i++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000b7c:	e00d      	b.n	8000b9a <write_flash+0xe2>
            {
                g_flashbuf[i + secoff] = pbuf[i];
 8000b7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	441a      	add	r2, r3
 8000b86:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8000b88:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000b8a:	440b      	add	r3, r1
 8000b8c:	8811      	ldrh	r1, [r2, #0]
 8000b8e:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <write_flash+0x164>)
 8000b90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < secremain; i++)
 8000b94:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b96:	3301      	adds	r3, #1
 8000b98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000b9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b9c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d3ed      	bcc.n	8000b7e <write_flash+0xc6>
            }
            flash_write_nocheck(secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE, g_flashbuf, STM32_SECTOR_SIZE / 2);
 8000ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000ba8:	02db      	lsls	r3, r3, #11
 8000baa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bae:	491b      	ldr	r1, [pc, #108]	@ (8000c1c <write_flash+0x164>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff59 	bl	8000a68 <flash_write_nocheck>
 8000bb6:	e005      	b.n	8000bc4 <write_flash+0x10c>
        }
        else
        {
            flash_write_nocheck(waddr, pbuf, secremain);
 8000bb8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff ff52 	bl	8000a68 <flash_write_nocheck>
        }
        if (length == secremain)
 8000bc4:	88fa      	ldrh	r2, [r7, #6]
 8000bc6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d01e      	beq.n	8000c0a <write_flash+0x152>
        {
            break;
        }
        else
        {
            secpos++;
 8000bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bce:	3301      	adds	r3, #1
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
            secoff = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	867b      	strh	r3, [r7, #50]	@ 0x32
            pbuf += secremain;
 8000bd6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	4413      	add	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
            waddr += secremain * 2;
 8000be0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	461a      	mov	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
            length -= secremain;
 8000bec:	88fa      	ldrh	r2, [r7, #6]
 8000bee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	80fb      	strh	r3, [r7, #6]
            if (length > (STM32_SECTOR_SIZE / 2))
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bfa:	d903      	bls.n	8000c04 <write_flash+0x14c>
            {
                secremain = STM32_SECTOR_SIZE / 2;
 8000bfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c00:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000c02:	e782      	b.n	8000b0a <write_flash+0x52>
            }
            else
            {
                secremain = length;
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	863b      	strh	r3, [r7, #48]	@ 0x30
    	Read_Flash(secpos * STM32_SECTOR_SIZE + STM32_FLASH_BASE, g_flashbuf, STM32_SECTOR_SIZE / 2);
 8000c08:	e77f      	b.n	8000b0a <write_flash+0x52>
            break;
 8000c0a:	bf00      	nop
            }
        }
    }

    HAL_FLASH_Lock();
 8000c0c:	f000 ff18 	bl	8001a40 <HAL_FLASH_Lock>
 8000c10:	e000      	b.n	8000c14 <write_flash+0x15c>
        return;
 8000c12:	bf00      	nop
}
 8000c14:	3738      	adds	r7, #56	@ 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000304 	.word	0x20000304

08000c20 <usartSend>:
	    return ch;
}


void usartSend(void* date, uint16_t size)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
	size = size > TX1_Size ? TX1_Size : size;
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8000c32:	bf28      	it	cs
 8000c34:	f44f 6388 	movcs.w	r3, #1088	@ 0x440
 8000c38:	807b      	strh	r3, [r7, #2]
	memcpy(buffer_TX1, date, size);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <usartSend+0x3c>)
 8000c42:	f002 fedb 	bl	80039fc <memcpy>
	HAL_UART_Transmit_DMA(&huart1, buffer_TX1, size);
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4904      	ldr	r1, [pc, #16]	@ (8000c5c <usartSend+0x3c>)
 8000c4c:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <usartSend+0x40>)
 8000c4e:	f001 fe87 	bl	8002960 <HAL_UART_Transmit_DMA>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000b04 	.word	0x20000b04
 8000c60:	2000022c 	.word	0x2000022c

08000c64 <USART_IRQHandler_myself>:

//接收完成中断函数
void USART_IRQHandler_myself(UART_HandleTypeDef *huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a16      	ldr	r2, [pc, #88]	@ (8000ccc <USART_IRQHandler_myself+0x68>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d126      	bne.n	8000cc4 <USART_IRQHandler_myself+0x60>
	{
		if(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE) != RESET)
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <USART_IRQHandler_myself+0x6c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	2b10      	cmp	r3, #16
 8000c82:	d11f      	bne.n	8000cc4 <USART_IRQHandler_myself+0x60>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <USART_IRQHandler_myself+0x6c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <USART_IRQHandler_myself+0x6c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
			HAL_UART_DMAStop(&huart1);
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <USART_IRQHandler_myself+0x6c>)
 8000c9c:	f001 fef5 	bl	8002a8a <HAL_UART_DMAStop>
			Rx1_Count = RX1_Size - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <USART_IRQHandler_myself+0x70>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f5c3 6388 	rsb	r3, r3, #1088	@ 0x440
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <USART_IRQHandler_myself+0x74>)
 8000cb0:	801a      	strh	r2, [r3, #0]
			Rx1Sign = 1;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <USART_IRQHandler_myself+0x78>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1,buffer_RX1,RX1_Size);
 8000cb8:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8000cbc:	4908      	ldr	r1, [pc, #32]	@ (8000ce0 <USART_IRQHandler_myself+0x7c>)
 8000cbe:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <USART_IRQHandler_myself+0x6c>)
 8000cc0:	f001 febe 	bl	8002a40 <HAL_UART_Receive_DMA>
		}
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40013800 	.word	0x40013800
 8000cd0:	2000022c 	.word	0x2000022c
 8000cd4:	20000274 	.word	0x20000274
 8000cd8:	20001386 	.word	0x20001386
 8000cdc:	20001384 	.word	0x20001384
 8000ce0:	20000f44 	.word	0x20000f44

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <HAL_Init+0x28>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	@ (8000d0c <HAL_Init+0x28>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f947 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fbec 	bl	80004dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40022000 	.word	0x40022000

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f95f 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f927 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000208 	.word	0x20000208
 8000d6c:	20000204 	.word	0x20000204

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a03      	ldr	r2, [pc, #12]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000208 	.word	0x20000208
 8000d90:	20001388 	.word	0x20001388

08000d94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	@ (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20001388 	.word	0x20001388

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff fff0 	bl	8000d94 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffe0 	bl	8000d94 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000208 	.word	0x20000208

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4906      	ldr	r1, [pc, #24]	@ (8000e88 <__NVIC_EnableIRQ+0x34>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	@ (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	@ (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	@ 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	@ 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff90 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff2d 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff42 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff90 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5f 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff35 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa2 	bl	8000f44 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e059      	b.n	80010d6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b2d      	ldr	r3, [pc, #180]	@ (80010e0 <HAL_DMA_Init+0xd4>)
 800102a:	429a      	cmp	r2, r3
 800102c:	d80f      	bhi.n	800104e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <HAL_DMA_Init+0xd8>)
 8001036:	4413      	add	r3, r2
 8001038:	4a2b      	ldr	r2, [pc, #172]	@ (80010e8 <HAL_DMA_Init+0xdc>)
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	009a      	lsls	r2, r3, #2
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a28      	ldr	r2, [pc, #160]	@ (80010ec <HAL_DMA_Init+0xe0>)
 800104a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800104c:	e00e      	b.n	800106c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <HAL_DMA_Init+0xe4>)
 8001056:	4413      	add	r3, r2
 8001058:	4a23      	ldr	r2, [pc, #140]	@ (80010e8 <HAL_DMA_Init+0xdc>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	009a      	lsls	r2, r3, #2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <HAL_DMA_Init+0xe8>)
 800106a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2202      	movs	r2, #2
 8001070:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001082:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001086:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40020407 	.word	0x40020407
 80010e4:	bffdfff8 	.word	0xbffdfff8
 80010e8:	cccccccd 	.word	0xcccccccd
 80010ec:	40020000 	.word	0x40020000
 80010f0:	bffdfbf8 	.word	0xbffdfbf8
 80010f4:	40020400 	.word	0x40020400

080010f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_DMA_Start_IT+0x20>
 8001114:	2302      	movs	r3, #2
 8001116:	e04b      	b.n	80011b0 <HAL_DMA_Start_IT+0xb8>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d13a      	bne.n	80011a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0201 	bic.w	r2, r2, #1
 8001148:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 fbb1 	bl	80018b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115a:	2b00      	cmp	r3, #0
 800115c:	d008      	beq.n	8001170 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 020e 	orr.w	r2, r2, #14
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e00f      	b.n	8001190 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0204 	bic.w	r2, r2, #4
 800117e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 020a 	orr.w	r2, r2, #10
 800118e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e005      	b.n	80011ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80011aa:	2302      	movs	r3, #2
 80011ac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d008      	beq.n	80011e2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2204      	movs	r2, #4
 80011d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e020      	b.n	8001224 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 020e 	bic.w	r2, r2, #14
 80011f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800120a:	2101      	movs	r1, #1
 800120c:	fa01 f202 	lsl.w	r2, r1, r2
 8001210:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
	...

08001230 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d005      	beq.n	8001254 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2204      	movs	r2, #4
 800124c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e0d6      	b.n	8001402 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 020e 	bic.w	r2, r2, #14
 8001262:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0201 	bic.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b64      	ldr	r3, [pc, #400]	@ (800140c <HAL_DMA_Abort_IT+0x1dc>)
 800127c:	429a      	cmp	r2, r3
 800127e:	d958      	bls.n	8001332 <HAL_DMA_Abort_IT+0x102>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a62      	ldr	r2, [pc, #392]	@ (8001410 <HAL_DMA_Abort_IT+0x1e0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d04f      	beq.n	800132a <HAL_DMA_Abort_IT+0xfa>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a61      	ldr	r2, [pc, #388]	@ (8001414 <HAL_DMA_Abort_IT+0x1e4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d048      	beq.n	8001326 <HAL_DMA_Abort_IT+0xf6>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a5f      	ldr	r2, [pc, #380]	@ (8001418 <HAL_DMA_Abort_IT+0x1e8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d040      	beq.n	8001320 <HAL_DMA_Abort_IT+0xf0>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a5e      	ldr	r2, [pc, #376]	@ (800141c <HAL_DMA_Abort_IT+0x1ec>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d038      	beq.n	800131a <HAL_DMA_Abort_IT+0xea>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a5c      	ldr	r2, [pc, #368]	@ (8001420 <HAL_DMA_Abort_IT+0x1f0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d030      	beq.n	8001314 <HAL_DMA_Abort_IT+0xe4>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001424 <HAL_DMA_Abort_IT+0x1f4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d028      	beq.n	800130e <HAL_DMA_Abort_IT+0xde>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a52      	ldr	r2, [pc, #328]	@ (800140c <HAL_DMA_Abort_IT+0x1dc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d020      	beq.n	8001308 <HAL_DMA_Abort_IT+0xd8>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a57      	ldr	r2, [pc, #348]	@ (8001428 <HAL_DMA_Abort_IT+0x1f8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d019      	beq.n	8001304 <HAL_DMA_Abort_IT+0xd4>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a55      	ldr	r2, [pc, #340]	@ (800142c <HAL_DMA_Abort_IT+0x1fc>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d012      	beq.n	8001300 <HAL_DMA_Abort_IT+0xd0>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a54      	ldr	r2, [pc, #336]	@ (8001430 <HAL_DMA_Abort_IT+0x200>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00a      	beq.n	80012fa <HAL_DMA_Abort_IT+0xca>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a52      	ldr	r2, [pc, #328]	@ (8001434 <HAL_DMA_Abort_IT+0x204>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d102      	bne.n	80012f4 <HAL_DMA_Abort_IT+0xc4>
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	e01b      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 80012f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f8:	e018      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 80012fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fe:	e015      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 8001300:	2310      	movs	r3, #16
 8001302:	e013      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 8001304:	2301      	movs	r3, #1
 8001306:	e011      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 8001308:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800130c:	e00e      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 800130e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001312:	e00b      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 8001314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001318:	e008      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	e005      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 8001320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001324:	e002      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 8001326:	2310      	movs	r3, #16
 8001328:	e000      	b.n	800132c <HAL_DMA_Abort_IT+0xfc>
 800132a:	2301      	movs	r3, #1
 800132c:	4a42      	ldr	r2, [pc, #264]	@ (8001438 <HAL_DMA_Abort_IT+0x208>)
 800132e:	6053      	str	r3, [r2, #4]
 8001330:	e057      	b.n	80013e2 <HAL_DMA_Abort_IT+0x1b2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a36      	ldr	r2, [pc, #216]	@ (8001410 <HAL_DMA_Abort_IT+0x1e0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d04f      	beq.n	80013dc <HAL_DMA_Abort_IT+0x1ac>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a34      	ldr	r2, [pc, #208]	@ (8001414 <HAL_DMA_Abort_IT+0x1e4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d048      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x1a8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a33      	ldr	r2, [pc, #204]	@ (8001418 <HAL_DMA_Abort_IT+0x1e8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d040      	beq.n	80013d2 <HAL_DMA_Abort_IT+0x1a2>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a31      	ldr	r2, [pc, #196]	@ (800141c <HAL_DMA_Abort_IT+0x1ec>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d038      	beq.n	80013cc <HAL_DMA_Abort_IT+0x19c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a30      	ldr	r2, [pc, #192]	@ (8001420 <HAL_DMA_Abort_IT+0x1f0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d030      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x196>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2e      	ldr	r2, [pc, #184]	@ (8001424 <HAL_DMA_Abort_IT+0x1f4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d028      	beq.n	80013c0 <HAL_DMA_Abort_IT+0x190>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a26      	ldr	r2, [pc, #152]	@ (800140c <HAL_DMA_Abort_IT+0x1dc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d020      	beq.n	80013ba <HAL_DMA_Abort_IT+0x18a>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a2a      	ldr	r2, [pc, #168]	@ (8001428 <HAL_DMA_Abort_IT+0x1f8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_DMA_Abort_IT+0x186>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a29      	ldr	r2, [pc, #164]	@ (800142c <HAL_DMA_Abort_IT+0x1fc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d012      	beq.n	80013b2 <HAL_DMA_Abort_IT+0x182>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a27      	ldr	r2, [pc, #156]	@ (8001430 <HAL_DMA_Abort_IT+0x200>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00a      	beq.n	80013ac <HAL_DMA_Abort_IT+0x17c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a26      	ldr	r2, [pc, #152]	@ (8001434 <HAL_DMA_Abort_IT+0x204>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d102      	bne.n	80013a6 <HAL_DMA_Abort_IT+0x176>
 80013a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a4:	e01b      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013aa:	e018      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b0:	e015      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013b2:	2310      	movs	r3, #16
 80013b4:	e013      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e011      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013be:	e00e      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013c4:	e00b      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ca:	e008      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d0:	e005      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d6:	e002      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013d8:	2310      	movs	r3, #16
 80013da:	e000      	b.n	80013de <HAL_DMA_Abort_IT+0x1ae>
 80013dc:	2301      	movs	r3, #1
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_DMA_Abort_IT+0x20c>)
 80013e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
    } 
  }
  return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40020080 	.word	0x40020080
 8001410:	40020008 	.word	0x40020008
 8001414:	4002001c 	.word	0x4002001c
 8001418:	40020030 	.word	0x40020030
 800141c:	40020044 	.word	0x40020044
 8001420:	40020058 	.word	0x40020058
 8001424:	4002006c 	.word	0x4002006c
 8001428:	40020408 	.word	0x40020408
 800142c:	4002041c 	.word	0x4002041c
 8001430:	40020430 	.word	0x40020430
 8001434:	40020444 	.word	0x40020444
 8001438:	40020400 	.word	0x40020400
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	2204      	movs	r2, #4
 800145e:	409a      	lsls	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80f1 	beq.w	800164c <HAL_DMA_IRQHandler+0x20c>
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80eb 	beq.w	800164c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0320 	and.w	r3, r3, #32
 8001480:	2b00      	cmp	r3, #0
 8001482:	d107      	bne.n	8001494 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0204 	bic.w	r2, r2, #4
 8001492:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b5f      	ldr	r3, [pc, #380]	@ (8001618 <HAL_DMA_IRQHandler+0x1d8>)
 800149c:	429a      	cmp	r2, r3
 800149e:	d958      	bls.n	8001552 <HAL_DMA_IRQHandler+0x112>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a5d      	ldr	r2, [pc, #372]	@ (800161c <HAL_DMA_IRQHandler+0x1dc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d04f      	beq.n	800154a <HAL_DMA_IRQHandler+0x10a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001620 <HAL_DMA_IRQHandler+0x1e0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d048      	beq.n	8001546 <HAL_DMA_IRQHandler+0x106>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001624 <HAL_DMA_IRQHandler+0x1e4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d040      	beq.n	8001540 <HAL_DMA_IRQHandler+0x100>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a59      	ldr	r2, [pc, #356]	@ (8001628 <HAL_DMA_IRQHandler+0x1e8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d038      	beq.n	800153a <HAL_DMA_IRQHandler+0xfa>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a57      	ldr	r2, [pc, #348]	@ (800162c <HAL_DMA_IRQHandler+0x1ec>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d030      	beq.n	8001534 <HAL_DMA_IRQHandler+0xf4>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a56      	ldr	r2, [pc, #344]	@ (8001630 <HAL_DMA_IRQHandler+0x1f0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d028      	beq.n	800152e <HAL_DMA_IRQHandler+0xee>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001618 <HAL_DMA_IRQHandler+0x1d8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d020      	beq.n	8001528 <HAL_DMA_IRQHandler+0xe8>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a52      	ldr	r2, [pc, #328]	@ (8001634 <HAL_DMA_IRQHandler+0x1f4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d019      	beq.n	8001524 <HAL_DMA_IRQHandler+0xe4>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a50      	ldr	r2, [pc, #320]	@ (8001638 <HAL_DMA_IRQHandler+0x1f8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d012      	beq.n	8001520 <HAL_DMA_IRQHandler+0xe0>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a4f      	ldr	r2, [pc, #316]	@ (800163c <HAL_DMA_IRQHandler+0x1fc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00a      	beq.n	800151a <HAL_DMA_IRQHandler+0xda>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a4d      	ldr	r2, [pc, #308]	@ (8001640 <HAL_DMA_IRQHandler+0x200>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d102      	bne.n	8001514 <HAL_DMA_IRQHandler+0xd4>
 800150e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001512:	e01b      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 8001514:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001518:	e018      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 800151a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800151e:	e015      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 8001520:	2340      	movs	r3, #64	@ 0x40
 8001522:	e013      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 8001524:	2304      	movs	r3, #4
 8001526:	e011      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 8001528:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800152c:	e00e      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 800152e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001532:	e00b      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 8001534:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001538:	e008      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 800153a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800153e:	e005      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 8001540:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001544:	e002      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 8001546:	2340      	movs	r3, #64	@ 0x40
 8001548:	e000      	b.n	800154c <HAL_DMA_IRQHandler+0x10c>
 800154a:	2304      	movs	r3, #4
 800154c:	4a3d      	ldr	r2, [pc, #244]	@ (8001644 <HAL_DMA_IRQHandler+0x204>)
 800154e:	6053      	str	r3, [r2, #4]
 8001550:	e057      	b.n	8001602 <HAL_DMA_IRQHandler+0x1c2>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a31      	ldr	r2, [pc, #196]	@ (800161c <HAL_DMA_IRQHandler+0x1dc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d04f      	beq.n	80015fc <HAL_DMA_IRQHandler+0x1bc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a2f      	ldr	r2, [pc, #188]	@ (8001620 <HAL_DMA_IRQHandler+0x1e0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d048      	beq.n	80015f8 <HAL_DMA_IRQHandler+0x1b8>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a2e      	ldr	r2, [pc, #184]	@ (8001624 <HAL_DMA_IRQHandler+0x1e4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d040      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x1b2>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2c      	ldr	r2, [pc, #176]	@ (8001628 <HAL_DMA_IRQHandler+0x1e8>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d038      	beq.n	80015ec <HAL_DMA_IRQHandler+0x1ac>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a2b      	ldr	r2, [pc, #172]	@ (800162c <HAL_DMA_IRQHandler+0x1ec>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d030      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x1a6>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a29      	ldr	r2, [pc, #164]	@ (8001630 <HAL_DMA_IRQHandler+0x1f0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d028      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x1a0>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a21      	ldr	r2, [pc, #132]	@ (8001618 <HAL_DMA_IRQHandler+0x1d8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d020      	beq.n	80015da <HAL_DMA_IRQHandler+0x19a>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a25      	ldr	r2, [pc, #148]	@ (8001634 <HAL_DMA_IRQHandler+0x1f4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d019      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x196>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a24      	ldr	r2, [pc, #144]	@ (8001638 <HAL_DMA_IRQHandler+0x1f8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d012      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x192>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a22      	ldr	r2, [pc, #136]	@ (800163c <HAL_DMA_IRQHandler+0x1fc>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00a      	beq.n	80015cc <HAL_DMA_IRQHandler+0x18c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <HAL_DMA_IRQHandler+0x200>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d102      	bne.n	80015c6 <HAL_DMA_IRQHandler+0x186>
 80015c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015c4:	e01b      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015c6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80015ca:	e018      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d0:	e015      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015d2:	2340      	movs	r3, #64	@ 0x40
 80015d4:	e013      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e011      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015de:	e00e      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015e4:	e00b      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015e6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80015ea:	e008      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015f0:	e005      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f6:	e002      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015f8:	2340      	movs	r3, #64	@ 0x40
 80015fa:	e000      	b.n	80015fe <HAL_DMA_IRQHandler+0x1be>
 80015fc:	2304      	movs	r3, #4
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <HAL_DMA_IRQHandler+0x208>)
 8001600:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8136 	beq.w	8001878 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001614:	e130      	b.n	8001878 <HAL_DMA_IRQHandler+0x438>
 8001616:	bf00      	nop
 8001618:	40020080 	.word	0x40020080
 800161c:	40020008 	.word	0x40020008
 8001620:	4002001c 	.word	0x4002001c
 8001624:	40020030 	.word	0x40020030
 8001628:	40020044 	.word	0x40020044
 800162c:	40020058 	.word	0x40020058
 8001630:	4002006c 	.word	0x4002006c
 8001634:	40020408 	.word	0x40020408
 8001638:	4002041c 	.word	0x4002041c
 800163c:	40020430 	.word	0x40020430
 8001640:	40020444 	.word	0x40020444
 8001644:	40020400 	.word	0x40020400
 8001648:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	2202      	movs	r2, #2
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80dd 	beq.w	8001818 <HAL_DMA_IRQHandler+0x3d8>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80d7 	beq.w	8001818 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10b      	bne.n	8001690 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 020a 	bic.w	r2, r2, #10
 8001686:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b7b      	ldr	r3, [pc, #492]	@ (8001884 <HAL_DMA_IRQHandler+0x444>)
 8001698:	429a      	cmp	r2, r3
 800169a:	d958      	bls.n	800174e <HAL_DMA_IRQHandler+0x30e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a79      	ldr	r2, [pc, #484]	@ (8001888 <HAL_DMA_IRQHandler+0x448>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d04f      	beq.n	8001746 <HAL_DMA_IRQHandler+0x306>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a78      	ldr	r2, [pc, #480]	@ (800188c <HAL_DMA_IRQHandler+0x44c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d048      	beq.n	8001742 <HAL_DMA_IRQHandler+0x302>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a76      	ldr	r2, [pc, #472]	@ (8001890 <HAL_DMA_IRQHandler+0x450>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d040      	beq.n	800173c <HAL_DMA_IRQHandler+0x2fc>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a75      	ldr	r2, [pc, #468]	@ (8001894 <HAL_DMA_IRQHandler+0x454>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d038      	beq.n	8001736 <HAL_DMA_IRQHandler+0x2f6>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a73      	ldr	r2, [pc, #460]	@ (8001898 <HAL_DMA_IRQHandler+0x458>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d030      	beq.n	8001730 <HAL_DMA_IRQHandler+0x2f0>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a72      	ldr	r2, [pc, #456]	@ (800189c <HAL_DMA_IRQHandler+0x45c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d028      	beq.n	800172a <HAL_DMA_IRQHandler+0x2ea>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a69      	ldr	r2, [pc, #420]	@ (8001884 <HAL_DMA_IRQHandler+0x444>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d020      	beq.n	8001724 <HAL_DMA_IRQHandler+0x2e4>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6e      	ldr	r2, [pc, #440]	@ (80018a0 <HAL_DMA_IRQHandler+0x460>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d019      	beq.n	8001720 <HAL_DMA_IRQHandler+0x2e0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a6c      	ldr	r2, [pc, #432]	@ (80018a4 <HAL_DMA_IRQHandler+0x464>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d012      	beq.n	800171c <HAL_DMA_IRQHandler+0x2dc>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6b      	ldr	r2, [pc, #428]	@ (80018a8 <HAL_DMA_IRQHandler+0x468>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d00a      	beq.n	8001716 <HAL_DMA_IRQHandler+0x2d6>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a69      	ldr	r2, [pc, #420]	@ (80018ac <HAL_DMA_IRQHandler+0x46c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d102      	bne.n	8001710 <HAL_DMA_IRQHandler+0x2d0>
 800170a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800170e:	e01b      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 8001710:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001714:	e018      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 8001716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800171a:	e015      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 800171c:	2320      	movs	r3, #32
 800171e:	e013      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 8001720:	2302      	movs	r3, #2
 8001722:	e011      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 8001724:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001728:	e00e      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 800172a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800172e:	e00b      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 8001730:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001734:	e008      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 8001736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800173a:	e005      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 800173c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001740:	e002      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 8001742:	2320      	movs	r3, #32
 8001744:	e000      	b.n	8001748 <HAL_DMA_IRQHandler+0x308>
 8001746:	2302      	movs	r3, #2
 8001748:	4a59      	ldr	r2, [pc, #356]	@ (80018b0 <HAL_DMA_IRQHandler+0x470>)
 800174a:	6053      	str	r3, [r2, #4]
 800174c:	e057      	b.n	80017fe <HAL_DMA_IRQHandler+0x3be>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a4d      	ldr	r2, [pc, #308]	@ (8001888 <HAL_DMA_IRQHandler+0x448>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d04f      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x3b8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a4b      	ldr	r2, [pc, #300]	@ (800188c <HAL_DMA_IRQHandler+0x44c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d048      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x3b4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a4a      	ldr	r2, [pc, #296]	@ (8001890 <HAL_DMA_IRQHandler+0x450>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d040      	beq.n	80017ee <HAL_DMA_IRQHandler+0x3ae>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a48      	ldr	r2, [pc, #288]	@ (8001894 <HAL_DMA_IRQHandler+0x454>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d038      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x3a8>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a47      	ldr	r2, [pc, #284]	@ (8001898 <HAL_DMA_IRQHandler+0x458>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d030      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x3a2>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a45      	ldr	r2, [pc, #276]	@ (800189c <HAL_DMA_IRQHandler+0x45c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d028      	beq.n	80017dc <HAL_DMA_IRQHandler+0x39c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a3d      	ldr	r2, [pc, #244]	@ (8001884 <HAL_DMA_IRQHandler+0x444>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d020      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x396>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a41      	ldr	r2, [pc, #260]	@ (80018a0 <HAL_DMA_IRQHandler+0x460>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x392>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a40      	ldr	r2, [pc, #256]	@ (80018a4 <HAL_DMA_IRQHandler+0x464>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d012      	beq.n	80017ce <HAL_DMA_IRQHandler+0x38e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a3e      	ldr	r2, [pc, #248]	@ (80018a8 <HAL_DMA_IRQHandler+0x468>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00a      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x388>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a3d      	ldr	r2, [pc, #244]	@ (80018ac <HAL_DMA_IRQHandler+0x46c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d102      	bne.n	80017c2 <HAL_DMA_IRQHandler+0x382>
 80017bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c0:	e01b      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c6:	e018      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017cc:	e015      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017ce:	2320      	movs	r3, #32
 80017d0:	e013      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e011      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017da:	e00e      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80017e0:	e00b      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017e6:	e008      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ec:	e005      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f2:	e002      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017f4:	2320      	movs	r3, #32
 80017f6:	e000      	b.n	80017fa <HAL_DMA_IRQHandler+0x3ba>
 80017f8:	2302      	movs	r3, #2
 80017fa:	4a2e      	ldr	r2, [pc, #184]	@ (80018b4 <HAL_DMA_IRQHandler+0x474>)
 80017fc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180a:	2b00      	cmp	r3, #0
 800180c:	d034      	beq.n	8001878 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001816:	e02f      	b.n	8001878 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	2208      	movs	r2, #8
 800181e:	409a      	lsls	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d028      	beq.n	800187a <HAL_DMA_IRQHandler+0x43a>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d023      	beq.n	800187a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 020e 	bic.w	r2, r2, #14
 8001840:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
    }
  }
  return;
 8001878:	bf00      	nop
 800187a:	bf00      	nop
}
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40020080 	.word	0x40020080
 8001888:	40020008 	.word	0x40020008
 800188c:	4002001c 	.word	0x4002001c
 8001890:	40020030 	.word	0x40020030
 8001894:	40020044 	.word	0x40020044
 8001898:	40020058 	.word	0x40020058
 800189c:	4002006c 	.word	0x4002006c
 80018a0:	40020408 	.word	0x40020408
 80018a4:	4002041c 	.word	0x4002041c
 80018a8:	40020430 	.word	0x40020430
 80018ac:	40020444 	.word	0x40020444
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020000 	.word	0x40020000

080018b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b10      	cmp	r3, #16
 80018e4:	d108      	bne.n	80018f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018f6:	e007      	b.n	8001908 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	60da      	str	r2, [r3, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
	...

08001914 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800192e:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <HAL_FLASH_Program+0xd8>)
 8001930:	7e1b      	ldrb	r3, [r3, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_FLASH_Program+0x26>
 8001936:	2302      	movs	r3, #2
 8001938:	e054      	b.n	80019e4 <HAL_FLASH_Program+0xd0>
 800193a:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <HAL_FLASH_Program+0xd8>)
 800193c:	2201      	movs	r2, #1
 800193e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001940:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001944:	f000 f8a8 	bl	8001a98 <FLASH_WaitForLastOperation>
 8001948:	4603      	mov	r3, r0
 800194a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d144      	bne.n	80019dc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d102      	bne.n	800195e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001958:	2301      	movs	r3, #1
 800195a:	757b      	strb	r3, [r7, #21]
 800195c:	e007      	b.n	800196e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d102      	bne.n	800196a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001964:	2302      	movs	r3, #2
 8001966:	757b      	strb	r3, [r7, #21]
 8001968:	e001      	b.n	800196e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800196a:	2304      	movs	r3, #4
 800196c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800196e:	2300      	movs	r3, #0
 8001970:	75bb      	strb	r3, [r7, #22]
 8001972:	e02d      	b.n	80019d0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001974:	7dbb      	ldrb	r3, [r7, #22]
 8001976:	005a      	lsls	r2, r3, #1
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	eb02 0c03 	add.w	ip, r2, r3
 800197e:	7dbb      	ldrb	r3, [r7, #22]
 8001980:	0119      	lsls	r1, r3, #4
 8001982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001986:	f1c1 0620 	rsb	r6, r1, #32
 800198a:	f1a1 0020 	sub.w	r0, r1, #32
 800198e:	fa22 f401 	lsr.w	r4, r2, r1
 8001992:	fa03 f606 	lsl.w	r6, r3, r6
 8001996:	4334      	orrs	r4, r6
 8001998:	fa23 f000 	lsr.w	r0, r3, r0
 800199c:	4304      	orrs	r4, r0
 800199e:	fa23 f501 	lsr.w	r5, r3, r1
 80019a2:	b2a3      	uxth	r3, r4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4660      	mov	r0, ip
 80019a8:	f000 f85a 	bl	8001a60 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019b0:	f000 f872 	bl	8001a98 <FLASH_WaitForLastOperation>
 80019b4:	4603      	mov	r3, r0
 80019b6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <HAL_FLASH_Program+0xdc>)
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <HAL_FLASH_Program+0xdc>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80019ca:	7dbb      	ldrb	r3, [r7, #22]
 80019cc:	3301      	adds	r3, #1
 80019ce:	75bb      	strb	r3, [r7, #22]
 80019d0:	7dba      	ldrb	r2, [r7, #22]
 80019d2:	7d7b      	ldrb	r3, [r7, #21]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d3cd      	bcc.n	8001974 <HAL_FLASH_Program+0x60>
 80019d8:	e000      	b.n	80019dc <HAL_FLASH_Program+0xc8>
      {
        break;
 80019da:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <HAL_FLASH_Program+0xd8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	761a      	strb	r2, [r3, #24]

  return status;
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ec:	20001390 	.word	0x20001390
 80019f0:	40022000 	.word	0x40022000

080019f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <HAL_FLASH_Unlock+0x40>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_FLASH_Unlock+0x40>)
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <HAL_FLASH_Unlock+0x44>)
 8001a0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_FLASH_Unlock+0x40>)
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <HAL_FLASH_Unlock+0x48>)
 8001a14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a16:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <HAL_FLASH_Unlock+0x40>)
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001a26:	79fb      	ldrb	r3, [r7, #7]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000
 8001a38:	45670123 	.word	0x45670123
 8001a3c:	cdef89ab 	.word	0xcdef89ab

08001a40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_FLASH_Lock+0x1c>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <HAL_FLASH_Lock+0x1c>)
 8001a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a4e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40022000 	.word	0x40022000

08001a60 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <FLASH_Program_HalfWord+0x30>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <FLASH_Program_HalfWord+0x34>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <FLASH_Program_HalfWord+0x34>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	887a      	ldrh	r2, [r7, #2]
 8001a82:	801a      	strh	r2, [r3, #0]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20001390 	.word	0x20001390
 8001a94:	40022000 	.word	0x40022000

08001a98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff f978 	bl	8000d94 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001aa6:	e010      	b.n	8001aca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aae:	d00c      	beq.n	8001aca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <FLASH_WaitForLastOperation+0x2e>
 8001ab6:	f7ff f96d 	bl	8000d94 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d201      	bcs.n	8001aca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e025      	b.n	8001b16 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <FLASH_WaitForLastOperation+0x88>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1e8      	bne.n	8001aa8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <FLASH_WaitForLastOperation+0x88>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <FLASH_WaitForLastOperation+0x88>)
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <FLASH_WaitForLastOperation+0x88>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10b      	bne.n	8001b0c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <FLASH_WaitForLastOperation+0x88>)
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <FLASH_WaitForLastOperation+0x88>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b0c:	f000 f80a 	bl	8001b24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000

08001b24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001b2e:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <FLASH_SetErrorCode+0x98>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <FLASH_SetErrorCode+0x9c>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc0 <FLASH_SetErrorCode+0x9c>)
 8001b44:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f043 0310 	orr.w	r3, r3, #16
 8001b4c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <FLASH_SetErrorCode+0x98>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <FLASH_SetErrorCode+0x9c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	4a17      	ldr	r2, [pc, #92]	@ (8001bc0 <FLASH_SetErrorCode+0x9c>)
 8001b64:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <FLASH_SetErrorCode+0x98>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00b      	beq.n	8001b92 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <FLASH_SetErrorCode+0x9c>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <FLASH_SetErrorCode+0x9c>)
 8001b84:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <FLASH_SetErrorCode+0x98>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <FLASH_SetErrorCode+0x98>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f240 1201 	movw	r2, #257	@ 0x101
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d106      	bne.n	8001baa <FLASH_SetErrorCode+0x86>
 8001b9c:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <FLASH_SetErrorCode+0x98>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	4a06      	ldr	r2, [pc, #24]	@ (8001bbc <FLASH_SetErrorCode+0x98>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	61d3      	str	r3, [r2, #28]
}  
 8001ba8:	e002      	b.n	8001bb0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001baa:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <FLASH_SetErrorCode+0x98>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60d3      	str	r3, [r2, #12]
}  
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	20001390 	.word	0x20001390

08001bc4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <HAL_FLASHEx_Erase+0xd0>)
 8001bd8:	7e1b      	ldrb	r3, [r3, #24]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_FLASHEx_Erase+0x1e>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e053      	b.n	8001c8a <HAL_FLASHEx_Erase+0xc6>
 8001be2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c94 <HAL_FLASHEx_Erase+0xd0>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d116      	bne.n	8001c1e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001bf0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001bf4:	f7ff ff50 	bl	8001a98 <FLASH_WaitForLastOperation>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d141      	bne.n	8001c82 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f000 f84c 	bl	8001c9c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c08:	f7ff ff46 	bl	8001a98 <FLASH_WaitForLastOperation>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001c10:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <HAL_FLASHEx_Erase+0xd4>)
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	4a20      	ldr	r2, [pc, #128]	@ (8001c98 <HAL_FLASHEx_Erase+0xd4>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6113      	str	r3, [r2, #16]
 8001c1c:	e031      	b.n	8001c82 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001c1e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c22:	f7ff ff39 	bl	8001a98 <FLASH_WaitForLastOperation>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d12a      	bne.n	8001c82 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c32:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	e019      	b.n	8001c70 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001c3c:	68b8      	ldr	r0, [r7, #8]
 8001c3e:	f000 f849 	bl	8001cd4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c42:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c46:	f7ff ff27 	bl	8001a98 <FLASH_WaitForLastOperation>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001c4e:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_FLASHEx_Erase+0xd4>)
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	4a11      	ldr	r2, [pc, #68]	@ (8001c98 <HAL_FLASHEx_Erase+0xd4>)
 8001c54:	f023 0302 	bic.w	r3, r3, #2
 8001c58:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	601a      	str	r2, [r3, #0]
            break;
 8001c66:	e00c      	b.n	8001c82 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c6e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	02da      	lsls	r2, r3, #11
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3dc      	bcc.n	8001c3c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <HAL_FLASHEx_Erase+0xd0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	761a      	strb	r2, [r3, #24]

  return status;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20001390 	.word	0x20001390
 8001c98:	40022000 	.word	0x40022000

08001c9c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <FLASH_MassErase+0x30>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <FLASH_MassErase+0x34>)
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	4a08      	ldr	r2, [pc, #32]	@ (8001cd0 <FLASH_MassErase+0x34>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <FLASH_MassErase+0x34>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <FLASH_MassErase+0x34>)
 8001cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cc0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20001390 	.word	0x20001390
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <FLASH_PageErase+0x38>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <FLASH_PageErase+0x3c>)
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <FLASH_PageErase+0x3c>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001cee:	4a08      	ldr	r2, [pc, #32]	@ (8001d10 <FLASH_PageErase+0x3c>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <FLASH_PageErase+0x3c>)
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	4a05      	ldr	r2, [pc, #20]	@ (8001d10 <FLASH_PageErase+0x3c>)
 8001cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cfe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20001390 	.word	0x20001390
 8001d10:	40022000 	.word	0x40022000

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b08b      	sub	sp, #44	@ 0x2c
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e179      	b.n	800201c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8168 	bne.w	8002016 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a96      	ldr	r2, [pc, #600]	@ (8001fa4 <HAL_GPIO_Init+0x290>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d05e      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d50:	4a94      	ldr	r2, [pc, #592]	@ (8001fa4 <HAL_GPIO_Init+0x290>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d875      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d56:	4a94      	ldr	r2, [pc, #592]	@ (8001fa8 <HAL_GPIO_Init+0x294>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d058      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d5c:	4a92      	ldr	r2, [pc, #584]	@ (8001fa8 <HAL_GPIO_Init+0x294>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d86f      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d62:	4a92      	ldr	r2, [pc, #584]	@ (8001fac <HAL_GPIO_Init+0x298>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d052      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d68:	4a90      	ldr	r2, [pc, #576]	@ (8001fac <HAL_GPIO_Init+0x298>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d869      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a90      	ldr	r2, [pc, #576]	@ (8001fb0 <HAL_GPIO_Init+0x29c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d04c      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d74:	4a8e      	ldr	r2, [pc, #568]	@ (8001fb0 <HAL_GPIO_Init+0x29c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d863      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d7a:	4a8e      	ldr	r2, [pc, #568]	@ (8001fb4 <HAL_GPIO_Init+0x2a0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d046      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d80:	4a8c      	ldr	r2, [pc, #560]	@ (8001fb4 <HAL_GPIO_Init+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d85d      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d82a      	bhi.n	8001de0 <HAL_GPIO_Init+0xcc>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d859      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d94 <HAL_GPIO_Init+0x80>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001de9 	.word	0x08001de9
 8001d9c:	08001dfb 	.word	0x08001dfb
 8001da0:	08001e3d 	.word	0x08001e3d
 8001da4:	08001e43 	.word	0x08001e43
 8001da8:	08001e43 	.word	0x08001e43
 8001dac:	08001e43 	.word	0x08001e43
 8001db0:	08001e43 	.word	0x08001e43
 8001db4:	08001e43 	.word	0x08001e43
 8001db8:	08001e43 	.word	0x08001e43
 8001dbc:	08001e43 	.word	0x08001e43
 8001dc0:	08001e43 	.word	0x08001e43
 8001dc4:	08001e43 	.word	0x08001e43
 8001dc8:	08001e43 	.word	0x08001e43
 8001dcc:	08001e43 	.word	0x08001e43
 8001dd0:	08001e43 	.word	0x08001e43
 8001dd4:	08001e43 	.word	0x08001e43
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001e05 	.word	0x08001e05
 8001de0:	4a75      	ldr	r2, [pc, #468]	@ (8001fb8 <HAL_GPIO_Init+0x2a4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de6:	e02c      	b.n	8001e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e029      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	3304      	adds	r3, #4
 8001df6:	623b      	str	r3, [r7, #32]
          break;
 8001df8:	e024      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e01f      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	330c      	adds	r3, #12
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e01a      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e16:	2304      	movs	r3, #4
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e013      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	611a      	str	r2, [r3, #16]
          break;
 8001e2e:	e009      	b.n	8001e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e30:	2308      	movs	r3, #8
 8001e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	615a      	str	r2, [r3, #20]
          break;
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          break;
 8001e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2bff      	cmp	r3, #255	@ 0xff
 8001e48:	d801      	bhi.n	8001e4e <HAL_GPIO_Init+0x13a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_Init+0x13e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3304      	adds	r3, #4
 8001e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	@ 0xff
 8001e58:	d802      	bhi.n	8001e60 <HAL_GPIO_Init+0x14c>
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x152>
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	3b08      	subs	r3, #8
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	6a39      	ldr	r1, [r7, #32]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80c1 	beq.w	8002016 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e94:	4b49      	ldr	r3, [pc, #292]	@ (8001fbc <HAL_GPIO_Init+0x2a8>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a48      	ldr	r2, [pc, #288]	@ (8001fbc <HAL_GPIO_Init+0x2a8>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b46      	ldr	r3, [pc, #280]	@ (8001fbc <HAL_GPIO_Init+0x2a8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eac:	4a44      	ldr	r2, [pc, #272]	@ (8001fc0 <HAL_GPIO_Init+0x2ac>)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc4 <HAL_GPIO_Init+0x2b0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d01f      	beq.n	8001f18 <HAL_GPIO_Init+0x204>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3b      	ldr	r2, [pc, #236]	@ (8001fc8 <HAL_GPIO_Init+0x2b4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d019      	beq.n	8001f14 <HAL_GPIO_Init+0x200>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3a      	ldr	r2, [pc, #232]	@ (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_GPIO_Init+0x1fc>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a39      	ldr	r2, [pc, #228]	@ (8001fd0 <HAL_GPIO_Init+0x2bc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00d      	beq.n	8001f0c <HAL_GPIO_Init+0x1f8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a38      	ldr	r2, [pc, #224]	@ (8001fd4 <HAL_GPIO_Init+0x2c0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x1f4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a37      	ldr	r2, [pc, #220]	@ (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_GPIO_Init+0x1f0>
 8001f00:	2305      	movs	r3, #5
 8001f02:	e00a      	b.n	8001f1a <HAL_GPIO_Init+0x206>
 8001f04:	2306      	movs	r3, #6
 8001f06:	e008      	b.n	8001f1a <HAL_GPIO_Init+0x206>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e006      	b.n	8001f1a <HAL_GPIO_Init+0x206>
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e004      	b.n	8001f1a <HAL_GPIO_Init+0x206>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x206>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_GPIO_Init+0x206>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f2a:	4925      	ldr	r1, [pc, #148]	@ (8001fc0 <HAL_GPIO_Init+0x2ac>)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f44:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	4924      	ldr	r1, [pc, #144]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4920      	ldr	r1, [pc, #128]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	491a      	ldr	r1, [pc, #104]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4916      	ldr	r1, [pc, #88]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d025      	beq.n	8001fe0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f94:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4910      	ldr	r1, [pc, #64]	@ (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
 8001fa0:	e025      	b.n	8001fee <HAL_GPIO_Init+0x2da>
 8001fa2:	bf00      	nop
 8001fa4:	10320000 	.word	0x10320000
 8001fa8:	10310000 	.word	0x10310000
 8001fac:	10220000 	.word	0x10220000
 8001fb0:	10210000 	.word	0x10210000
 8001fb4:	10120000 	.word	0x10120000
 8001fb8:	10110000 	.word	0x10110000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40010800 	.word	0x40010800
 8001fc8:	40010c00 	.word	0x40010c00
 8001fcc:	40011000 	.word	0x40011000
 8001fd0:	40011400 	.word	0x40011400
 8001fd4:	40011800 	.word	0x40011800
 8001fd8:	40011c00 	.word	0x40011c00
 8001fdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fe0:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <HAL_GPIO_Init+0x324>)
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	4913      	ldr	r1, [pc, #76]	@ (8002038 <HAL_GPIO_Init+0x324>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_GPIO_Init+0x324>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	490e      	ldr	r1, [pc, #56]	@ (8002038 <HAL_GPIO_Init+0x324>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
 8002006:	e006      	b.n	8002016 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_GPIO_Init+0x324>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	43db      	mvns	r3, r3
 8002010:	4909      	ldr	r1, [pc, #36]	@ (8002038 <HAL_GPIO_Init+0x324>)
 8002012:	4013      	ands	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	3301      	adds	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	f47f ae7e 	bne.w	8001d28 <HAL_GPIO_Init+0x14>
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	372c      	adds	r7, #44	@ 0x2c
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002058:	e003      	b.n	8002062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	041a      	lsls	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	041a      	lsls	r2, r3, #16
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43d9      	mvns	r1, r3
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	400b      	ands	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	611a      	str	r2, [r3, #16]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e272      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8087 	beq.w	80021ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c0:	4b92      	ldr	r3, [pc, #584]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d00c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020cc:	4b8f      	ldr	r3, [pc, #572]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d112      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
 80020d8:	4b8c      	ldr	r3, [pc, #560]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e4:	d10b      	bne.n	80020fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e6:	4b89      	ldr	r3, [pc, #548]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d06c      	beq.n	80021cc <HAL_RCC_OscConfig+0x12c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d168      	bne.n	80021cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e24c      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x76>
 8002108:	4b80      	ldr	r3, [pc, #512]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7f      	ldr	r2, [pc, #508]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e02e      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x98>
 800211e:	4b7b      	ldr	r3, [pc, #492]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7a      	ldr	r2, [pc, #488]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b78      	ldr	r3, [pc, #480]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002130:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0xbc>
 8002142:	4b72      	ldr	r3, [pc, #456]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a71      	ldr	r2, [pc, #452]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6f      	ldr	r3, [pc, #444]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6e      	ldr	r2, [pc, #440]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xd4>
 800215c:	4b6b      	ldr	r3, [pc, #428]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6a      	ldr	r2, [pc, #424]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b68      	ldr	r3, [pc, #416]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a67      	ldr	r2, [pc, #412]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe fe0a 	bl	8000d94 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe fe06 	bl	8000d94 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e200      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5d      	ldr	r3, [pc, #372]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xe4>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fdf6 	bl	8000d94 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe fdf2 	bl	8000d94 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	@ 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1ec      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b53      	ldr	r3, [pc, #332]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x10c>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b4c      	ldr	r3, [pc, #304]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021e6:	4b49      	ldr	r3, [pc, #292]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
 80021f2:	4b46      	ldr	r3, [pc, #280]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b43      	ldr	r3, [pc, #268]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1c0      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4939      	ldr	r1, [pc, #228]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fdab 	bl	8000d94 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002242:	f7fe fda7 	bl	8000d94 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1a1      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2d      	ldr	r3, [pc, #180]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b2a      	ldr	r3, [pc, #168]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4927      	ldr	r1, [pc, #156]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <HAL_RCC_OscConfig+0x270>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fd8a 	bl	8000d94 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe fd86 	bl	8000d94 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e180      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1d      	ldr	r3, [pc, #116]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03a      	beq.n	8002324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7fe fd6a 	bl	8000d94 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe fd66 	bl	8000d94 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e160      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f000 face 	bl	8002884 <RCC_Delay>
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_RCC_OscConfig+0x274>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f0:	f7fe fd50 	bl	8000d94 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f6:	e00f      	b.n	8002318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7fe fd4c 	bl	8000d94 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d908      	bls.n	8002318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e146      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	42420000 	.word	0x42420000
 8002314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b92      	ldr	r3, [pc, #584]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e9      	bne.n	80022f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a6 	beq.w	800247e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b8b      	ldr	r3, [pc, #556]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b88      	ldr	r3, [pc, #544]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a87      	ldr	r2, [pc, #540]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b85      	ldr	r3, [pc, #532]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235a:	2301      	movs	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b82      	ldr	r3, [pc, #520]	@ (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d118      	bne.n	800239c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b7f      	ldr	r3, [pc, #508]	@ (8002568 <HAL_RCC_OscConfig+0x4c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7e      	ldr	r2, [pc, #504]	@ (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7fe fd0d 	bl	8000d94 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7fe fd09 	bl	8000d94 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b64      	cmp	r3, #100	@ 0x64
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e103      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	4b75      	ldr	r3, [pc, #468]	@ (8002568 <HAL_RCC_OscConfig+0x4c8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x312>
 80023a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e02d      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x334>
 80023ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a69      	ldr	r2, [pc, #420]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b67      	ldr	r3, [pc, #412]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a66      	ldr	r2, [pc, #408]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	e01c      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d10c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x356>
 80023dc:	4b61      	ldr	r3, [pc, #388]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a60      	ldr	r2, [pc, #384]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e00b      	b.n	800240e <HAL_RCC_OscConfig+0x36e>
 80023f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4b58      	ldr	r3, [pc, #352]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a57      	ldr	r2, [pc, #348]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d015      	beq.n	8002442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7fe fcbd 	bl	8000d94 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe fcb9 	bl	8000d94 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0b1      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	4b4b      	ldr	r3, [pc, #300]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ee      	beq.n	800241e <HAL_RCC_OscConfig+0x37e>
 8002440:	e014      	b.n	800246c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe fca7 	bl	8000d94 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe fca3 	bl	8000d94 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e09b      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	4b40      	ldr	r3, [pc, #256]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ee      	bne.n	800244a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b3c      	ldr	r3, [pc, #240]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a3b      	ldr	r2, [pc, #236]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8087 	beq.w	8002596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002488:	4b36      	ldr	r3, [pc, #216]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b08      	cmp	r3, #8
 8002492:	d061      	beq.n	8002558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d146      	bne.n	800252a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249c:	4b33      	ldr	r3, [pc, #204]	@ (800256c <HAL_RCC_OscConfig+0x4cc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fc77 	bl	8000d94 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fc73 	bl	8000d94 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e06d      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d0:	d108      	bne.n	80024e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d2:	4b24      	ldr	r3, [pc, #144]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4921      	ldr	r1, [pc, #132]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a19      	ldr	r1, [r3, #32]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	430b      	orrs	r3, r1
 80024f6:	491b      	ldr	r1, [pc, #108]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024fc:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fc47 	bl	8000d94 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7fe fc43 	bl	8000d94 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e03d      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x46a>
 8002528:	e035      	b.n	8002596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <HAL_RCC_OscConfig+0x4cc>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fc30 	bl	8000d94 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe fc2c 	bl	8000d94 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e026      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x498>
 8002556:	e01e      	b.n	8002596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d107      	bne.n	8002570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e019      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
 800256c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_RCC_OscConfig+0x500>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0d0      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b67      	ldr	r3, [pc, #412]	@ (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4965      	ldr	r1, [pc, #404]	@ (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b63      	ldr	r3, [pc, #396]	@ (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0b8      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002600:	4b59      	ldr	r3, [pc, #356]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a58      	ldr	r2, [pc, #352]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800260a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002618:	4b53      	ldr	r3, [pc, #332]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a52      	ldr	r2, [pc, #328]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b50      	ldr	r3, [pc, #320]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	494d      	ldr	r1, [pc, #308]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d040      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b47      	ldr	r3, [pc, #284]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07f      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e073      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3d      	ldr	r3, [pc, #244]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b39      	ldr	r3, [pc, #228]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4936      	ldr	r1, [pc, #216]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7fe fb7e 	bl	8000d94 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7fe fb7a 	bl	8000d94 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e053      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b27      	ldr	r3, [pc, #156]	@ (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d210      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b24      	ldr	r3, [pc, #144]	@ (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4922      	ldr	r1, [pc, #136]	@ (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b20      	ldr	r3, [pc, #128]	@ (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e032      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4916      	ldr	r1, [pc, #88]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271e:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	490e      	ldr	r1, [pc, #56]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002732:	f000 f821 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490a      	ldr	r1, [pc, #40]	@ (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	4a09      	ldr	r2, [pc, #36]	@ (8002770 <HAL_RCC_ClockConfig+0x1cc>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274e:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <HAL_RCC_ClockConfig+0x1d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fadc 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
 800276c:	08003a30 	.word	0x08003a30
 8002770:	20000000 	.word	0x20000000
 8002774:	20000204 	.word	0x20000204

08002778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002792:	4b1e      	ldr	r3, [pc, #120]	@ (800280c <HAL_RCC_GetSysClockFreq+0x94>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x30>
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x36>
 80027a6:	e027      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a8:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x98>)
 80027aa:	613b      	str	r3, [r7, #16]
      break;
 80027ac:	e027      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	0c9b      	lsrs	r3, r3, #18
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4a17      	ldr	r2, [pc, #92]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d010      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027c6:	4b11      	ldr	r3, [pc, #68]	@ (800280c <HAL_RCC_GetSysClockFreq+0x94>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0c5b      	lsrs	r3, r3, #17
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	fb03 f202 	mul.w	r2, r3, r2
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e004      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a0c      	ldr	r2, [pc, #48]	@ (800281c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	613b      	str	r3, [r7, #16]
      break;
 80027f6:	e002      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fa:	613b      	str	r3, [r7, #16]
      break;
 80027fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fe:	693b      	ldr	r3, [r7, #16]
}
 8002800:	4618      	mov	r0, r3
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	007a1200 	.word	0x007a1200
 8002814:	08003a48 	.word	0x08003a48
 8002818:	08003a58 	.word	0x08003a58
 800281c:	003d0900 	.word	0x003d0900

08002820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b02      	ldr	r3, [pc, #8]	@ (8002830 <HAL_RCC_GetHCLKFreq+0x10>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000000 	.word	0x20000000

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002838:	f7ff fff2 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	@ (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	08003a40 	.word	0x08003a40

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffde 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0adb      	lsrs	r3, r3, #11
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	@ (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08003a40 	.word	0x08003a40

08002884 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <RCC_Delay+0x34>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <RCC_Delay+0x38>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0a5b      	lsrs	r3, r3, #9
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a0:	bf00      	nop
  }
  while (Delay --);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	60fa      	str	r2, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f9      	bne.n	80028a0 <RCC_Delay+0x1c>
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000000 	.word	0x20000000
 80028bc:	10624dd3 	.word	0x10624dd3

080028c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e042      	b.n	8002958 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fd fe2a 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	@ 0x24
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 ffbf 	bl	8003888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	@ 0x30
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	d156      	bne.n	8002a28 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_UART_Transmit_DMA+0x26>
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e04f      	b.n	8002a2a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	88fa      	ldrh	r2, [r7, #6]
 8002994:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2221      	movs	r2, #33	@ 0x21
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ae:	4a21      	ldr	r2, [pc, #132]	@ (8002a34 <HAL_UART_Transmit_DMA+0xd4>)
 80029b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b6:	4a20      	ldr	r2, [pc, #128]	@ (8002a38 <HAL_UART_Transmit_DMA+0xd8>)
 80029b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	4a1f      	ldr	r2, [pc, #124]	@ (8002a3c <HAL_UART_Transmit_DMA+0xdc>)
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c6:	2200      	movs	r2, #0
 80029c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80029ca:	f107 0308 	add.w	r3, r7, #8
 80029ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80029d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3304      	adds	r3, #4
 80029de:	461a      	mov	r2, r3
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	f7fe fb89 	bl	80010f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3314      	adds	r3, #20
 80029f6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	617b      	str	r3, [r7, #20]
   return(result);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a10:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a12:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3730      	adds	r7, #48	@ 0x30
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	0800311d 	.word	0x0800311d
 8002a38:	080031b7 	.word	0x080031b7
 8002a3c:	0800333b 	.word	0x0800333b

08002a40 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d112      	bne.n	8002a80 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_UART_Receive_DMA+0x26>
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00b      	b.n	8002a82 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fcaa 	bl	80033d0 <UART_Start_Receive_DMA>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	e000      	b.n	8002a82 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b090      	sub	sp, #64	@ 0x40
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b21      	cmp	r3, #33	@ 0x21
 8002ab6:	d128      	bne.n	8002b0a <HAL_UART_DMAStop+0x80>
 8002ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d025      	beq.n	8002b0a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3314      	adds	r3, #20
 8002adc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e5      	bne.n	8002abe <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fb5a 	bl	80011b8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fcfd 	bl	8003504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b22      	cmp	r3, #34	@ 0x22
 8002b2a:	d128      	bne.n	8002b7e <HAL_UART_DMAStop+0xf4>
 8002b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d025      	beq.n	8002b7e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3314      	adds	r3, #20
 8002b38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	e853 3f00 	ldrex	r3, [r3]
 8002b40:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b52:	61fa      	str	r2, [r7, #28]
 8002b54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1e5      	bne.n	8002b32 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d004      	beq.n	8002b78 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fb20 	bl	80011b8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fcea 	bl	8003552 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3740      	adds	r7, #64	@ 0x40
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b0ba      	sub	sp, #232	@ 0xe8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_UART_IRQHandler+0x66>
 8002bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fd90 	bl	800370c <UART_Receive_IT>
      return;
 8002bec:	e25b      	b.n	80030a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80de 	beq.w	8002db4 <HAL_UART_IRQHandler+0x22c>
 8002bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d106      	bne.n	8002c12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80d1 	beq.w	8002db4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <HAL_UART_IRQHandler+0xae>
 8002c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_UART_IRQHandler+0xd2>
 8002c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	f043 0202 	orr.w	r2, r3, #2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_UART_IRQHandler+0xf6>
 8002c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f043 0204 	orr.w	r2, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d011      	beq.n	8002cae <HAL_UART_IRQHandler+0x126>
 8002c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d105      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f043 0208 	orr.w	r2, r3, #8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 81f2 	beq.w	800309c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x14e>
 8002cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fd1b 	bl	800370c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_UART_IRQHandler+0x17a>
 8002cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d04f      	beq.n	8002da2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fc25 	bl	8003552 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d041      	beq.n	8002d9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3314      	adds	r3, #20
 8002d3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1d9      	bne.n	8002d16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d013      	beq.n	8002d92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f68 <HAL_UART_IRQHandler+0x3e0>)
 8002d70:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe fa5a 	bl	8001230 <HAL_DMA_Abort_IT>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d90:	e00e      	b.n	8002db0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f9ae 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d98:	e00a      	b.n	8002db0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f9aa 	bl	80030f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	e006      	b.n	8002db0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f9a6 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002dae:	e175      	b.n	800309c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	bf00      	nop
    return;
 8002db2:	e173      	b.n	800309c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	f040 814f 	bne.w	800305c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8148 	beq.w	800305c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8141 	beq.w	800305c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80b6 	beq.w	8002f6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8145 	beq.w	80030a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	f080 813e 	bcs.w	80030a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f000 8088 	beq.w	8002f48 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e64:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1d9      	bne.n	8002e38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ea8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002eac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002eb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002eba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e1      	bne.n	8002e84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ee4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ee6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002eea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002eec:	e841 2300 	strex	r3, r2, [r1]
 8002ef0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ef2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e3      	bne.n	8002ec0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f18:	f023 0310 	bic.w	r3, r3, #16
 8002f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f2c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e3      	bne.n	8002f06 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe f938 	bl	80011b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8d1 	bl	8003106 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f64:	e09c      	b.n	80030a0 <HAL_UART_IRQHandler+0x518>
 8002f66:	bf00      	nop
 8002f68:	08003617 	.word	0x08003617
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 808e 	beq.w	80030a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8089 	beq.w	80030a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002fb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002fb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e3      	bne.n	8002f92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002fee:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff6:	e841 2300 	strex	r3, r2, [r1]
 8002ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e3      	bne.n	8002fca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	e853 3f00 	ldrex	r3, [r3]
 800301e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0310 	bic.w	r3, r3, #16
 8003026:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003034:	61fa      	str	r2, [r7, #28]
 8003036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003038:	69b9      	ldr	r1, [r7, #24]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	e841 2300 	strex	r3, r2, [r1]
 8003040:	617b      	str	r3, [r7, #20]
   return(result);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e3      	bne.n	8003010 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800304e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f856 	bl	8003106 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800305a:	e023      	b.n	80030a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800305c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_UART_IRQHandler+0x4f4>
 8003068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800306c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fae2 	bl	800363e <UART_Transmit_IT>
    return;
 800307a:	e014      	b.n	80030a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00e      	beq.n	80030a6 <HAL_UART_IRQHandler+0x51e>
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800308c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fb21 	bl	80036dc <UART_EndTransmit_IT>
    return;
 800309a:	e004      	b.n	80030a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800309c:	bf00      	nop
 800309e:	e002      	b.n	80030a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80030a4:	bf00      	nop
  }
}
 80030a6:	37e8      	adds	r7, #232	@ 0xe8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b090      	sub	sp, #64	@ 0x40
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d137      	bne.n	80031a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313a:	2200      	movs	r2, #0
 800313c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800313e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3314      	adds	r3, #20
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	623b      	str	r3, [r7, #32]
   return(result);
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003154:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3314      	adds	r3, #20
 800315c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800315e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e5      	bne.n	800313e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	60fb      	str	r3, [r7, #12]
   return(result);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
 800318a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003192:	61fa      	str	r2, [r7, #28]
 8003194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	617b      	str	r3, [r7, #20]
   return(result);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031a6:	e002      	b.n	80031ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80031a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80031aa:	f7ff ff7f 	bl	80030ac <HAL_UART_TxCpltCallback>
}
 80031ae:	bf00      	nop
 80031b0:	3740      	adds	r7, #64	@ 0x40
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff ff7a 	bl	80030be <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b09c      	sub	sp, #112	@ 0x70
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d172      	bne.n	80032d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80031ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f0:	2200      	movs	r2, #0
 80031f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003206:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800320a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800320c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003214:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003216:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800321a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800321c:	e841 2300 	strex	r3, r2, [r1]
 8003220:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e5      	bne.n	80031f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3314      	adds	r3, #20
 800322e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3314      	adds	r3, #20
 8003246:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003248:	647a      	str	r2, [r7, #68]	@ 0x44
 800324a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800324e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e5      	bne.n	8003228 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800325c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	623b      	str	r3, [r7, #32]
   return(result);
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003272:	663b      	str	r3, [r7, #96]	@ 0x60
 8003274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3314      	adds	r3, #20
 800327a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800327c:	633a      	str	r2, [r7, #48]	@ 0x30
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800328a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	2b01      	cmp	r3, #1
 800329e:	d119      	bne.n	80032d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0310 	bic.w	r3, r3, #16
 80032b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80032c0:	61fa      	str	r2, [r7, #28]
 80032c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	617b      	str	r3, [r7, #20]
   return(result);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e5      	bne.n	80032a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d6:	2200      	movs	r2, #0
 80032d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d106      	bne.n	80032f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032e6:	4619      	mov	r1, r3
 80032e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80032ea:	f7ff ff0c 	bl	8003106 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032ee:	e002      	b.n	80032f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80032f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80032f2:	f7ff feed 	bl	80030d0 <HAL_UART_RxCpltCallback>
}
 80032f6:	bf00      	nop
 80032f8:	3770      	adds	r7, #112	@ 0x70
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	2b01      	cmp	r3, #1
 8003318:	d108      	bne.n	800332c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	b29b      	uxth	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff feee 	bl	8003106 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800332a:	e002      	b.n	8003332 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fed8 	bl	80030e2 <HAL_UART_RxHalfCpltCallback>
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b21      	cmp	r3, #33	@ 0x21
 800336c:	d108      	bne.n	8003380 <UART_DMAError+0x46>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2200      	movs	r2, #0
 8003378:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800337a:	68b8      	ldr	r0, [r7, #8]
 800337c:	f000 f8c2 	bl	8003504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b22      	cmp	r3, #34	@ 0x22
 80033a0:	d108      	bne.n	80033b4 <UART_DMAError+0x7a>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2200      	movs	r2, #0
 80033ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80033ae:	68b8      	ldr	r0, [r7, #8]
 80033b0:	f000 f8cf 	bl	8003552 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033c0:	68b8      	ldr	r0, [r7, #8]
 80033c2:	f7ff fe97 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b098      	sub	sp, #96	@ 0x60
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	88fa      	ldrh	r2, [r7, #6]
 80033e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2222      	movs	r2, #34	@ 0x22
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fc:	4a3e      	ldr	r2, [pc, #248]	@ (80034f8 <UART_Start_Receive_DMA+0x128>)
 80033fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	4a3d      	ldr	r2, [pc, #244]	@ (80034fc <UART_Start_Receive_DMA+0x12c>)
 8003406:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	4a3c      	ldr	r2, [pc, #240]	@ (8003500 <UART_Start_Receive_DMA+0x130>)
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	2200      	movs	r2, #0
 8003416:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3304      	adds	r3, #4
 8003428:	4619      	mov	r1, r3
 800342a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	f7fd fe62 	bl	80010f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d019      	beq.n	8003486 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003468:	65bb      	str	r3, [r7, #88]	@ 0x58
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003472:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003474:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003478:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3314      	adds	r3, #20
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	657b      	str	r3, [r7, #84]	@ 0x54
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80034ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3314      	adds	r3, #20
 80034c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80034da:	627a      	str	r2, [r7, #36]	@ 0x24
 80034dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6a39      	ldr	r1, [r7, #32]
 80034e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3760      	adds	r7, #96	@ 0x60
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	080031d3 	.word	0x080031d3
 80034fc:	080032ff 	.word	0x080032ff
 8003500:	0800333b 	.word	0x0800333b

08003504 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	@ 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	60bb      	str	r3, [r7, #8]
   return(result);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	61ba      	str	r2, [r7, #24]
 800352e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6979      	ldr	r1, [r7, #20]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	613b      	str	r3, [r7, #16]
   return(result);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003548:	bf00      	nop
 800354a:	3724      	adds	r7, #36	@ 0x24
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003552:	b480      	push	{r7}
 8003554:	b095      	sub	sp, #84	@ 0x54
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800357a:	643a      	str	r2, [r7, #64]	@ 0x40
 800357c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003580:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e5      	bne.n	800355a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3314      	adds	r3, #20
 8003594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	61fb      	str	r3, [r7, #28]
   return(result);
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3314      	adds	r3, #20
 80035ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d119      	bne.n	80035fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f023 0310 	bic.w	r3, r3, #16
 80035e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ea:	61ba      	str	r2, [r7, #24]
 80035ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6979      	ldr	r1, [r7, #20]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	613b      	str	r3, [r7, #16]
   return(result);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e5      	bne.n	80035ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800360c:	bf00      	nop
 800360e:	3754      	adds	r7, #84	@ 0x54
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7ff fd5f 	bl	80030f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b21      	cmp	r3, #33	@ 0x21
 8003650:	d13e      	bne.n	80036d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365a:	d114      	bne.n	8003686 <UART_Transmit_IT+0x48>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d110      	bne.n	8003686 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003678:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	1c9a      	adds	r2, r3, #2
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	621a      	str	r2, [r3, #32]
 8003684:	e008      	b.n	8003698 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	1c59      	adds	r1, r3, #1
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6211      	str	r1, [r2, #32]
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4619      	mov	r1, r3
 80036a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10f      	bne.n	80036cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fcd5 	bl	80030ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	@ 0x30
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b22      	cmp	r3, #34	@ 0x22
 800371e:	f040 80ae 	bne.w	800387e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372a:	d117      	bne.n	800375c <UART_Receive_IT+0x50>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d113      	bne.n	800375c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	b29b      	uxth	r3, r3
 8003746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374a:	b29a      	uxth	r2, r3
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003754:	1c9a      	adds	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	629a      	str	r2, [r3, #40]	@ 0x28
 800375a:	e026      	b.n	80037aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800376e:	d007      	beq.n	8003780 <UART_Receive_IT+0x74>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <UART_Receive_IT+0x82>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d106      	bne.n	800378e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e008      	b.n	80037a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800379a:	b2da      	uxtb	r2, r3
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4619      	mov	r1, r3
 80037b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d15d      	bne.n	800387a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0220 	bic.w	r2, r2, #32
 80037cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	2b01      	cmp	r3, #1
 8003802:	d135      	bne.n	8003870 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	613b      	str	r3, [r7, #16]
   return(result);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f023 0310 	bic.w	r3, r3, #16
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	330c      	adds	r3, #12
 8003828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382a:	623a      	str	r2, [r7, #32]
 800382c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	69f9      	ldr	r1, [r7, #28]
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	61bb      	str	r3, [r7, #24]
   return(result);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e5      	bne.n	800380a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b10      	cmp	r3, #16
 800384a:	d10a      	bne.n	8003862 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff fc4c 	bl	8003106 <HAL_UARTEx_RxEventCallback>
 800386e:	e002      	b.n	8003876 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fc2d 	bl	80030d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e002      	b.n	8003880 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3730      	adds	r7, #48	@ 0x30
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80038c2:	f023 030c 	bic.w	r3, r3, #12
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	430b      	orrs	r3, r1
 80038ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2c      	ldr	r2, [pc, #176]	@ (800399c <UART_SetConfig+0x114>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d103      	bne.n	80038f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038f0:	f7fe ffb4 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	e002      	b.n	80038fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038f8:	f7fe ff9c 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 80038fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009a      	lsls	r2, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	4a22      	ldr	r2, [pc, #136]	@ (80039a0 <UART_SetConfig+0x118>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	0119      	lsls	r1, r3, #4
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	009a      	lsls	r2, r3, #2
 8003928:	441a      	add	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	fbb2 f2f3 	udiv	r2, r2, r3
 8003934:	4b1a      	ldr	r3, [pc, #104]	@ (80039a0 <UART_SetConfig+0x118>)
 8003936:	fba3 0302 	umull	r0, r3, r3, r2
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2064      	movs	r0, #100	@ 0x64
 800393e:	fb00 f303 	mul.w	r3, r0, r3
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	3332      	adds	r3, #50	@ 0x32
 8003948:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <UART_SetConfig+0x118>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003954:	4419      	add	r1, r3
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009a      	lsls	r2, r3, #2
 8003960:	441a      	add	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	fbb2 f2f3 	udiv	r2, r2, r3
 800396c:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <UART_SetConfig+0x118>)
 800396e:	fba3 0302 	umull	r0, r3, r3, r2
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2064      	movs	r0, #100	@ 0x64
 8003976:	fb00 f303 	mul.w	r3, r0, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	3332      	adds	r3, #50	@ 0x32
 8003980:	4a07      	ldr	r2, [pc, #28]	@ (80039a0 <UART_SetConfig+0x118>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	f003 020f 	and.w	r2, r3, #15
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	440a      	add	r2, r1
 8003992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40013800 	.word	0x40013800
 80039a0:	51eb851f 	.word	0x51eb851f

080039a4 <memset>:
 80039a4:	4603      	mov	r3, r0
 80039a6:	4402      	add	r2, r0
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d100      	bne.n	80039ae <memset+0xa>
 80039ac:	4770      	bx	lr
 80039ae:	f803 1b01 	strb.w	r1, [r3], #1
 80039b2:	e7f9      	b.n	80039a8 <memset+0x4>

080039b4 <__libc_init_array>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	2600      	movs	r6, #0
 80039b8:	4d0c      	ldr	r5, [pc, #48]	@ (80039ec <__libc_init_array+0x38>)
 80039ba:	4c0d      	ldr	r4, [pc, #52]	@ (80039f0 <__libc_init_array+0x3c>)
 80039bc:	1b64      	subs	r4, r4, r5
 80039be:	10a4      	asrs	r4, r4, #2
 80039c0:	42a6      	cmp	r6, r4
 80039c2:	d109      	bne.n	80039d8 <__libc_init_array+0x24>
 80039c4:	f000 f828 	bl	8003a18 <_init>
 80039c8:	2600      	movs	r6, #0
 80039ca:	4d0a      	ldr	r5, [pc, #40]	@ (80039f4 <__libc_init_array+0x40>)
 80039cc:	4c0a      	ldr	r4, [pc, #40]	@ (80039f8 <__libc_init_array+0x44>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	42a6      	cmp	r6, r4
 80039d4:	d105      	bne.n	80039e2 <__libc_init_array+0x2e>
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039dc:	4798      	blx	r3
 80039de:	3601      	adds	r6, #1
 80039e0:	e7ee      	b.n	80039c0 <__libc_init_array+0xc>
 80039e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e6:	4798      	blx	r3
 80039e8:	3601      	adds	r6, #1
 80039ea:	e7f2      	b.n	80039d2 <__libc_init_array+0x1e>
 80039ec:	08003a5c 	.word	0x08003a5c
 80039f0:	08003a5c 	.word	0x08003a5c
 80039f4:	08003a5c 	.word	0x08003a5c
 80039f8:	08003a60 	.word	0x08003a60

080039fc <memcpy>:
 80039fc:	440a      	add	r2, r1
 80039fe:	4291      	cmp	r1, r2
 8003a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a04:	d100      	bne.n	8003a08 <memcpy+0xc>
 8003a06:	4770      	bx	lr
 8003a08:	b510      	push	{r4, lr}
 8003a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a0e:	4291      	cmp	r1, r2
 8003a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a14:	d1f9      	bne.n	8003a0a <memcpy+0xe>
 8003a16:	bd10      	pop	{r4, pc}

08003a18 <_init>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	bf00      	nop
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr

08003a24 <_fini>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr
